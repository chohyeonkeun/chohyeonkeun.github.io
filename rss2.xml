<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>조누스의 걸음마 개발 로그</title>
    <link>https://chohyeonkeun.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 04 Jul 2019 17:08:25 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>자료구조 - 이진트리 학습</title>
      <link>https://chohyeonkeun.github.io/2019/07/04/190704-datastructure-binarytree/</link>
      <guid>https://chohyeonkeun.github.io/2019/07/04/190704-datastructure-binarytree/</guid>
      <pubDate>Thu, 04 Jul 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;이진트리-Binary-Tree-란&quot;&gt;&lt;a href=&quot;#이진트리-Binary-Tree-란&quot; class=&quot;headerlink&quot; title=&quot;이진트리(Binary Tree)란?&quot;&gt;&lt;/a&gt;이진트리(Binary Tree)란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;어떤 노드의 자식 노드의 수가 최대 2개인 트리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;공집합 혹은 루트(root)와 왼쪽 서브 트리, 오른쪽 서브 트리로 이루어진 유한 집합, 각각의 서브 트리는 모두 이진 트리이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;트리는 connected acyclic graph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;루트 노드(root)를 반드시 가진다.&lt;/li&gt;
&lt;li&gt;트리를 구성하는 노드 간 단순 경로가 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;트리는 1개 이상의 노드로 이루어진 유한 집합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;루트 노드(root)를 반드시 가진다.&lt;/li&gt;
&lt;li&gt;나머지 노드들은 분리집합 T1, …, Tn으로 분할 가능&lt;ul&gt;
&lt;li&gt;T1, T2 등은 각각의 하나의 트리(서브 트리)가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="이진트리-Binary-Tree-란"><a href="#이진트리-Binary-Tree-란" class="headerlink" title="이진트리(Binary Tree)란?"></a>이진트리(Binary Tree)란?</h2><ul><li><p>어떤 노드의 자식 노드의 수가 최대 2개인 트리</p></li><li><p>공집합 혹은 루트(root)와 왼쪽 서브 트리, 오른쪽 서브 트리로 이루어진 유한 집합, 각각의 서브 트리는 모두 이진 트리이다.</p></li><li><p>트리는 connected acyclic graph</p><ul><li>루트 노드(root)를 반드시 가진다.</li><li>트리를 구성하는 노드 간 단순 경로가 존재한다.</li></ul></li><li><p>트리는 1개 이상의 노드로 이루어진 유한 집합</p><ul><li>루트 노드(root)를 반드시 가진다.</li><li>나머지 노드들은 분리집합 T1, …, Tn으로 분할 가능<ul><li>T1, T2 등은 각각의 하나의 트리(서브 트리)가 된다.</li></ul></li></ul></li></ul><a id="more"></a><h2 id="트리-용어"><a href="#트리-용어" class="headerlink" title="트리 용어"></a>트리 용어</h2><ul><li>차수(degree): 어떤 노드의 자식 노드의 개수</li><li>트리의 차수(degree of a tree): 트리에 있는 노드의 최대 차수</li><li>리프 노드(leaf node): 차수가 0인 노드, 즉 자식이 없다.<ul><li>단말노드(terminal node)라고도 부른다.</li></ul></li><li>레벨(level): 루트의 레벨을 1로 하고 자식으로 내려가면서 하나씩 더한다.</li><li>트리의 높이(height) or 깊이(depth): 트리가 가지는 최대 레벨</li><li>포레스트(forest): 루트 노드를 없앤 후 얻은 서브 트리의 집합</li><li>엣지(edge): 노드와 노드를 연결한 선</li><li>노드(node)와 엣지(edge)의 관계<ul><li>노드의 개수: <code>n</code></li><li>엣지의 개수: <code>e</code></li><li><code>e = n - 1</code></li></ul></li></ul><h2 id="이진-트리의-특징"><a href="#이진-트리의-특징" class="headerlink" title="이진 트리의 특징"></a>이진 트리의 특징</h2><ul><li>레벨 l에서 최대 노드 수: <code>2^(l-1)</code>개</li><li>높이가 h인 이진 트리의 최대 노드 수: <code>2^h - 1</code>개</li><li>높이가 h인 이진 트리의 최소 노드 수: <code>h</code>개</li></ul><h2 id="이진-트리의-종류"><a href="#이진-트리의-종류" class="headerlink" title="이진 트리의 종류"></a>이진 트리의 종류</h2><ul><li>포화 이진 트리(full binary tree)<ul><li>높이가 <code>h</code>이면 노드 수가 <code>2^h - 1</code> 인 트리(모든 레벨이 꽉 차 있다.)</li></ul></li><li>완전 이진 트리(complete binary tree)<ul><li>높이가 <code>h</code>이면 <code>level h-1</code> 까지 노드 수는 <code>2^(h-1) - 1</code> 개 이고, level h 에서는 왼쪽부터 오른쪽으로 노드가 채워져 있는 트리</li></ul></li><li>편향 이진 트리(skewed binary tree)<ul><li>왼쪽이나 오른쪽 서브 트리만 가지는 트리</li></ul></li></ul><h2 id="순회-traversal"><a href="#순회-traversal" class="headerlink" title="순회(traversal)"></a>순회(traversal)</h2><ul><li><p><strong>전위 순회</strong> (stack으로 구현)<br><img src="https://user-images.githubusercontent.com/48202867/60679741-b1c80d80-9ec3-11e9-9f1e-57f52f6fa0ab.png" alt="Screenshot from 2019-07-05 01-21-25">*</p></li><li><p><strong>중위 순회</strong> (stack으로 구현)<br><img src="https://user-images.githubusercontent.com/48202867/60679742-b1c80d80-9ec3-11e9-8410-0c0371594ca9.png" alt="Screenshot from 2019-07-05 01-21-27"></p></li><li><p><strong>후위 순회</strong> (stack으로 구현)<br><img src="https://user-images.githubusercontent.com/48202867/60679743-b1c80d80-9ec3-11e9-8352-169bac75a7cd.png" alt="Screenshot from 2019-07-05 01-21-30"></p></li><li><p><strong>레벨 순회</strong> (queue로 구현)<br><img src="https://user-images.githubusercontent.com/48202867/60679744-b260a400-9ec3-11e9-8742-ff0e18148040.png" alt="Screenshot from 2019-07-05 01-21-31"></p></li></ul><h2 id="파이썬으로-이진트리-구현"><a href="#파이썬으로-이진트리-구현" class="headerlink" title="파이썬으로 이진트리 구현"></a>파이썬으로 이진트리 구현</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 노드 생성</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.__key = key</span><br><span class="line">        self.__left = <span class="literal">None</span></span><br><span class="line">        self.__right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'key <span class="subst">&#123;self.__key&#125;</span> is deleted'</span>)</span><br><span class="line">    <span class="comment"># get 함수</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">key</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__key</span><br><span class="line">    <span class="comment"># set 함수</span></span><br><span class="line"><span class="meta">    @key.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">key</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.__key = key</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__left</span><br><span class="line"></span><br><span class="line"><span class="meta">    @left.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(self, left)</span>:</span></span><br><span class="line">        self.__left = left</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__right</span><br><span class="line"></span><br><span class="line"><span class="meta">    @right.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right</span><span class="params">(self, right)</span>:</span></span><br><span class="line">        self.__right = right</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_root</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder_traverse</span><span class="params">(self, cur, func)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        func(cur)</span><br><span class="line">        self.preorder_traverse(cur.left, func)</span><br><span class="line">        self.preorder_traverse(cur.right, func)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        new_node = TreeNode(key)</span><br><span class="line"></span><br><span class="line">        cur = self.root</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">            self.root = new_node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            parent = cur</span><br><span class="line">            <span class="keyword">if</span> key &lt; cur.key:</span><br><span class="line">                cur = cur.left</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">                    parent.left = new_node</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.right</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">                    parent.right = new_node</span><br><span class="line">                    <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, target)</span>:</span></span><br><span class="line">        cur = self.root</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.key == target:</span><br><span class="line">                <span class="keyword">return</span> cur</span><br><span class="line">            <span class="keyword">elif</span> cur.key &gt; target:</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">elif</span> cur.key &lt; target:</span><br><span class="line">                cur = cur.right</span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove_recursion</span><span class="params">(self, cur, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> target &lt; cur.key:</span><br><span class="line">            cur.left, rem_node = self.__remove_recursion(cur.left, target)</span><br><span class="line">        <span class="keyword">elif</span> target &gt; cur.key:</span><br><span class="line">            cur.right, rem_node = self.__remove_recursion(cur.right, target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur.left <span class="keyword">and</span> <span class="keyword">not</span> cur.right:</span><br><span class="line">                rem_node = cur</span><br><span class="line">                cur = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> cur.right:</span><br><span class="line">                rem_node = cur</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> cur.left:</span><br><span class="line">                rem_node = cur</span><br><span class="line">                cur = cur.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                replace = cur.left</span><br><span class="line">                <span class="keyword">while</span> replace.right:</span><br><span class="line">                    replace = replace.right</span><br><span class="line">                cur.key, replace.key = replace.key, cur.key</span><br><span class="line">                cur.left, rem_node = self.__remove_recursion(cur.left, replace.key)</span><br><span class="line">        <span class="keyword">return</span> cur, rem_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, target)</span>:</span></span><br><span class="line">        self.root, removed_node = self.__remove_recursion(self.root, target)</span><br><span class="line">        <span class="keyword">if</span> removed_node:</span><br><span class="line">            removed_node.left = removed_node.right = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> removed_node</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'*'</span>*<span class="number">100</span>)</span><br><span class="line">    bst = BST()</span><br><span class="line"></span><br><span class="line">    bst.insert(<span class="number">6</span>)</span><br><span class="line">    bst.insert(<span class="number">3</span>)</span><br><span class="line">    bst.insert(<span class="number">2</span>)</span><br><span class="line">    bst.insert(<span class="number">4</span>)</span><br><span class="line">    bst.insert(<span class="number">5</span>)</span><br><span class="line">    bst.insert(<span class="number">8</span>)</span><br><span class="line">    bst.insert(<span class="number">10</span>)</span><br><span class="line">    bst.insert(<span class="number">9</span>)</span><br><span class="line">    bst.insert(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    f = <span class="keyword">lambda</span> x: print(x.key, end=<span class="string">'  '</span>)</span><br><span class="line"></span><br><span class="line">    bst.preorder_traverse(bst.get_root(), f)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'searched key : <span class="subst">&#123;bst.search(<span class="number">8</span>).key&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#bst.remove(9)</span></span><br><span class="line">    <span class="comment">#bst.remove(8)</span></span><br><span class="line">    <span class="comment">#bst.remove(6)</span></span><br><span class="line"></span><br><span class="line">    print(bst.remove(<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line">    bst.preorder_traverse(bst.get_root(), f)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">'*'</span>*<span class="number">100</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/07/04/190704-datastructure-binarytree/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MySQL Workbench 사용법_1</title>
      <link>https://chohyeonkeun.github.io/2019/07/03/190703-mysql-workbench/</link>
      <guid>https://chohyeonkeun.github.io/2019/07/03/190703-mysql-workbench/</guid>
      <pubDate>Wed, 03 Jul 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;MySQL-이란&quot;&gt;&lt;a href=&quot;#MySQL-이란&quot; class=&quot;headerlink&quot; title=&quot;MySQL 이란?&quot;&gt;&lt;/a&gt;MySQL 이란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MySQL은 전세계적으로 가장 널리 사용되고 있는 오픈 소스 데이터베이스이다.&lt;/li&gt;
&lt;li&gt;표준 데이터베이스 질의 언어 SQL(Structured Query Language)을 사용하는 개방 소스의 관계형 데이터베이스 &lt;code&gt;관리시스템(RDBMS)&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;매우 빠르고, 유연하며, 사용하기 쉬운 특징이 있다.&lt;/li&gt;
&lt;li&gt;다중사용자, 다중 쓰레드를 지원하고, C, C++, Eiffel, 자바, 펄, PHP, Python 스크립트 등을 위한 응용프로그램 인터페이스(API)를 제공한다.&lt;/li&gt;
&lt;li&gt;유닉스나 리눅스, Windows 운영체제 등에서 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;MySQL 데이터베이스는 일반 사용자가 무료로 다운로드하여 사용할 수 있는 장점이 있다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="MySQL-이란"><a href="#MySQL-이란" class="headerlink" title="MySQL 이란?"></a>MySQL 이란?</h2><ul><li>MySQL은 전세계적으로 가장 널리 사용되고 있는 오픈 소스 데이터베이스이다.</li><li>표준 데이터베이스 질의 언어 SQL(Structured Query Language)을 사용하는 개방 소스의 관계형 데이터베이스 <code>관리시스템(RDBMS)</code>이다.</li><li>매우 빠르고, 유연하며, 사용하기 쉬운 특징이 있다.</li><li>다중사용자, 다중 쓰레드를 지원하고, C, C++, Eiffel, 자바, 펄, PHP, Python 스크립트 등을 위한 응용프로그램 인터페이스(API)를 제공한다.</li><li>유닉스나 리눅스, Windows 운영체제 등에서 사용할 수 있다.</li><li>MySQL 데이터베이스는 일반 사용자가 무료로 다운로드하여 사용할 수 있는 장점이 있다.</li></ul><a id="more"></a><h2 id="RDBMS-무결성"><a href="#RDBMS-무결성" class="headerlink" title="RDBMS 무결성"></a>RDBMS 무결성</h2><ol><li>개체 무결성(Entity Integrity)</li></ol><ul><li>주 식별자(primary key)는 고유한 값이어야 한다.</li><li>주 식별자는 Null을 포함할 수 없다.</li></ul><ol start="2"><li>참조 무결성(Reference Integrity)</li></ol><ul><li>모든 외부식별자(foreign key, 외래 키)값은 연관된 주식별자 값을 참조한다.</li><li>외부 식별자는 Null 값이 허용될 수 있다.</li></ul><ol start="3"><li>범위 무결성(Domain Integrity)</li></ol><ul><li>정의된 범위 안에서 모든 열의 값이 보장되어야 한다.<ul><li>예) integer, varchar, not null 등</li></ul></li></ul><h2 id="MySQL-Workbench-장점-및-단점"><a href="#MySQL-Workbench-장점-및-단점" class="headerlink" title="MySQL Workbench 장점 및 단점"></a>MySQL Workbench 장점 및 단점</h2><h3 id="장점"><a href="#장점" class="headerlink" title="[장점]"></a>[장점]</h3><ul><li>리버스 엔지니어링이 완벽히 지원된다.</li><li>다이어그램이 깔끔하게 그려진다.</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="[단점]"></a>[단점]</h3><ul><li>논리적 모델링을 지원하지 않는다.</li><li>한글 지원이 완벽하지 않다.</li><li>다소 불안정한 동작을 보인다. (잦은 다운 등)</li></ul><h2 id="MySQL-Workbench-사용법"><a href="#MySQL-Workbench-사용법" class="headerlink" title="MySQL Workbench 사용법"></a>MySQL Workbench 사용법</h2><h3 id="1-MySQL-Workbench-다운로드"><a href="#1-MySQL-Workbench-다운로드" class="headerlink" title="1. MySQL Workbench 다운로드"></a>1. MySQL Workbench 다운로드</h3><pre><code>- [MySQL Workbench 다운로드하기](https://dev.mysql.com/downloads/workbench/)    - OS 환경 선택</code></pre><h3 id="2-MySQL-Workbench-실행하여-모델명-설정"><a href="#2-MySQL-Workbench-실행하여-모델명-설정" class="headerlink" title="2. MySQL Workbench 실행하여 모델명 설정"></a>2. MySQL Workbench 실행하여 모델명 설정</h3><pre><code>- 좌측 &apos;File&apos; &gt; &apos;New Model&apos; 클릭- &apos;Physical Schemas&apos; &gt; &apos;mydb&apos; 더블클릭하여 원하는 이름으로 설정</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613050-11abaf00-9e05-11e9-89fd-2f9ea3988a7d.png" alt="Screenshot from 2019-07-04 01-59-58"></p><pre><code>- &apos;EER Diagrams&apos; &gt; &apos;Add Diagram&apos; 더블 클릭</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613059-1708f980-9e05-11e9-8c3d-b5641c0939fa.png" alt="Screenshot from 2019-07-04 02-03-21"></p><h3 id="3-ERD-구현"><a href="#3-ERD-구현" class="headerlink" title="3. ERD 구현"></a>3. ERD 구현</h3><pre><code>ex) 인스타그램과 비슷한 사이트를 만드는 경우- &apos;Place a New Table&apos; 클릭</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613060-1708f980-9e05-11e9-9cd1-42138adb48d9.png" alt="Screenshot from 2019-07-04 02-05-24"></p><pre><code>- &apos;table1&apos; 더블 클릭하여 이름 설정 및 모델 구현</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613061-1708f980-9e05-11e9-8b5b-2a87ef3e31f3.png" alt="Screenshot from 2019-07-04 02-05-30"></p><pre><code>- &apos;users&apos; 모델 구현    - Column에 유저아이디, 비밀번호, 휴대폰번호, 이메일주소 추가</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613062-17a19000-9e05-11e9-9a6f-5aed6af2acdb.png" alt="Screenshot from 2019-07-04 02-11-26"></p><pre><code>- &apos;posts&apos; 모델 구현    - Column에 게시물 내용, 이미지 경로, 태그명, 생성일, 수정일 추가</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613064-17a19000-9e05-11e9-8421-ac2c5cfc6135.png" alt="Screenshot from 2019-07-04 02-16-05"></p><pre><code>- &apos;users&apos;와 &apos;posts&apos; 1:n(일대다) 표시    - 유저 한명이 여러 게시물을 업로드할 수 있어야 하므로 1:n 관계    - 표시할 때, n에 해당하는 객체를 먼저 선택하고, 1에 해당하는 객체를 그 다음에 선택해야 한다.</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613065-183a2680-9e05-11e9-83a2-e23da206d589.png" alt="Screenshot from 2019-07-04 02-16-28"><br><img src="https://user-images.githubusercontent.com/48202867/60613067-183a2680-9e05-11e9-8110-3543678faa56.png" alt="Screenshot from 2019-07-04 02-16-37"></p><pre><code>- &apos;comments&apos; 모델 구현    - Column에 댓글 내용, 대댓글을 위한 parent_comment_id 추가        - 대댓글 기능을 적용하기 위해 대댓글 대상의 댓글 id를 parent_comment_id에 id를 넣으면 된다.</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613069-183a2680-9e05-11e9-978c-a1b6e4bae344.png" alt="Screenshot from 2019-07-04 02-19-32"></p><pre><code>- &apos;users&apos;와 &apos;comments&apos; 1:n 표시    - 유저 한명이 여러 댓글 작성 가능하므로 1:n 관계</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613070-18d2bd00-9e05-11e9-93dd-e6230248ec0b.png" alt="Screenshot from 2019-07-04 02-20-20"></p><pre><code>- &apos;posts&apos;와 &apos;comments&apos; 1:n 표시    - 1개 게시물에 여러 댓글이 작성될 수 있으므로, 1:n 관계</code></pre><p><img src="https://user-images.githubusercontent.com/48202867/60613071-18d2bd00-9e05-11e9-9c29-dc358ec0d2da.png" alt="Screenshot from 2019-07-04 02-20-40"></p><ul><li>여기까지 MySQL의 정의와 MySQL Workbench 다운로드 방법 및 ERD 구현하는 기초 방법에 대해서 알아보았다.</li><li>다음 내용은 “MySQL Workbench 사용법_2”에서 다룰 예정이다. </li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/07/03/190703-mysql-workbench/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Excel 파일 만들기</title>
      <link>https://chohyeonkeun.github.io/2019/06/30/190630-python-excel/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/30/190630-python-excel/</guid>
      <pubDate>Sun, 30 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 python에서 excel 파일에 대한 기본적인 사용 방법을 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 python에서 excel 파일에 대한 기본적인 사용 방법을 알아볼 것이다.</li></ul><a id="more"></a><h2 id="엑셀-관련-모듈"><a href="#엑셀-관련-모듈" class="headerlink" title="엑셀 관련 모듈"></a>엑셀 관련 모듈</h2><ol><li>xlwt</li><li>openpyxl(추천)<ul><li>문서화가 제일 잘 되어 있다.</li><li>로컬에 엑셀 프로그램이 설치되어 있지 않아도 엑셀 파일 생성 및 읽기 가능</li></ul></li><li>xlsxwriter</li><li>pyexcelerate</li></ol><h2 id="openpyxl-설치"><a href="#openpyxl-설치" class="headerlink" title="openpyxl 설치"></a>openpyxl 설치</h2><ul><li>pip install openpyxl</li></ul><h2 id="openpyxl-sheet-사용법"><a href="#openpyxl-sheet-사용법" class="headerlink" title="openpyxl sheet 사용법"></a>openpyxl sheet 사용법</h2><ul><li>파일 열기<ul><li>openpyxl.load_workbook(‘파일명’)</li><li>ex. wb = openpyxl.load_workbook(‘test.xlsx’)</li></ul></li><li>파일 닫기<ul><li>ex. wb.close()</li></ul></li><li>sheet 열기<ul><li>ex. wb[‘sheet1’]</li></ul></li><li>현재 열린 sheet 열기<ul><li>ex. ws = wb.active</li></ul></li><li>cell 접근 방법<ul><li>cell의 index 이용한 방법<ul><li>a1 = ws[‘A1’]</li><li>al.value</li></ul></li><li>cell() 함수 사용<ul><li>파라미터로 row, column 사용</li><li>마지막 값이 존재하는 셀(row) : sheet.max_row</li><li>마지막 값이 존재하는 셀(column): sheet.max_column</li><li>ex. a1 = sheet.cell(row=1, column=1)</li></ul></li></ul></li></ul><h2 id="openpyxl-예제"><a href="#openpyxl-예제" class="headerlink" title="openpyxl 예제"></a>openpyxl 예제</h2><ul><li><p>ex) score.xlsx</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A  B  C  D  E</span><br><span class="line">1 80 90 85 합계</span><br><span class="line">2 88 95 80 합계</span><br><span class="line">3 90 85 90 합계</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 엑셀파일 열기</span></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">'score.xlsx'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 현재 Active Sheet 얻기</span></span><br><span class="line">ws = wb.active</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 국영수 점수 읽기</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> ws.rows:</span><br><span class="line">    row_index = r[<span class="number">0</span>].row   <span class="comment"># 행 인덱스</span></span><br><span class="line">    kor = r[<span class="number">1</span>].value</span><br><span class="line">    eng = r[<span class="number">2</span>].value</span><br><span class="line">    math = r[<span class="number">3</span>].value</span><br><span class="line">    sum = kor + eng + math</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 합계 쓰기</span></span><br><span class="line">    ws.cell(row=row_index, column=<span class="number">5</span>).value = sum</span><br><span class="line"> </span><br><span class="line">    print(kor, eng, math, sum)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 엑셀 파일 저장</span></span><br><span class="line">wb.save(<span class="string">"score2.xlsx"</span>)</span><br><span class="line">wb.close()</span><br></pre></td></tr></table></figure></li><li><p>score2.xlsx</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A  B  C  D  E</span><br><span class="line">1 80 90 85 255</span><br><span class="line">2 88 95 80 263</span><br><span class="line">3 90 85 90 265</span><br></pre></td></tr></table></figure></li></ul><h2 id="셀의-범위에-접근"><a href="#셀의-범위에-접근" class="headerlink" title="셀의 범위에 접근"></a>셀의 범위에 접근</h2><ul><li><p>score.xlsx</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    A      B</span><br><span class="line">1 과목    점수</span><br><span class="line">2 국어    80</span><br><span class="line">3 영어    90</span><br><span class="line">4 수학    95</span><br></pre></td></tr></table></figure><p>  단 하나의 셀이 아니라 여러 셀에 접근하는 방법</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">multiple_celss = sheet[<span class="string">'A1'</span>:<span class="string">'B3'</span>]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> multiple_cells:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">    <span class="keyword">print</span> cell.value</span><br></pre></td></tr></table></figure><p>  출력되는 결과</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">과목</span><br><span class="line">점수</span><br><span class="line">국어</span><br><span class="line">80</span><br><span class="line">영어</span><br><span class="line">90</span><br></pre></td></tr></table></figure></li></ul><h2 id="모든-행과-열에-접근"><a href="#모든-행과-열에-접근" class="headerlink" title="모든 행과 열에 접근"></a>모든 행과 열에 접근</h2><ul><li><p>모든 행에 접근하기 위한 방법</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_rows = sheet.rows</span><br><span class="line"><span class="keyword">print</span> all_rows[:]</span><br></pre></td></tr></table></figure><p>  출력되는 결과</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((&lt;Cell Sheet1.A1&gt;, &lt;Cell Sheet1.B1&gt;), (&lt;Cell Sheet1.A2&gt;, &lt;Cell Sheet1.B2&gt;), (&lt;Cell Sheet1.A3&gt;, &lt;Cell Sheet1.B3&gt;), (&lt;Cell Sheet1.A4&gt;, &lt;Cell Sheet1.B4&gt;))</span><br></pre></td></tr></table></figure></li><li><p>모든 열에 접근하기 위한 방법</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_columns = sheet.columns</span><br><span class="line"><span class="keyword">print</span> all_columns[:]</span><br></pre></td></tr></table></figure><p>  출력되는 결과</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((&lt;Cell Sheet1.A1&gt;, &lt;Cell Sheet1.A2&gt;, &lt;Cell Sheet1.A3&gt;, &lt;Cell Sheet1.A4&gt;, (&lt;Cell Sheet1.B1&gt;, &lt;Cell Sheet1.B2&gt;, &lt;Cell Sheet1.B3&gt;, &lt;Cell Sheet1.B4&gt;))</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/30/190630-python-excel/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Text 파일 만들기</title>
      <link>https://chohyeonkeun.github.io/2019/06/29/190629-python-text/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/29/190629-python-text/</guid>
      <pubDate>Sat, 29 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 python에서 텍스트 파일에 대한 기본적인 사용 방법을 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 python에서 텍스트 파일에 대한 기본적인 사용 방법을 알아볼 것이다.</li></ul><a id="more"></a><h2 id="텍스트-파일-다루기-기본"><a href="#텍스트-파일-다루기-기본" class="headerlink" title="텍스트 파일 다루기 기본"></a>텍스트 파일 다루기 기본</h2><ul><li>파이썬에서 파일을 다룰 때는 기본 내장함수 open() 함수를 활용한다.<ul><li>open(file, mode=’r’, buffering=-1, encoding=None, errors=None, newline=None, closfd=True, opener=None)</li><li>file : 파일 경로</li><li>mode : 파일이 열리는 모드<ul><li>‘r’: 읽기 용으로 열림(기본값)</li><li>‘w’: 쓰기 위해 열기, 파일을 먼저 자른다.</li><li>‘x’: 베타적 생성을 위해 열리고, 이미 존재하는 경우 실패</li><li>‘a’: 쓰기를 위해 열려 있고, 파일의 끝에 추가하는 경우 추가한다.</li><li>‘b’: 2진 모드(바이너리 모드)</li><li>‘t’: 텍스트 모드(기본값)</li><li>‘+’: 업데이트(읽기 및 쓰기)를 위한 디스크 파일 열기</li><li>‘U’: 유니버설 개행 모드(사용되지 않음)</li></ul></li><li>buffering: 버퍼링끄기는 0(바이너리모드에서만 동작), 라인모드는 1(텍스트모드에서만 가능), 고정 크기로 보내려면 임의의 바이트수를 1보다 큰 양의 수로 입력</li><li>encoding: 파일을 디코딩하거나 인코딩하기 위해 사용되는 이름. 대부분 utf-8이지만 모든 시스템이 utf-8이라는 보장이 없으므로 명시적으로 하는 것이 좋다.</li><li>파일 객체는 반드시 열고 작업이 완료되면 반드시 파일을 닫아야 한다.</li><li>파일을 닫지 않으면 버퍼링되어 있는 데이터는 기록되지 않고 소실될 수 있습니다.</li><li>파일 객체의 close() 메소드로 파일을 닫는다.</li></ul></li></ul><h2 id="파일-쓰기"><a href="#파일-쓰기" class="headerlink" title="파일 쓰기"></a>파일 쓰기</h2><ul><li>파일을 작성하기 위해서는 새로운 파일을 open해야 한다.<ul><li>open함수는 파이썬의 내장함수이며, ‘파일 이름’과 ‘파일 열기 모드’를 인자 값으로 받은 후 실행된다.</li><li>open(‘파일 이름’, ‘파일 열기 모드’, optional)</li><li>파일을 쓰기모드로 열 시 해당 파일이 이미 존재할 경우 기존에 작성된 내용이 모두 사라지고 새로 작성된다.</li></ul></li><li>mode를 작성할 때 r(읽기), w(쓰기), a(추가하기) 세가지 중 하나와 t(텍스트), b(바이너리) 둘중 하나와 반드시 결합해야 하며, 나머지는 optional하게 사용 가능하다.</li><li><p>help 메소드로 file 객체의 여러 사용할 수 있는 메소드를 볼 수 있다.</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">help(f)</span><br></pre></td></tr></table></figure></li><li><p>생성된 파일에 data를 작성하려면 아래와 같이 코드를 작성한다.</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'text.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">f.write(<span class="string">'파이썬으로 텍스트 파일을 작성하는 방법에 대해 알아보았습니다.'</span>)</span><br><span class="line">f.write(<span class="string">'다음 포스트에는 excel 파일에 대해 다뤄볼 것입니다.\n'</span>)</span><br><span class="line">f.write(<span class="string">'이해가 잘 되었나요?'</span>)</span><br><span class="line"><span class="comment"># write의 반환은 바이트수가 아닌 문자열 수이다.</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 작성이 끝나면 반드시 close() 메소드를 호출해야 한다.</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="파일-읽기"><a href="#파일-읽기" class="headerlink" title="파일 읽기"></a>파일 읽기</h2><ul><li>파일 읽을 때 mode는 ‘rt’이다.</li><li>read(글자수)로 파일을 읽는다.</li><li>파일을 읽고나서 내부 포인터는 마지막으로 읽은 텍스트 위치로 이동된다.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = open(<span class="string">'test.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.read(<span class="number">17</span>)</span><br><span class="line"><span class="string">'파이썬으로 텍스트 파일을 작성하'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.read(<span class="number">17</span>)</span><br><span class="line"><span class="string">'는 방법에 대해 알아보았습니다.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 다 읽은 후에는 빈 문자 반환</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.read(<span class="number">10</span>)</span><br><span class="line"><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 다시 포인터를 맨 앞으로 가져가려면 seek(포인터위치) 메소드 사용</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.seek(<span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 파일 내용 전체를 리턴받으려면 read 메소드를 인수 없이 사용</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.read()</span><br><span class="line"><span class="string">'파이썬으로 텍스트 파일을 작성하는 방법에 대해 알아보았습니다.다음 포스트에는 excel파일에 대해 다뤄볼 것입니다.\n이해가 잘 되었나요?'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.seek(<span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># readline()메소드로 line 별로 읽어온다.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.readline()</span><br><span class="line"><span class="string">'파이썬으로 텍스트 파일을 작성하는 방법에 대해 알아보았습니다.다음 포스트에는 excel파일에 대해 다뤄볼 것입니다.\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.readline()</span><br><span class="line"><span class="string">'이해가 잘 되었나요?'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.readline()</span><br><span class="line"><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># readlines()메소드는 파일의 라인별로 리스트 형태로 리턴한다.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.seek(<span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.readlines()</span><br><span class="line">[<span class="string">'파이썬으로 텍스트 파일을 작성하는 방법에 대해 알아보았습니다.다음 포스트에는 excel파일에 대해 다뤄볼 것입니다.\n'</span>, <span class="string">'이해가 잘되었나요?'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="파일-추가"><a href="#파일-추가" class="headerlink" title="파일 추가"></a>파일 추가</h2><ul><li><p>mode는 mode=’at’이다.</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = open(<span class="string">'test.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">a.writelines([<span class="string">'이번엔 파일을 추가해보았습니다.'</span>, <span class="string">'writelines를 이용하여 추가하였습니다.'</span>])</span><br></pre></td></tr></table></figure></li><li><p>결과</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">파이썬으로 텍스트 파일을 작성하는 방법에 대해 알아보았습니다.다음 포스트에는 excel파일에 대해 다뤄볼 것입니다.</span><br><span class="line">이해가 잘되었나요?이번엔 파일을 추가해보았습니다.writelines를 이용하여 추가하였습니다.</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/29/190629-python-text/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CSV 파일 만들기</title>
      <link>https://chohyeonkeun.github.io/2019/06/28/190628-python-csv/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/28/190628-python-csv/</guid>
      <pubDate>Fri, 28 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;CSV란-Comma-separated-Values&quot;&gt;&lt;a href=&quot;#CSV란-Comma-separated-Values&quot; class=&quot;headerlink&quot; title=&quot;CSV란? (Comma-separated-Values)&quot;&gt;&lt;/a&gt;CSV란? (Comma-separated-Values)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;몇 가지 필드를 쉼표(,)로 구분한 텍스트 데이터 및 텍스트 파일이다.&lt;/li&gt;
&lt;li&gt;확장자는 .csv이며 MIME 형식은 text/csv이다.&lt;/li&gt;
&lt;li&gt;비슷한 포맷으로는 탭으로 구분하는 ‘tab-separated values’(TSV)나, 반각 스페이스로 구분하는 ‘space-separated values’(SSV) 등이 있으며, 이것들을 합쳐서 character-separated values(CSV), delimiter-separated values라고 부르는 경우가 많다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="CSV란-Comma-separated-Values"><a href="#CSV란-Comma-separated-Values" class="headerlink" title="CSV란? (Comma-separated-Values)"></a>CSV란? (Comma-separated-Values)</h2><ul><li>몇 가지 필드를 쉼표(,)로 구분한 텍스트 데이터 및 텍스트 파일이다.</li><li>확장자는 .csv이며 MIME 형식은 text/csv이다.</li><li>비슷한 포맷으로는 탭으로 구분하는 ‘tab-separated values’(TSV)나, 반각 스페이스로 구분하는 ‘space-separated values’(SSV) 등이 있으며, 이것들을 합쳐서 character-separated values(CSV), delimiter-separated values라고 부르는 경우가 많다.</li></ul><a id="more"></a><h2 id="CSV-파일-사용하는-이유"><a href="#CSV-파일-사용하는-이유" class="headerlink" title="CSV 파일 사용하는 이유?"></a>CSV 파일 사용하는 이유?</h2><ul><li>파일 크기가 작으므로, 표 형식의 데이터를 Plain Text로 쉽게 생성 가능</li><li>대부분의 프로그래밍 언어나, ㅣ데이터분석 프로그램에서 CSV 파일 지원</li><li>파이썬 내장 라이브러리만으로 읽기/쓰기 가능</li></ul><h2 id="CSV-파일-mode-작성-방법"><a href="#CSV-파일-mode-작성-방법" class="headerlink" title="CSV 파일 mode 작성 방법"></a>CSV 파일 mode 작성 방법</h2><ul><li>mode 작성할 때, r(읽기), w(쓰기), a(추가하기) 세가지 중 하나와, t(텍스트), b(바이너리) 둘중 하나와 반드시 결합해야 하며, 나머지는 optional하게 사용 가능하다.</li><li>mode : 파일이 열리는 모드<ul><li>‘r’: 읽기 용으로 열림(기본값)</li><li>‘w’: 쓰기 위해 열기, 파일을 먼저 자른다.</li><li>‘x’: 베타적 생성을 위해 열리고, 이미 존재하는 경우 실패</li><li>‘a’: 쓰기를 위해 열려 있고, 파일의 끝에 추가하는 경우 추가한다.</li><li>‘b’: 2진 모드(바이너리 모드)</li><li>‘t’: 텍스트 모드(기본값)</li><li>‘+’: 업데이트(읽기 및 쓰기)를 위한 디스크 파일 열기</li><li>‘U’: 유니버설 개행 모드(사용되지 않음)</li></ul></li></ul><p><br></p><h2 id="CSV-파일-쓰기"><a href="#CSV-파일-쓰기" class="headerlink" title="CSV 파일 쓰기"></a>CSV 파일 쓰기</h2><ul><li>CSV 파일 쓰기 위해서는 .csv 파일을 쓰기모드로 오픈하고 파일객체를 csv.writer(파일객체)에 넣으면 된다.</li><li>CSV writer는 writerow()라는 메서드를 통해 list 데이터를 한 라인 추가하게 된다.</li><li>윈도우에서는 csv 모듈에서 데이터 작성 시, 각 라인 뒤에 빈 라인이 추가되는 문제가 있는데, 이를 없애기 위해 (파이썬 3에서) 파일 open 시, newline=”” 설정한다.</li></ul><h3 id="방법-1"><a href="#방법-1" class="headerlink" title="방법 1"></a>방법 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'output.csv'</span>, <span class="string">'wt'</span>, encoding=<span class="string">'utf-8, newline="")</span></span><br><span class="line"><span class="string">writer = csv.writer(f)</span></span><br><span class="line"><span class="string">writer.writerow([1, "김철수", False])</span></span><br><span class="line"><span class="string">writer.writerow([2, "조현근", True])</span></span><br><span class="line"><span class="string">f.close()</span></span><br></pre></td></tr></table></figure><h3 id="방법-2"><a href="#방법-2" class="headerlink" title="방법 2"></a>방법 2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">rows = [</span><br><span class="line">    [<span class="string">'프로그래밍'</span>, <span class="string">'데이터 사이언스'</span>, <span class="string">'블록체인'</span>],</span><br><span class="line">    [<span class="string">'프론트엔드'</span>, <span class="string">'인공지능'</span>, <span class="string">'비트코인'</span>],</span><br><span class="line">    [<span class="string">'백엔드'</span>, <span class="string">'빅데이터'</span>, <span class="string">'보안'</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'technology.csv'</span>, <span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerows(rows)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'technology.csv'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 구분자도 변경 가능하다.</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'technology.csv'</span>, <span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f, delimiter=<span class="string">'|'</span>)</span><br><span class="line">    writer.writerows(rows)</span><br></pre></td></tr></table></figure><h3 id="방법-3"><a href="#방법-3" class="headerlink" title="방법 3"></a>방법 3</h3><p>각 Row 데이터가 list/tuple인 경우<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">writer = csv.writer(파일객체)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 Row 쓸 때</span></span><br><span class="line">writer.writerow([<span class="string">'컬럼1'</span>, <span class="string">'컬럼2'</span>, <span class="string">'컬럼3'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 다수 Row 쓸 때</span></span><br><span class="line">wirte.writerows([<span class="string">'1행1열'</span>, <span class="string">'1행2열'</span>, <span class="string">'1행3열'</span>]</span><br><span class="line">[<span class="string">'2행1열'</span>, <span class="string">'2행2열'</span>, <span class="string">'2행3열'</span>])</span><br></pre></td></tr></table></figure></p><h3 id="방법-4"><a href="#방법-4" class="headerlink" title="방법 4"></a>방법 4</h3><p>각 Row 데이터가 dict인 경우<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">fieldnames = [<span class="string">'first_name'</span>, <span class="string">'last_name'</span>]</span><br><span class="line">writer = csv.DictWriter(파일객체, fieldnames=fieldnames)</span><br><span class="line"></span><br><span class="line">writer.writeheader()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 Row 쓸 때</span></span><br><span class="line">writer.writerow(&#123;<span class="string">'first_name'</span>: <span class="string">'Baked'</span>, <span class="string">'last_name'</span>: <span class="string">'Beans'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 다수 Row 쓸 때</span></span><br><span class="line">writer.writerow([&#123;<span class="string">'first_name'</span>:<span class="string">'HyeonKen'</span>, <span class="string">'last_name'</span>:<span class="string">'Cho'</span>&#125;,</span><br><span class="line">&#123;<span class="string">'first_name'</span>:<span class="string">'Nus'</span>, <span class="string">'last_name'</span>:<span class="string">'Jo'</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p><br></p><h2 id="CSV-파일-읽기"><a href="#CSV-파일-읽기" class="headerlink" title="CSV 파일 읽기"></a>CSV 파일 읽기</h2><p>CSV 파일을 읽기 위해서는 먼저 파이썬에 내장되어 있는 csv 모듈을 import 한다.</p><h3 id="방법-1-1"><a href="#방법-1-1" class="headerlink" title="방법 1"></a>방법 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'technology.csv'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">reader = csv.reader(f)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> reader:</span><br><span class="line">    print(line)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="방법-2-1"><a href="#방법-2-1" class="headerlink" title="방법 2"></a>방법 2</h3><p>list로 받는 경우<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'technology.csv'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row) <span class="comment"># list type</span></span><br></pre></td></tr></table></figure></p><h3 id="방법-3-1"><a href="#방법-3-1" class="headerlink" title="방법 3"></a>방법 3</h3><p>dict로 받는 경우<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'technology.csv'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    fieldnames = <span class="literal">None</span> <span class="comment"># 디폴트, None이면 첫번째 Row가 fieldnames로 지정</span></span><br><span class="line">    reader = csv.DictReader(f, fieldnames=fieldnames)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row) <span class="comment"># dict type</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/28/190628-python-csv/#disqus_thread</comments>
    </item>
    
    <item>
      <title>업로드된 게시물 연도별로 분류하기</title>
      <link>https://chohyeonkeun.github.io/2019/06/27/190627-django-classification-by-year/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/27/190627-django-classification-by-year/</guid>
      <pubDate>Thu, 27 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 팀 프로젝트에서 본인이 구현했던 기능 중, 업로드한 게시물을 연도별로 분류했던 방법에 대해 정리해보려고 한다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 팀 프로젝트에서 본인이 구현했던 기능 중, 업로드한 게시물을 연도별로 분류했던 방법에 대해 정리해보려고 한다.</li></ul><a id="more"></a><blockquote><p>ex) extore_project</p></blockquote><h3 id="1-뷰-작성"><a href="#1-뷰-작성" class="headerlink" title="1. 뷰 작성"></a>1. 뷰 작성</h3><ul><li><p>경로 : post &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">last_memory</span><span class="params">(request)</span>:</span></span><br><span class="line">    posts = Post.objects.all()</span><br><span class="line"></span><br><span class="line">    posts_year_li = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">        posts_year_li.append(post.created.strftime(<span class="string">"%Y"</span>))</span><br><span class="line"></span><br><span class="line">    posts_year_dict = reduce(<span class="keyword">lambda</span> dict, ch: dict.update(&#123;ch:dict.get(ch,<span class="number">0</span>)+<span class="number">1</span>&#125;) <span class="keyword">or</span> dict, posts_year_li, &#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'post/last_memory.html'</span>, &#123;<span class="string">'object_dict'</span>:posts_year_dict, <span class="string">'object_list'</span>:posts&#125;)</span><br></pre></td></tr></table></figure></li><li><p>코드 설명</p><ul><li>posts_year_li 라는 빈 리스트를 생성하여 업로드한 게시물 객체의 연도를 순차적으로 추가하였다.<ul><li>업로드한 게시물 객체의 연도만 표시 : post.created.strftime(“%Y”)</li></ul></li><li>게시물의 연도만 추가한 posts_year_li 리스트에서 reduce 함수를 이용해 연도별 개수를 dictionary 형태로 각각 key 와 value로 변환해주었다.<ul><li>딕셔너리 형태로 연도별 개수를 각각 key와 value로 설정 : posts_year_dict = reduce(lambda dict, ch: dict.update({ch:dict.get(ch,0)+1}) or dict, posts_year_li, {})</li></ul></li><li>posts와 posts_year_dict를 context_data로 render 진행</li></ul></li></ul><h3 id="2-연도별-게시물을-보여줄-html-작성"><a href="#2-연도별-게시물을-보여줄-html-작성" class="headerlink" title="2. 연도별 게시물을 보여줄 html 작성"></a>2. 연도별 게시물을 보여줄 html 작성</h3><ul><li>경로 : post &gt; templates &gt; post &gt; last_memory.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'post-base.html' %&#125;</span><br><span class="line">&#123;% block extra_script %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 특정 연도별 게시물이 있는 위치로 이동하는 함수 작성 --&gt;</span>  </span></span><br><span class="line"><span class="undefined">    function year_move(year)&#123;</span></span><br><span class="line"><span class="undefined">    var offset = $(".year-" + year).offset();</span></span><br><span class="line"><span class="undefined">    $("html,body").animate(&#123;scrollTop : offset.top&#125;, 400);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"screen"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block; width:1200px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"show-year"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"show-year-inner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom:5px; position:relative; left:-13px; color:rgb(130,130,130);"</span>&gt;</span>year<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% if object_dict %&#125;</span><br><span class="line">            <span class="comment">&lt;!-- 연도별 업로드한 게시물(posts) 개수 표시 --&gt;</span></span><br><span class="line">            &#123;% for keys, values in object_dict.items %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"show-year"</span> <span class="attr">style</span>=<span class="string">"height:60px; line-height:60px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"year-line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"year-circle year-circle-&#123;&#123;keys&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--업로드한 게시물 개수가 1개일 경우--&gt;</span></span><br><span class="line">                    &#123;% ifequal values 1 %&#125;</span><br><span class="line">                        <span class="comment">&lt;!-- 상기 작성한 year_move(year)함수를 이용하여 클릭한 연도의 게시물 위치로 이동하도록 코드 작성 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"year-move year-move-&#123;&#123;keys&#125;&#125;"</span> <span class="attr">onclick</span>=<span class="string">"year_move('&#123;&#123;keys&#125;&#125;');"</span>&gt;</span>&#123;&#123;keys&#125;&#125;&amp;ensp;<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;values&#125;&#125; post<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--업로드한 게시물 개수가 2개 이상일 경우--&gt;</span></span><br><span class="line">                    &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"year-move year-move-&#123;&#123;keys&#125;&#125;"</span> <span class="attr">onclick</span>=<span class="string">"year_move('&#123;&#123;keys&#125;&#125;')"</span>&gt;</span>&#123;&#123;keys&#125;&#125;&amp;ensp;<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;values&#125;&#125; posts<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        &#123;% endifequal %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="comment">&lt;!--포스트 없는 경우의 div 추가--&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 전체 포스트 목록 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"show-posts"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 연도별 포스트 --&gt;</span></span><br><span class="line">    &#123;% for keys, values in object_dict.items %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"show-post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"year-&#123;&#123;keys&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"font-size:30px; text-align:center;"</span>&gt;</span>&#123;&#123;keys&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block; text-algin:left;"</span>&gt;</span></span><br><span class="line">        &#123;% for object in object_list %&#125;</span><br><span class="line">            <span class="comment">&lt;!-- 커스텀 템플릿 태그를 이용(post &gt; templatetags &gt; calc.py) --&gt;</span></span><br><span class="line">            &#123;% load calc %&#125;</span><br><span class="line">            <span class="comment">&lt;!-- 연도별 업로드한 게시물을 분류하는 비교연산자 --&gt;</span></span><br><span class="line">            &#123;% ifequal object.created|return_year keys %&#125;</span><br><span class="line">                <span class="comment">&lt;!--연도별 post 목록--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span> <span class="attr">onclick</span>=<span class="string">"location.href='&#123;% url 'post:detail' object.id %&#125;';"</span> <span class="attr">style</span>=<span class="string">"margin: 10px; width: 13rem; float:left; text-align:left;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"show-post-image"</span> <span class="attr">style</span>=<span class="string">"background-image:url(&#123;&#123;object.image.url&#125;&#125;);"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:12px 20px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span>&#123;&#123;object.text|truncatechars:9&#125;&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:rgb(130,130,130); font-size:13px; float:right;"</span>&gt;</span>상세보기<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group list-group-flush"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin:0; display:inline-block; font-size:15px;"</span>&gt;</span>&#123;&#123;object.author.last_name&#125;&#125;&#123;&#123;object.author.first_name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin:0; float:right; font-size:15px;"</span>&gt;</span>&#123;&#123;object.created|date:"n/j D"&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            &#123;% endifequal %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-URL-설정"><a href="#3-URL-설정" class="headerlink" title="3. URL 설정"></a>3. URL 설정</h3><ul><li>경로 : post &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views.py <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'last_memory/'</span>, last_memory, name=<span class="string">'last_memory'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/27/190627-django-classification-by-year/#disqus_thread</comments>
    </item>
    
    <item>
      <title>django-fullcalendar 라이브러리 적용</title>
      <link>https://chohyeonkeun.github.io/2019/06/26/190626-django-fullcalendar/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/26/190626-django-fullcalendar/</guid>
      <pubDate>Wed, 26 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 django에서 fullcalendar 라이브러리를 적용하는 방법에 대해 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 django에서 fullcalendar 라이브러리를 적용하는 방법에 대해 알아볼 것이다.</li></ul><a id="more"></a><blockquote><p>ex) extore_project</p></blockquote><h3 id="1-fullcalendar-설치"><a href="#1-fullcalendar-설치" class="headerlink" title="1. fullcalendar 설치"></a>1. fullcalendar 설치</h3><ul><li>경로 : extore_project 파일 위치   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -e git+https://github.com/rodrigoamaral/django-fullcalendar.git<span class="comment">#egg=django-fullcalendar</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-INSTALLED-APPS에-fullcalendar-모듈-추가"><a href="#2-INSTALLED-APPS에-fullcalendar-모듈-추가" class="headerlink" title="2. INSTALLED_APPS에 fullcalendar 모듈 추가"></a>2. INSTALLED_APPS에 fullcalendar 모듈 추가</h3><ul><li>경로 : config(프로젝트) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'fullcalendar'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-fullcalendar-파일-작성"><a href="#3-fullcalendar-파일-작성" class="headerlink" title="3. fullcalendar 파일 작성"></a>3. fullcalendar 파일 작성</h3><ul><li>경로 : schedule &gt; fullcalendar.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">FULLCALENDAR_DEFAULTS = &#123;</span><br><span class="line">    <span class="string">'css_url'</span>: <span class="string">'//cdnjs.cloudflare.com/ajax/libs/fullcalendar/1.6.4/fullcalendar.css'</span>,</span><br><span class="line">    <span class="string">'print_css_url'</span>: <span class="string">'//cdnjs.cloudflare.com/ajax/libs/fullcalendar/1.6.4/fullcalendar.print.css'</span>,</span><br><span class="line">    <span class="string">'javascript_url'</span>: <span class="string">'//cdnjs.cloudflare.com/ajax/libs/fullcalendar/1.6.4/fullcalendar.min.js'</span>,</span><br><span class="line">    <span class="string">'jquery_url'</span>: <span class="string">'//code.jquery.com/jquery-3.4.1.min.js'</span>,</span><br><span class="line">    <span class="string">'jquery_ui_url'</span>: <span class="string">'//code.jquery.com/ui/1.10.4/jquery-ui.js'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FULLCALENDAR = FULLCALENDAR_DEFAULTS.copy()</span><br><span class="line">FULLCALENDAR.update(getattr(settings, <span class="string">'FULLCALENDAR'</span>, &#123;&#125;))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">css_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> FULLCALENDAR[<span class="string">'css_url'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_css_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> FULLCALENDAR[<span class="string">'print_css_url'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">javascript_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> FULLCALENDAR[<span class="string">'javascript_url'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jquery_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> FULLCALENDAR[<span class="string">'jquery_url'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jquery_ui_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> FULLCALENDAR[<span class="string">'jquery_ui_url'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-fullcalendar-템플릿-태그-작성"><a href="#4-fullcalendar-템플릿-태그-작성" class="headerlink" title="4. fullcalendar 템플릿 태그 작성"></a>4. fullcalendar 템플릿 태그 작성</h3><ul><li>경로 : schedule &gt; templatetags &gt; fullcalendar_tags.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> ..fullcalendar <span class="keyword">import</span> css_url, print_css_url, javascript_url, jquery_url, jquery_ui_url</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_css_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> css_url()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_print_css_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> print_css_url()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_javascript_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> javascript_url()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_jquery_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jquery_url()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_jquery_ui_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jquery_ui_url()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_css</span><span class="params">()</span>:</span></span><br><span class="line">    url = fullcalendar_css_url()</span><br><span class="line">    <span class="keyword">return</span> mark_safe(<span class="string">"&lt;link href='%s' rel='stylesheet'&gt;"</span> % url)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_print_css</span><span class="params">()</span>:</span></span><br><span class="line">    url = fullcalendar_print_css_url()</span><br><span class="line">    <span class="keyword">return</span> mark_safe(<span class="string">"&lt;link href='%s' rel='stylesheet' media='print'&gt;"</span> % url)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_jquery</span><span class="params">()</span>:</span></span><br><span class="line">    url = fullcalendar_jquery_url()</span><br><span class="line">    <span class="keyword">return</span> mark_safe(<span class="string">"&lt;script src='%s'&gt;&lt;/script&gt;"</span> % url)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_jquery_ui</span><span class="params">()</span>:</span></span><br><span class="line">    url = fullcalendar_jquery_ui_url()</span><br><span class="line">    <span class="keyword">return</span> mark_safe(<span class="string">"&lt;script src='%s'&gt;&lt;/script&gt;"</span> % url)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullcalendar_javascript</span><span class="params">()</span>:</span></span><br><span class="line">    url = fullcalendar_javascript_url()</span><br><span class="line">    <span class="keyword">return</span> mark_safe(<span class="string">"&lt;script src='%s'&gt;&lt;/script&gt;"</span> % url)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-fullcalendar를-표시할-html-파일-작성"><a href="#5-fullcalendar를-표시할-html-파일-작성" class="headerlink" title="5. fullcalendar를 표시할 html 파일 작성"></a>5. fullcalendar를 표시할 html 파일 작성</h3><ul><li><p>경로 : config &gt; layout &gt; schedule-base.html</p><ul><li>이곳에 fullcalendar_tags 탬플릿 태그 적용<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">        &#123;% load fullcalendar_tags %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% fullcalendar_css %&#125;</span><br><span class="line">        &#123;% fullcalendar_print_css %&#125;</span><br><span class="line">        &#123;% fullcalendar_jquery %&#125;</span><br><span class="line">        &#123;% fullcalendar_jquery_ui %&#125;</span><br><span class="line">        &#123;% fullcalendar_javascript %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% calendar_init calendar_config_options %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% block extra_style %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 주의 : 이 곳에 jquery script를 작성하면, fullcalendar가 작동되지 않는다. --&gt;</span> </span><br><span class="line">        &#123;% block extra_script %&#125;</span><br><span class="line">        &#123;%  endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>경로 : schedule(앱) &gt; templates &gt; schedule &gt; index.html</p><ul><li>fullcalendar가 보여질 html 코드 작성<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "schedule-base.html" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% load fullcalendar_tags %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:800px; line-height:800px; width:800px; margin:0 auto;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:800px; display:inline-block; vertical-align:middle; line-height:normal;"</span>&gt;</span></span><br><span class="line">            &#123;% calendar %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-util-py-작성"><a href="#6-util-py-작성" class="headerlink" title="6. util.py 작성"></a>6. util.py 작성</h3><ul><li>경로 : schedule &gt; util.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date_handler</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Handles JSON serialization for datetime values</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> obj.isoformat() <span class="keyword">if</span> hasattr(obj, <span class="string">'isoformat'</span>) <span class="keyword">else</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_field_names</span><span class="params">(event_list)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Converts atribute names from Python code convention to the</span></span><br><span class="line"><span class="string">    attribute names used by FullCalendar</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> event_list:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> event.keys():</span><br><span class="line">            event[snake_to_camel_case(key)] = event.pop(key)</span><br><span class="line">    <span class="keyword">return</span> event_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snake_to_camel_case</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Converts strings from 'snake_case' (Python code convention)</span></span><br><span class="line"><span class="string">    to CamelCase</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    new_string = s</span><br><span class="line"></span><br><span class="line">    leading_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> new_string.find(<span class="string">'_'</span>) == <span class="number">0</span>:</span><br><span class="line">        new_string = new_string[<span class="number">1</span>:]</span><br><span class="line">        leading_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    trailing_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> new_string.rfind(<span class="string">'_'</span>) == len(new_string) - <span class="number">1</span>:</span><br><span class="line">        new_string = new_string[:<span class="number">-1</span>]</span><br><span class="line">        trailing_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    new_string = <span class="string">''</span>.join([word.title() <span class="keyword">for</span> word <span class="keyword">in</span> new_string.split(<span class="string">'_'</span>)])</span><br><span class="line">    leading_underscores = <span class="string">'_'</span> * leading_count</span><br><span class="line">    trailing_underscores = <span class="string">'_'</span> * trailing_count</span><br><span class="line">    <span class="keyword">return</span> leading_underscores + new_string[<span class="number">0</span>].lower() + new_string[<span class="number">1</span>:] + trailing_underscores</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">events_to_json</span><span class="params">(events_queryset)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Dumps a CalendarEvent queryset to the JSON expected by FullCalendar</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    events_values = list(events_queryset.values(<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'start'</span>, <span class="string">'end'</span>, <span class="string">'all_day'</span>))</span><br><span class="line">    events_values = convert_field_names(events_values)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(events_values, default=date_handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calendar_options</span><span class="params">(event_url, options)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Builds the Fullcalendar options array</span></span><br><span class="line"><span class="string">    This function receives two strings. event_url is the url that returns a JSON array containing</span></span><br><span class="line"><span class="string">    the calendar events. options is a JSON string with all the other options.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    event_url_option = <span class="string">'events: "%s"'</span> % (event_url,)</span><br><span class="line">    s = options.strip()</span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="string">'&#123;'</span> <span class="keyword">in</span> s:</span><br><span class="line">        pos = s.index(<span class="string">'&#123;'</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;%s&#125;'</span> % (event_url_option)</span><br><span class="line">    <span class="keyword">return</span> s[:pos] + event_url_option + <span class="string">', '</span> + s[pos:]</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-fullcalendar-모델-작성"><a href="#7-fullcalendar-모델-작성" class="headerlink" title="7. fullcalendar 모델 작성"></a>7. fullcalendar 모델 작성</h3><ul><li>경로 : schedule &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalendarEvent</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    author = models.ForeignKey(get_user_model(), on_delete=models.SET_NULL, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, related_name=<span class="string">"schedules"</span>)</span><br><span class="line">    title = models.CharField(_(<span class="string">'Title'</span>), max_length=<span class="number">200</span>)</span><br><span class="line">    start = models.DateTimeField(_(<span class="string">'Start'</span>))</span><br><span class="line">    end = models.DateTimeField(_(<span class="string">'End'</span>))</span><br><span class="line">    all_day = models.BooleanField(_(<span class="string">'All day'</span>), default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># models.DateTimeField(input_formats=["%d %b %Y %H:%M:%S %Z"])</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = _(<span class="string">'Event'</span>)</span><br><span class="line">        verbose_name_plural = _(<span class="string">'Events'</span>)</span><br><span class="line"></span><br><span class="line">        ordering = [<span class="string">'-start'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 관리자 사이트에 표시될 객체 이름 설정 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-fullcalendar-뷰-작성"><a href="#8-fullcalendar-뷰-작성" class="headerlink" title="8. fullcalendar 뷰 작성"></a>8. fullcalendar 뷰 작성</h3><ul><li>경로 : schedlue &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> CalendarEvent</span><br><span class="line"><span class="keyword">from</span> .util <span class="keyword">import</span> events_to_json, calendar_options</span><br><span class="line"></span><br><span class="line">OPTIONS = <span class="string">"""&#123;  timeFormat: "H:mm",</span></span><br><span class="line"><span class="string">                header: &#123;</span></span><br><span class="line"><span class="string">                    left: 'prev,next today',</span></span><br><span class="line"><span class="string">                    center: 'title',</span></span><br><span class="line"><span class="string">                    right: 'month,agendaWeek,agendaDay',</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                allDaySlot: false,</span></span><br><span class="line"><span class="string">                firstDay: 0,</span></span><br><span class="line"><span class="string">                weekMode: 'liquid',</span></span><br><span class="line"><span class="string">                slotMinutes: 15,</span></span><br><span class="line"><span class="string">                defaultEventMinutes: 30,</span></span><br><span class="line"><span class="string">                minTime: 8,</span></span><br><span class="line"><span class="string">                maxTime: 20,</span></span><br><span class="line"><span class="string">                editable: false,</span></span><br><span class="line"><span class="string">                dayClick: function(date, allDay, jsEvent, view) &#123;</span></span><br><span class="line"><span class="string">                    if (allDay) &#123;       </span></span><br><span class="line"><span class="string">                        $('#calendar').fullCalendar('gotoDate', date)      </span></span><br><span class="line"><span class="string">                        $('#calendar').fullCalendar('changeView', 'agendaDay')</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                eventClick: function(event, jsEvent, view) &#123;</span></span><br><span class="line"><span class="string">                    if (view.name == 'month') &#123;     </span></span><br><span class="line"><span class="string">                        $('#calendar').fullCalendar('gotoDate', event.start)      </span></span><br><span class="line"><span class="string">                        $('#calendar').fullCalendar('changeView', 'agendaDay')</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">            &#125;"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    event_url = <span class="string">'all_events/'</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'schedule/index.html'</span>, &#123;<span class="string">'calendar_config_options'</span>: calendar_options(event_url, OPTIONS)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_events</span><span class="params">(request)</span>:</span></span><br><span class="line">events = CalendarEvent.objects.all()</span><br><span class="line"><span class="keyword">return</span> HttpResponse(events_to_json(events), content_type=<span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-URL-설정"><a href="#9-URL-설정" class="headerlink" title="9. URL 설정"></a>9. URL 설정</h3><ul><li>경로 : schedule &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'schedule'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, index, name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'all_events/'</span>, all_events, name=<span class="string">'all_events'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/26/190626-django-fullcalendar/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Datetime 학습</title>
      <link>https://chohyeonkeun.github.io/2019/06/25/190625-django-datetime-timedelta/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/25/190625-django-datetime-timedelta/</guid>
      <pubDate>Tue, 25 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 특정 게시물이 업로드된 시점부터 현재까지 시간이 얼마나 흘렀는지 확인하는 방법에 대해 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 특정 게시물이 업로드된 시점부터 현재까지 시간이 얼마나 흘렀는지 확인하는 방법에 대해 알아볼 것이다.</li></ul><a id="more"></a><h3 id="1-앱의-하위-폴더로-templatetags-생성하여-원하는-기능을-구현할-함수-작성"><a href="#1-앱의-하위-폴더로-templatetags-생성하여-원하는-기능을-구현할-함수-작성" class="headerlink" title="1. 앱의 하위 폴더로 templatetags 생성하여 원하는 기능을 구현할 함수 작성"></a>1. 앱의 하위 폴더로 templatetags 생성하여 원하는 기능을 구현할 함수 작성</h3><blockquote><p>ex) extore_project</p></blockquote><ul><li><p>경로 : post[앱] &gt; templatetags &gt; calc.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, timedelta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_since</span><span class="params">(value)</span>:</span></span><br><span class="line">    time_since = datetime.now() - value</span><br><span class="line">    <span class="comment"># 현재시간과의 차이가 1개월 이상일 경우</span></span><br><span class="line">    <span class="keyword">if</span> time_since &gt; timedelta(days=<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">return</span> value.strftime(<span class="string">"%Y.%m.%d"</span>)</span><br><span class="line">    <span class="comment"># 현재시간과의 차이가 24시간 이상일 경우</span></span><br><span class="line">    <span class="keyword">if</span> time_since &gt; timedelta(days=<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;time_since // timedelta(days=<span class="number">1</span>)&#125;</span>일 전'</span></span><br><span class="line">    <span class="comment"># 현재시간과의 차이가 24시간 이하 1시간 이상일 경우</span></span><br><span class="line">    <span class="keyword">elif</span> time_since &gt; timedelta(hours=<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;time_since // timedelta(hours=<span class="number">1</span>)&#125;</span>시간 전'</span></span><br><span class="line">    <span class="comment"># 현재시간과의 차이가 1시간 이하 1분 이상일 경우</span></span><br><span class="line">    <span class="keyword">elif</span> time_since &gt; timedelta(minutes=<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;time_since // timedelta(minutes=<span class="number">1</span>)&#125;</span>분 전'</span></span><br><span class="line">    <span class="comment"># 현재시간과의 차이가 1분 이하 1초 이상일 경우</span></span><br><span class="line">    <span class="keyword">elif</span> time_since &gt; timedelta(seconds=<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;time_since // timedelta(seconds=<span class="number">1</span>)&#125;</span>초 전'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'지금'</span></span><br></pre></td></tr></table></figure></li><li><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><ul><li>특정 html 파일에서 구현하고자 하는 기능(현재 시간 - 업로드한 게시물의 생성 시간)을 template tags를 이용하여 구현하였다.</li><li>특정 게시물의 업로드한 시간을 value로 가정했을 때,</li><li>현재시간 - 게시물 업로드한 시간은 time_since = datetime.now() - value 로 한다.</li><li>time_since(현재시간 - 게시물 업로드한 시간)를 원하는 단위의 시간으로 나누어 표현하고 싶은 결과를 확인할 수 있다.</li><li>원하는 단위의 시간을 표현하기 위한 방법으로 timedelta를 사용할 수 있다.</li><li>time_since // timedelta(days=1)을 사용하여 며칠 전에 업로드한 게시물인지 확인할 수 있다.</li><li>time_since가 30일 이상이라면, strftime()를 이용하여 보여주고 싶은 날짜 표시 <ul><li>value.strftime(%Y.%m.%d) –&gt; ex) 2019.06.25</li></ul></li></ul></li></ul><h3 id="2-html-파일에서-작성한-함수-호출"><a href="#2-html-파일에서-작성한-함수-호출" class="headerlink" title="2. html 파일에서 작성한 함수 호출"></a>2. html 파일에서 작성한 함수 호출</h3><ul><li><p>post(앱) &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    posts = Post.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'post/post_list.html'</span>, &#123;<span class="string">'object_list'</span>:posts&#125;)</span><br></pre></td></tr></table></figure></li><li><p>post(앱) &gt; templates &gt; post &gt; post_list.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   ...</span><br><span class="line">   &#123;% for object in object_list %&#125;</span><br><span class="line">       ...</span><br><span class="line">       &#123;% load calc %&#125;</span><br><span class="line">       &#123;&#123;object.created|time_since&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- ex) 1일 전/ 1시간 전/ 1분 전/ 1초 전/ 2019.06.25  --&gt;</span></span><br><span class="line">       ...</span><br><span class="line">   &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="코드-설명-1"><a href="#코드-설명-1" class="headerlink" title="코드 설명"></a>코드 설명</h3><ul><li>views.py에서 Post 객체들을 posts 변수로 설정한 뒤, post를 context data로 object_list로 설정</li><li>render함수를 사용하여 templates 폴더의 post/post_list.html 페이지로 이동</li><li>해당 html 페이지에서 커스텀 템플릿 태그인 time_since를 사용하기 위해 ‘load calc’ 를 추가하고, 원하는 값으로 표현하고 싶은 변수에서 ‘|time_since’ 추가</li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/25/190625-django-datetime-timedelta/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Location Field 적용</title>
      <link>https://chohyeonkeun.github.io/2019/06/24/190624-django-location-field/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/24/190624-django-location-field/</guid>
      <pubDate>Mon, 24 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 django에서 location field를 추가하는 방법에 대해 알아볼 것이다.&lt;/li&gt;
&lt;li&gt;여기에서는 google map api를 연동하여 location field를 구현할 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 django에서 location field를 추가하는 방법에 대해 알아볼 것이다.</li><li>여기에서는 google map api를 연동하여 location field를 구현할 것이다.</li></ul><a id="more"></a><hr><h2 id="Django-Location-Field-구현"><a href="#Django-Location-Field-구현" class="headerlink" title="Django Location Field 구현"></a>Django Location Field 구현</h2><blockquote><p>ex) extore_project</p></blockquote><h3 id="1-django-location-field-모듈-설치"><a href="#1-django-location-field-모듈-설치" class="headerlink" title="1. django-location-field 모듈 설치"></a>1. django-location-field 모듈 설치</h3><ul><li>pip install django-location-field</li></ul><h3 id="2-설정-파일-작성"><a href="#2-설정-파일-작성" class="headerlink" title="2. 설정 파일 작성"></a>2. 설정 파일 작성</h3><ul><li>경로 : config &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'location_field.apps.DefaultConfig'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line">LOCATION_FIELD_PATH = settings.STATIC_URL + <span class="string">'location_field'</span></span><br><span class="line"></span><br><span class="line">LOCATION_FIELD = &#123;</span><br><span class="line">    <span class="string">'map.provider'</span>: <span class="string">'google'</span>,</span><br><span class="line">    <span class="string">'map.zoom'</span>: <span class="number">13</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'search.provider'</span>: <span class="string">'google'</span>,</span><br><span class="line">    <span class="string">'search.suffix'</span>: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Google</span></span><br><span class="line">    <span class="string">'provider.google.api'</span>: <span class="string">'//maps.google.com/maps/api/js?sensor=false'</span>,</span><br><span class="line">    <span class="string">'provider.google.api_key'</span>: <span class="string">'발급받은 구글 맵 api key 입력'</span>,</span><br><span class="line">    <span class="string">'provider.google.api_libraries'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'provider.google.map.type'</span>: <span class="string">'ROADMAP'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># misc</span></span><br><span class="line">    <span class="string">'resources.root_path'</span>: LOCATION_FIELD_PATH,</span><br><span class="line">    <span class="string">'resources.media'</span>: &#123;</span><br><span class="line">        <span class="string">'js'</span>: (</span><br><span class="line">            LOCATION_FIELD_PATH + <span class="string">'/js/jquery.livequery.js'</span>,</span><br><span class="line">            LOCATION_FIELD_PATH + <span class="string">'/js/form.js'</span>,</span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-모델-작성"><a href="#3-모델-작성" class="headerlink" title="3. 모델 작성"></a>3. 모델 작성</h3><ul><li>경로 : post &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> location_field.models.plain <span class="keyword">import</span> PlainLocationField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    city = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    location = PlainLocationField(based_fields=[<span class="string">'city'</span>], zoom=<span class="number">7</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-템플릿에서-지도-render"><a href="#4-템플릿에서-지도-render" class="headerlink" title="4. 템플릿에서 지도 render"></a>4. 템플릿에서 지도 render</h3><ul><li>경로 : post &gt; templates &gt; post &gt; ***.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        &#123;&#123;form.media&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;&#123;form&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/24/190624-django-location-field/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux Crontab 사용법</title>
      <link>https://chohyeonkeun.github.io/2019/06/23/190623-linux-crontab/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/23/190623-linux-crontab/</guid>
      <pubDate>Sun, 23 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 리눅스 크론탭에 대해 알아볼 것이다.&lt;/li&gt;
&lt;li&gt;윈도우에서는 스케줄러와 비슷하다고 생각하면 된다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 리눅스 크론탭에 대해 알아볼 것이다.</li><li>윈도우에서는 스케줄러와 비슷하다고 생각하면 된다.</li></ul><a id="more"></a><h2 id="crontab-기본명령어"><a href="#crontab-기본명령어" class="headerlink" title="crontab 기본명령어"></a>crontab 기본명령어</h2><hr><ul><li>명령어 위치 : /usr/bin/crontab</li><li>ps -ef|grep crond<ul><li>crond 실행되고 있는지 확인</li></ul></li><li>crontab -e<ul><li>크론탭 에디터 실행</li><li>여기에서 크론탭 설정, 수정</li><li>편집하려면 root 권한 필요(root권한 없다면, sudo crontab -e)</li></ul></li><li>crontab -l<ul><li>등록되어 있는 crontab 목록 출력</li></ul></li><li>crontab -r<ul><li>등록한 crontab 모두 삭제</li></ul></li><li>crontab -v<ul><li>수정한 크론탭 파일 내용 조회(일부 시스템에서만 사용 가능)</li></ul></li><li>사용자가 등록한 crontab은 [리눅스 : /var/spool/cron/사용자명]에 저장됨</li></ul><h2 id="등록형식"><a href="#등록형식" class="headerlink" title="등록형식"></a>등록형식</h2><hr><h3 id="왼쪽부터-분-시-일-월-요일"><a href="#왼쪽부터-분-시-일-월-요일" class="headerlink" title="* * * * * (왼쪽부터 분, 시, 일, 월, 요일)"></a><code>* * * * *</code> (왼쪽부터 분, 시, 일, 월, 요일)</h3><ul><li>1번째 * : 분 (0 - 59)</li><li>2번째 * : 시 (0 - 23)</li><li>3번째 * : 일 (1 - 31)</li><li>4번째 * : 월 (1 - 12)</li><li>5번째 * : 요일 (0 - 6) (0:일요일, 1:월요일, 2:화요일, …, 6:토요일)</li></ul><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><hr><h3 id="1-home-script-test-sh"><a href="#1-home-script-test-sh" class="headerlink" title="1) * * * * * /home/script/test.sh"></a>1) <code>* * * * *</code> /home/script/test.sh</h3><ul><li>매 1분마다 /root/test.sh를 수행(하루에 1440회)</li></ul><h3 id="2-15-45-home-script-test-sh"><a href="#2-15-45-home-script-test-sh" class="headerlink" title="2) 15, 45 * * * * /home/script/test.sh"></a>2) 15, 45 <code>* * * *</code> /home/script/test.sh</h3><ul><li>매시 15분, 45분에 /home/script/test.sh를 수행(하루에 48회)</li></ul><h3 id="3-10-home-script-test-sh"><a href="#3-10-home-script-test-sh" class="headerlink" title="3) */10 * * * * /home/script/test.sh"></a>3) <code>*</code>/10 <code>* * * *</code> /home/script/test.sh</h3><ul><li>10분마다 /home/script/test.sh를 수행(하루에 144회)</li></ul><h3 id="4-0-2-home-script-test-sh"><a href="#4-0-2-home-script-test-sh" class="headerlink" title="4) 0 2 * * * /home/script/test.sh"></a>4) 0 2 <code>* * *</code> /home/script/test.sh</h3><ul><li>매일 02:00에 /home/script/test.sh를 수행 (하루에 1회)</li></ul><h3 id="5-30-6-home-script-test-sh"><a href="#5-30-6-home-script-test-sh" class="headerlink" title="5) 30 */6 * * * /home/script/test.sh"></a>5) 30 <code>*</code>/6 <code>* * *</code> /home/script/test.sh</h3><ul><li>매 6시간마다 30분에 수행(00:30, 06:30, 12:30, 18:30)</li></ul><h3 id="6-30-1-23-6-home-script-test-sh"><a href="#6-30-1-23-6-home-script-test-sh" class="headerlink" title="6) 30 1-23/6 * * * /home/script/test.sh"></a>6) 30 1-23/6 <code>* * *</code> /home/script/test.sh</h3><ul><li>1시부터 매 6시간마다 30분에 수행(01:30, 07:30, 13:30, 19:30)</li></ul><h3 id="7-0-8-1-5-home-script-test-sh"><a href="#7-0-8-1-5-home-script-test-sh" class="headerlink" title="7) 0 8 * * 1-5 /home/script/test.sh"></a>7) 0 8 <code>* *</code> 1-5 /home/script/test.sh</h3><ul><li>평일(월요일~금요일) 08:00에 수행</li></ul><h3 id="8-0-8-0-6-home-script-test-sh"><a href="#8-0-8-0-6-home-script-test-sh" class="headerlink" title="8) 0 8 * * 0,6 /home/script/test.sh"></a>8) 0 8 <code>* *</code> 0,6 /home/script/test.sh</h3><ul><li>주말(일요일, 토요일) 08:00에 수행</li></ul><h2 id="크론탭-백업"><a href="#크론탭-백업" class="headerlink" title="크론탭 백업"></a>크론탭 백업</h2><hr><ul><li>주기적으로 크론탭 백업 필요<ul><li>crontab -l &gt; /home/bak/crontab_bak.txt</li><li>크론탭 내용을 txt 파일로 만들어 저장해둔다.</li></ul></li><li>매일 오후 10시 30분에 크론탭 백업 <ul><li>30 22 <em> </em> * crontab -l &gt; /home/bak/crontab_bak.txt</li></ul></li></ul><h2 id="작업에-대한-로그-남기는-방법"><a href="#작업에-대한-로그-남기는-방법" class="headerlink" title="작업에 대한 로그 남기는 방법"></a>작업에 대한 로그 남기는 방법</h2><hr><ul><li>cron job들은 자동 수행되므로, 별도 작업 로그를 남기지 않으면 해당 작업의 정상 수행 여부 확인이 어렵다.</li><li>cron job 수행 여부 자체는 시스템 로그에 남기 때문에(ubuntu의 경우 /var/log/syslog 파일에서 확인) 볼 수 있으나,</li><li>실제 해당 job이 실행되면서 job에 발생시키는 로그는 추가 기록이 필요하다.</li><li>cron job 등록 시, 아래 명령어 사용하면 로그 파일 남길 수 있다.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * * * /some/job &gt; ~/log/job_`date +\%Y\%m\%d\%H\%M\%S`.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure></li></ul><h3 id="로그파일의-파일-이름에-실행된-날짜-시간-넣는-방법"><a href="#로그파일의-파일-이름에-실행된-날짜-시간-넣는-방법" class="headerlink" title="로그파일의 파일 이름에 실행된 날짜/시간 넣는 방법"></a>로그파일의 파일 이름에 실행된 날짜/시간 넣는 방법</h3><ul><li>data 명령어 이용 시 지정한 포메터대로 현재 시간 출력 가능</li><li>쉘 스크립트에서 문자를 이용하여 <code>명령어</code>를 감싸면 해당 명령어의 stdout 을 return해주는데 이를 이용하여 파일이름을 정해줄 수 있다.</li><li>로그 파일명을 다음과 같이 지정한 경우 job_<code>date+\%Y\%m\%d\%H\%M\%S</code>.log 실제 파일명은 job_20190623201123.log와 같이 시간값으로 치환되어 결정된다.</li></ul><h3 id="some-job-의-출력-stdout-을-로그-파일로-리디렉션"><a href="#some-job-의-출력-stdout-을-로그-파일로-리디렉션" class="headerlink" title="/some/job 의 출력(stdout)을 로그 파일로 리디렉션"></a>/some/job 의 출력(stdout)을 로그 파일로 리디렉션</h3><ul><li>리디렉션 기호인 &gt; 를 이용하여 stdout을 파일로 기록하려면 다음과 같이 하면 된다.</li><li><p>해당 로그 파일에 overwrite를 하고 싶다면,</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/some/job &gt; ~/log/job_`date+\%Y\%m\%d\%H\%M\%S`.log</span><br></pre></td></tr></table></figure></li><li><p>해당 로그파일의 기존 내용을 보존하면서 append를 하고 싶다면,</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/some/job &gt;&gt; ~/log/job_`date+\%Y\%m\%d\%H\%M\%S`.log</span><br></pre></td></tr></table></figure></li></ul><h3 id="dev-null-의-의미"><a href="#dev-null-의-의미" class="headerlink" title="/dev/null 의 의미"></a>/dev/null 의 의미</h3><ul><li>위에서 알아본 것과 반대로 작업 로그가 필요 없다고 생각되는 경우는 /dev/null로 redirect를 해주면 된다.</li><li>/dev/null로 들어오는 입력은 모두 버려진다.</li></ul><h3 id="마지막-2-gt-amp-1-의-의미"><a href="#마지막-2-gt-amp-1-의-의미" class="headerlink" title="마지막 2&gt;&amp;1 의 의미"></a>마지막 2&gt;&amp;1 의 의미</h3><ul><li>1 : stdout</li><li>2 : stderr</li><li><code>&gt;</code> : redirection</li><li>2&gt;&amp;1 : stderr를 stdout으로 리디렉션해서 stdout과 동일하게 처리</li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/23/190623-linux-crontab/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cookie와 Session 학습</title>
      <link>https://chohyeonkeun.github.io/2019/06/22/190622-cooke-session/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/22/190622-cooke-session/</guid>
      <pubDate>Sat, 22 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;쿠키-Cookie&quot;&gt;&lt;a href=&quot;#쿠키-Cookie&quot; class=&quot;headerlink&quot; title=&quot;쿠키(Cookie)&quot;&gt;&lt;/a&gt;쿠키(Cookie)&lt;/h2&gt;&lt;h3 id=&quot;쿠키-특징&quot;&gt;&lt;a href=&quot;#쿠키-특징&quot; class=&quot;headerlink&quot; title=&quot;쿠키 특징&quot;&gt;&lt;/a&gt;쿠키 특징&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;클라이언트 로컬(하드)에 저장되는 키와 값이 들어있는 작은 데이터 파일&lt;/li&gt;
&lt;li&gt;클라이언트 상태 정보를 로컬에 저장했다가 참조&lt;/li&gt;
&lt;li&gt;중요하지 않은 데이터를 저장할 때 주로 사용&lt;/li&gt;
&lt;li&gt;이름, 값, 만료날짜(쿠키 저장시간), 경로 정보 포함&lt;/li&gt;
&lt;li&gt;일정시간동안 데이터 저장 가능(로그인 상태 유지에 활용)&lt;/li&gt;
&lt;li&gt;하나의 쿠키 당 4KB 이하 저장 가능&lt;/li&gt;
&lt;li&gt;한 도메인 당 20개 저장 가능(총 300개)&lt;ul&gt;
&lt;li&gt;하나의 도메인에서 설정한 쿠키값이 20개를 초과하면 가장 적게 사용된 쿠키부터 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="쿠키-Cookie"><a href="#쿠키-Cookie" class="headerlink" title="쿠키(Cookie)"></a>쿠키(Cookie)</h2><h3 id="쿠키-특징"><a href="#쿠키-특징" class="headerlink" title="쿠키 특징"></a>쿠키 특징</h3><ul><li>클라이언트 로컬(하드)에 저장되는 키와 값이 들어있는 작은 데이터 파일</li><li>클라이언트 상태 정보를 로컬에 저장했다가 참조</li><li>중요하지 않은 데이터를 저장할 때 주로 사용</li><li>이름, 값, 만료날짜(쿠키 저장시간), 경로 정보 포함</li><li>일정시간동안 데이터 저장 가능(로그인 상태 유지에 활용)</li><li>하나의 쿠키 당 4KB 이하 저장 가능</li><li>한 도메인 당 20개 저장 가능(총 300개)<ul><li>하나의 도메인에서 설정한 쿠키값이 20개를 초과하면 가장 적게 사용된 쿠키부터 삭제</li></ul></li></ul><a id="more"></a><h3 id="쿠키-동작-방식"><a href="#쿠키-동작-방식" class="headerlink" title="쿠키 동작 방식"></a>쿠키 동작 방식</h3><ol><li>클라이언트가 페이지 요청</li><li>서버에서 쿠키 생성</li><li>HTTP 헤더에 쿠키 포함시켜 응답</li><li>브라우저 종료되어도 쿠키 만료시간 있다면 클라이언트가 보관하고 있음</li><li>클라이언트가 같은 요청을 할 경우 HTTP 헤더에 쿠키를 함께 서버에 전송</li><li>서버에서 쿠키를 읽어 이전 상태 정보를 변경 할 필요가 있을 때 쿠키 업데이트하여 변경된 쿠키를 HTTP 헤더에 포함시켜 응답</li></ol><h3 id="쿠키-사용-예"><a href="#쿠키-사용-예" class="headerlink" title="쿠키 사용 예"></a>쿠키 사용 예</h3><ul><li>이벤트 팝업 창(오늘 다시 보지 않음)</li><li>쇼핑몰 장바구니 기능</li></ul><h2 id="세션-Session"><a href="#세션-Session" class="headerlink" title="세션(Session)"></a>세션(Session)</h2><h3 id="세션-특징"><a href="#세션-특징" class="headerlink" title="세션 특징"></a>세션 특징</h3><ul><li>세션은 쿠키를 기반하고 있지만, 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 세션은 서버 측에서 관리</li><li>일정 시간동안 같은 브라우저로부터 들어오는 일련의 요구를 하나의 상태로 보고 그 상태를 유지하는 기술</li><li>웹 브라우저를 통해 웹 서버 접속하여 브라우저를 종료할 때 까지 유지되는 상태</li><li>클라이언트가 request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 세션ID 부여</li><li>중요한 데이터를 저장할 때 주로 사용</li><li>사용자에 대한 정보를 서버에 두어 쿠키에 비해 보완에 강하나, 사용자가 많아질수록 많은 서버 메모리 차지</li><li>동접자 수가 많은 웹 사이트의 경우 서버에 과부하를 주게 되어 성능 저하 우려</li><li>클라이언트가 접속하면 서버에 의해 생성되므로 개수나 용량에 제한 없음</li></ul><h3 id="세션-동작-방식"><a href="#세션-동작-방식" class="headerlink" title="세션 동작 방식"></a>세션 동작 방식</h3><ol><li>클라이언트가 서버 접속 시, 세션 ID 발급</li><li>클라이언트는 세션 ID에 대해 쿠키 사용하여 Header에 저장</li><li>클라이언트가 서버에 다시 접속 시 이 쿠키를 이용하여 세션 ID 값을 서버에 전달</li><li>세션 ID가 없다면, 서버는 세션 ID 생성하여 클라이언트에게 전송</li></ol><h3 id="세션-사용-예"><a href="#세션-사용-예" class="headerlink" title="세션 사용 예"></a>세션 사용 예</h3><ul><li>화면이 이동해도 로그인이 해제되지 않고 로그아웃 하기 전까지 유지되고 있는 것</li></ul><h2 id="3-쿠키와-세션의-차이"><a href="#3-쿠키와-세션의-차이" class="headerlink" title="3. 쿠키와 세션의 차이"></a>3. 쿠키와 세션의 차이</h2><ul><li>가장 큰 차이점은 사용자의 기록 정보가 저장되는 위치</li><li>보안 면에서 세션이 우수<ul><li>쿠키는 클라이언트 로컬에 저장되므로 변질되거나 request에서 스나이핑 당할 가능성 높음</li><li>세션은 쿠키를 이용하여 sessionid만 저장하고, 서버에서 처리하므로 비교적 보안성 높음</li></ul></li><li>요청 속도 면에서 쿠키가 우수<ul><li>쿠키는 서버의 자원을 전혀 사용하지 않으나, 세션은 서버의 자원 사용 </li></ul></li><li>참고) 캐시는 이미지나 css, js파일 등이 사용자의 브라우저에 저장이 되는 것<ul><li>그 후 다시 같은 사이트 접속 시, css, js, 이미지 파일을 서버가 아닌 사용자의 PC에서 가져옴</li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/22/190622-cooke-session/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker와 Elastic Beanstalk 이용하여 배포하기</title>
      <link>https://chohyeonkeun.github.io/2019/06/21/190621-django-docker-elastic-beanstalk/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/21/190621-django-docker-elastic-beanstalk/</guid>
      <pubDate>Fri, 21 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Docker-란&quot;&gt;&lt;a href=&quot;#Docker-란&quot; class=&quot;headerlink&quot; title=&quot;Docker 란?&quot;&gt;&lt;/a&gt;Docker 란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;도커는 가상 컴퓨팅 환경 - VirtualBox, Parallelss Desktop 같은 가상 컴퓨팅 환경과 비슷한 컨테이너 서비스이다.&lt;/li&gt;
&lt;li&gt;실제 가상 컴퓨팅 환경은 호스트 운영체제를 흉내내어 동작하는 방식을 사용하는데, &lt;/li&gt;
&lt;li&gt;도커는 별도의 독립된 환경을 구축하여 운영체제가 동작하는 것처럼 만들어져 있다.&lt;/li&gt;
&lt;li&gt;초기에는 LXC(Linux Container)방식으로 구현되어 리눅스 시스템이 아닌 곳에서는 도커를 사용하지 못했으나,&lt;/li&gt;
&lt;li&gt;현재는 runC라는 방식으로 변경되어 윈도우, 맥, 리눅스 등 다양한 운영체제에서 도커 시스템을 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;도커를 사용하려면 도커 CLI가 설치되어야 한다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Docker-란"><a href="#Docker-란" class="headerlink" title="Docker 란?"></a>Docker 란?</h2><ul><li>도커는 가상 컴퓨팅 환경 - VirtualBox, Parallelss Desktop 같은 가상 컴퓨팅 환경과 비슷한 컨테이너 서비스이다.</li><li>실제 가상 컴퓨팅 환경은 호스트 운영체제를 흉내내어 동작하는 방식을 사용하는데, </li><li>도커는 별도의 독립된 환경을 구축하여 운영체제가 동작하는 것처럼 만들어져 있다.</li><li>초기에는 LXC(Linux Container)방식으로 구현되어 리눅스 시스템이 아닌 곳에서는 도커를 사용하지 못했으나,</li><li>현재는 runC라는 방식으로 변경되어 윈도우, 맥, 리눅스 등 다양한 운영체제에서 도커 시스템을 사용할 수 있다.</li><li>도커를 사용하려면 도커 CLI가 설치되어야 한다.</li></ul><a id="more"></a><hr><h2 id="Docker-이용-방법"><a href="#Docker-이용-방법" class="headerlink" title="Docker 이용 방법"></a>Docker 이용 방법</h2><h3 id="1-도커허브-가입"><a href="#1-도커허브-가입" class="headerlink" title="1. 도커허브 가입"></a>1. 도커허브 가입</h3><ul><li><a href="https://hub.docker.com" target="_blank" rel="noopener">도커허브 링크</a><ul><li>[Sign up for Docker Hub] 버튼 클릭하여 회원가입 진행</li></ul></li></ul><h3 id="2-로그인하여-도커-설치"><a href="#2-로그인하여-도커-설치" class="headerlink" title="2. 로그인하여 도커 설치"></a>2. 로그인하여 도커 설치</h3><ul><li><b>MAC에서 도커 설치</b><ul><li>첫 화면에서 [Get started with Docker Desktop] 버튼 클릭</li><li>다운로드된 파일 실행해 도커 데스크톱 설치</li><li>다운받은 이미지를 실행해 도커를 Applications 폴더로 복사하면 설치 완료</li><li>설치된 도커 프로그램 실행</li><li>계정 정보 이용하여 로그인 진행</li><li>터미널 실행하고 ‘docker’ 명령어 실행 –&gt; 옵션들 나타나면 정상적으로 설치 완료된 것</li></ul></li><li><b>Linux에서 도커 설치</b><ul><li>docker 실행할 디렉토리 생성<ul><li><code>$ mkdir docker_test</code></li></ul></li><li>터미널에서 <code>$ curl -s https://get.docker.com/|sudo sh</code> 실행<ul><li>만약 curl이 없다고 하면, <code>$ sudo apt-get -y install curl</code> 실행</li></ul></li><li>도커를 관리자 계정으로 실행해야 하는 번거로움을 없애기 위해 아래 명령어 실행<ul><li><code>$ sudo usermod -aG docker $USER</code></li></ul></li><li>‘docker’ 명령어 실행하여 옵션 나타나는지 확인</li></ul></li></ul><h3 id="3-도커-사용하여-ubuntu-18-04-가상-컨테이너-사용"><a href="#3-도커-사용하여-ubuntu-18-04-가상-컨테이너-사용" class="headerlink" title="3. 도커 사용하여 ubuntu 18.04 가상 컨테이너 사용"></a>3. 도커 사용하여 ubuntu 18.04 가상 컨테이너 사용</h3><pre><code>- run이라는 명령어를 사용하여 이미지명을 지정하여 새로운 컨테이너 실행 가능- 도커 컨테이너는 프로세서가 실행되고 있는 동안에만 유효- $ docker run ubuntu:18.04    - 권한 없다고 나올 경우, 앞에 &apos;sudo&apos; 입력    - 우분투 이미지 다운로드하고 컨테이너 실행 완료됨- 현재 로컬에 있는 이미지 목록 확인    - $ docker image ls</code></pre><h3 id="4-우분투의-bash-shell-실행"><a href="#4-우분투의-bash-shell-실행" class="headerlink" title="4. 우분투의 bash shell 실행"></a>4. 우분투의 bash shell 실행</h3><pre><code>- $ docker run --rm -it ubuntu:18.04 bin/bash    - --rm : 실행 종료 후 컨테이너 제거    - -it : 쉘 실행할 경우 컨테이너의 표준 입력과 로컬 컴퓨터의 키보드 입력 연결- 이제 원하는 명령을 컨테이너에 전달 가능하며, 여러가지 패키지 설치 가능</code></pre><h3 id="5-컨테이너-생성하여-nginx-설치-및-테스트-진행"><a href="#5-컨테이너-생성하여-nginx-설치-및-테스트-진행" class="headerlink" title="5. 컨테이너 생성하여 nginx 설치 및 테스트 진행"></a>5. 컨테이너 생성하여 nginx 설치 및 테스트 진행</h3><pre><code>- 포트 포워딩 필요 -&gt; run 명령어에 -p 옵션 넣으면 포워딩 포트 지정 가능- $ docker container run --rm -it -p 8080:80 ubuntu:18.04 bin/bash    - -p : 컨테이너 외부와 내부를 연결할 포트- $ apt-get -y update- $ apt-get -y install nginx- $ nginx -v- $ service nginx start</code></pre><h3 id="6-웹-브라우저에서-로컬호스트에-8080-포트-이용하여-접속"><a href="#6-웹-브라우저에서-로컬호스트에-8080-포트-이용하여-접속" class="headerlink" title="6. 웹 브라우저에서 로컬호스트에 8080 포트 이용하여 접속"></a>6. 웹 브라우저에서 로컬호스트에 8080 포트 이용하여 접속</h3><pre><code>- 호스트의 8080 포트는 컨테이너의 80 포트로 포워딩되므로 nginx 환영 메시지 확인 가능</code></pre><h3 id="7-원하는-이미지를-베이스로-추가-프로그램-설치하여-최종-이미지-생성"><a href="#7-원하는-이미지를-베이스로-추가-프로그램-설치하여-최종-이미지-생성" class="headerlink" title="7. 원하는 이미지를 베이스로 추가 프로그램 설치하여 최종 이미지 생성"></a>7. 원하는 이미지를 베이스로 추가 프로그램 설치하여 최종 이미지 생성</h3><pre><code>- FROM은 베이스가 되는 이미지- MAINTAINER는 본인 이메일- RUN은 이미지 생성 시 실행할 명령어- $ vim Dockerfile.base    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">FROM    ubuntu:<span class="number">18.04</span></span><br><span class="line">MAINTAINER    positipman@gmail.com</span><br><span class="line"></span><br><span class="line">RUN    apt-get -y update</span><br><span class="line">RUN    apt-get -y install vim</span><br><span class="line">RUN    apt-get -y install nginx</span><br><span class="line">RUN    apt-get -y install python3-dev python3-venv python3-pip</span><br><span class="line"></span><br><span class="line">CMD    [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]     </span><br><span class="line"></span><br><span class="line">RUN useradd -b /home -m -s /bin/bash django</span><br><span class="line">RUN usermod -a -G www-data django</span><br><span class="line">RUN mkdir -p /var/www/django</span><br><span class="line">RUN mkdir -p /var/www/django/run</span><br><span class="line">RUN mkdir -p /var/www/django/logs</span><br><span class="line">RUN mkdir -p /var/www/django/ini</span><br><span class="line">RUN apt-get -y install python3-venv</span><br><span class="line">RUN python3 -m venv /var/www/django/venv</span><br><span class="line">RUN chown -R django:www-data /var/www/django</span><br><span class="line">RUN chmod -R g+w /var/www/django</span><br><span class="line"></span><br><span class="line">ADD ./code /var/www/django/code</span><br><span class="line"></span><br><span class="line">RUN /var/www/django/venv/bin/pip3 install uwsgi</span><br><span class="line"></span><br><span class="line">ADD ./conf/uwsgi/uwsgi.service /etc/systemd/system/uwsgi.service</span><br><span class="line">ADD ./conf/nginx/default /etc/nginx/sites-available/default</span><br><span class="line">ADD ./conf/uwsgi/uwsgi.ini /var/www/django/ini/uwsgi.ini</span><br><span class="line">ADD ./conf/requirements.txt /var/www/django/requirements.txt</span><br><span class="line">RUN /var/www/django/venv/bin/pip3 install -r /var/www/django/requirements.txt</span><br><span class="line"><span class="comment"># RUN /var/www/django/venv/bin/django-admin startproject config /var/www/django</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="8-이미지-생성하기-전-docker-test-디렉토리에-code-conf-디렉토리-생성"><a href="#8-이미지-생성하기-전-docker-test-디렉토리에-code-conf-디렉토리-생성" class="headerlink" title="8. 이미지 생성하기 전, docker_test 디렉토리에 code, conf 디렉토리 생성"></a>8. 이미지 생성하기 전, docker_test 디렉토리에 code, conf 디렉토리 생성</h3><pre><code>- 이미지 생성하기 위한 code 폴더 생성    - $ mkdir code- 프로젝트 소스코드 붙여넣기- 이미지 생성하기 위한 uwsgi 폴더 생성    - $ mkdir conf    - $ cd conf    - $ mkdir uwsgi    - $ cd uwsgi    - $ vim uwsgi.ini        <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">uid</span> = django</span><br><span class="line"><span class="attr">base</span> = /var/www/django</span><br><span class="line"></span><br><span class="line"><span class="attr">home</span> = %(base)/venv</span><br><span class="line"><span class="attr">chdir</span> = %(base)/code</span><br><span class="line"><span class="attr">module</span> = config.wsgi:application</span><br><span class="line"><span class="attr">env</span> = DJANGO_SETTINGS_MODULE=config.settings</span><br><span class="line"></span><br><span class="line"><span class="attr">master</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">socket</span> =%(base)/run/uwsgi.sock</span><br><span class="line"><span class="attr">logto</span> = %(base)/logs/uwsgi.log</span><br><span class="line"><span class="attr">chown-socket</span> = %(uid):www-data</span><br><span class="line"><span class="attr">chmod-socket</span> = <span class="number">660</span></span><br><span class="line"><span class="attr">vacuum</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>    - $ vim uwsgi.service        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=/var/www/django/venv/bin/uwsgi --emperor /var/www/django/ini</span><br><span class="line">User=django</span><br><span class="line">Group=www-data</span><br><span class="line">Restart=on-failure</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=all</span><br><span class="line">StandardError=syslog</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>- 이미지 생성하기 위한 nginx 폴더 생성    - $ mkdir nginx    - $ cd nginx    - $ vi default        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream django &#123;</span><br><span class="line">server unix:/var/www/django/run/uwsgi.sock;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">charset utf-8;</span><br><span class="line">access_log /var/www/django/logs/access.log;</span><br><span class="line">error_log /var/www/django/logs/error.log;</span><br><span class="line">server_name _;</span><br><span class="line"></span><br><span class="line">location = favicon.ico &#123; access_log off; log_not_found off; &#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">include /etc/nginx/uwsgi_params;</span><br><span class="line">uwsgi_pass django;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="9-Dockerfile-base를-기반으로-새로운-이미지-생성"><a href="#9-Dockerfile-base를-기반으로-새로운-이미지-생성" class="headerlink" title="9. Dockerfile.base를 기반으로 새로운 이미지 생성"></a>9. Dockerfile.base를 기반으로 새로운 이미지 생성</h3><pre><code>- $ cd docker_test- $ docker image build -f Dockerfile.base -t django .- 생성된 이미지를 목록에서 확인    - $ docker image ls</code></pre><h3 id="10-생성된-이미지로-컨테이너-생성하여-장고-서버-셋팅-및-배포"><a href="#10-생성된-이미지로-컨테이너-생성하여-장고-서버-셋팅-및-배포" class="headerlink" title="10. 생성된 이미지로 컨테이너 생성하여 장고 서버 셋팅 및 배포"></a>10. 생성된 이미지로 컨테이너 생성하여 장고 서버 셋팅 및 배포</h3><pre><code>- $ docker container run -it --rm -p 8080:80 django:latest bash    - 기존 패키지 업데이트(이미지로 생성됨)        - $ apt-get update    - Nginx 설치 (이미지로 생성됨)        - $ apt-get install nginx    - Vim 설치(이미지로 생성됨)        - $ apt-get install vim    - 파이썬 관련 패키지 설치(이미지로 생성됨)        - $ apt-get install python3-dev python3-venv python3-pip    - django 애플리케이션 구동용 계정 생성 (이미지로 생성됨)        - $ useradd -b /home -m -s /bin/bash django    - www-data 그룹에 django 유저 추가 (이미지로 생성됨)        - $ usermod -a -G www-data django    - 소스코드 업로드 위한 폴더 생성(이미지로 생성됨)        - $ mkdir -p /var/www/django    - uwsgi 모듈을 위한 폴더 생성(이미지로 생성됨)        - $ mkdir /var/www/django/run        - $ mkdir /var/www/django/logs        - $ mkdir /var/www/django/ini    - uwsgi 설정 파일 생성(이미지로 생성됨)        - $ vim /var/www/django/ini/uwsgi.ini    - 가상 환경을 소스코드 폴더 밑에 생성(이미지로 생성됨)        - $ python3 -m venv /var/www/django/venv    - 소스코드 업로드 전, 폴더 소유자와 사용권한 변경 (이미지로 생성됨)        - $ chown -R django:www-data /var/www/django        - $ chmod -R g+w /var/www/django    - 소스코드 폴더에서 code 폴더 추가 생성 (이미지로 생성됨)        - $ mkdir /var/ww/django/code        - var/www/django에 소스코드 직접 업로드하게 되면, 기존 폴더가 삭제될 수 있다.        - 이를 방지하기 위해, code 폴더 생성하여 소스코드 옮겨놓고 연동시키는 방법이 있다. (django_test 폴더의 code 폴더 내 소스코드와 연동된다. --&gt; uwsgi.ini파일에 chdir %(base)/code 작성한 이유)     - 가상환경에 패키지 설치하기 위해 소스코드 폴더로 이동        - $ cd /var/www/django    - 가상환경 활성화        - $ source venv/bin/activate    - 의존성 패키지 설치 (이미지로 생성됨)        - $ pip install -r requierments.txt    - uwsgi 설치 (이미지로 생성됨)        - $ pip install uwsgi    - uwsgi 모듈로 구동 여부 확인        - $ uwsgi --http :8080 --home /var/www/django/venv/ --chdir /var/www/django/ --module config.wsgi    - uwsgi.servie 파일 작성 (이미지로 생성됨)        - $ vim /etc/systemd/system/uwsgi.service            <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=/var/www/django/venv/bin/uwsgi --emperor /var/www/django/ini</span><br><span class="line">User=django</span><br><span class="line">Group=www-data</span><br><span class="line">Restart=on-failure</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=all</span><br><span class="line">StandardError=syslog</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>    - Nginx의 디폴트 사이트 파일 작성 (이미지로 생성됨)        - $ vim /etc/nginx/sites-available/default    - uwsgi 실행        - $ uwsgi -i /var/www/django/ini/uwsgi.ini &amp;            - 뒤에 &apos;&amp;&apos;를 입력하면 빠져나왔을 경우에도 계속 uwsgi 실행되도록 해준다.    - 실행되고 있는 uwsgi 확인        - $ jobs        - uwsgi 실행 중지            - $ pkill -f uwsgi -9    - Nginx 재시작        - $ service nginx restart    - 웹 브라우저에서 사이트 뜨는지 확인</code></pre><h3 id="11-supervisor-설치-및-설정-파일-복사하는-명령어-입력"><a href="#11-supervisor-설치-및-설정-파일-복사하는-명령어-입력" class="headerlink" title="11. supervisor 설치 및 설정 파일 복사하는 명령어 입력"></a>11. supervisor 설치 및 설정 파일 복사하는 명령어 입력</h3><pre><code>- 웹 서버 배포할 시, nginx와 uwsgi 모두 동작하는 형태로 배포해야 한다.- 도커의 특성상 하나의 프로세스만 동작하는 명령을 실행할 수 있고, 동작하는 프로세스가 없는 경우 컨테이너는 종료된다.- 이런 문제를 해결하기 위해 supervisor라는 모듈을 사용한다.- $ vim Dockerfile.base    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">RUN apt-get -y install supervisor</span><br><span class="line">ADD ./conf/supervisord.conf /etc/supervisor/supervisord.conf</span><br><span class="line"></span><br><span class="line">CMD [&quot;/usr/bin/supervisord&quot;]</span><br></pre></td></tr></table></figure></code></pre><h3 id="12-새로운-내용으로-이미지-생성"><a href="#12-새로운-내용으로-이미지-생성" class="headerlink" title="12. 새로운 내용으로 이미지 생성"></a>12. 새로운 내용으로 이미지 생성</h3><pre><code>-$ docker image build -f Dockerfile.base -t django .</code></pre><h3 id="13-새로운-이미지로-컨테이너-실행하여-웹-브라우저에서-정상-응답이-있는지-확인"><a href="#13-새로운-이미지로-컨테이너-실행하여-웹-브라우저에서-정상-응답이-있는지-확인" class="headerlink" title="13. 새로운 이미지로 컨테이너 실행하여 웹 브라우저에서 정상 응답이 있는지 확인"></a>13. 새로운 이미지로 컨테이너 실행하여 웹 브라우저에서 정상 응답이 있는지 확인</h3><pre><code>- $ docker container run -it --rm -p 8080:80 django:latest</code></pre><h3 id="14-도커-허브에서-기본-이미지를-자신의-repositary에-배포"><a href="#14-도커-허브에서-기본-이미지를-자신의-repositary에-배포" class="headerlink" title="14. 도커 허브에서 기본 이미지를 자신의 repositary에 배포"></a>14. 도커 허브에서 기본 이미지를 자신의 repositary에 배포</h3><pre><code>- 도커 허브로 이동하여 [Repositaries] 버튼 클릭- [Create Repository] 버튼 클릭- 내용 입력- name : django- description : for docker test- Visibility의 경우 [Private] 선택- [Create] 버튼 클릭</code></pre><h3 id="15-터미널에서-명령-입력해-이미지의-repositary와-태그-설정"><a href="#15-터미널에서-명령-입력해-이미지의-repositary와-태그-설정" class="headerlink" title="15. 터미널에서 명령 입력해 이미지의 repositary와 태그 설정"></a>15. 터미널에서 명령 입력해 이미지의 repositary와 태그 설정</h3><pre><code>- $ docker tag django:latest positipman/django:0.1</code></pre><h3 id="16-도커-이미지-업로드"><a href="#16-도커-이미지-업로드" class="headerlink" title="16. 도커 이미지 업로드"></a>16. 도커 이미지 업로드</h3><pre><code>- $ docker push positipman/django:0.1</code></pre><h3 id="17-배포가-완료되면-도커-허브에서-이미지-확인-가능"><a href="#17-배포가-완료되면-도커-허브에서-이미지-확인-가능" class="headerlink" title="17. 배포가 완료되면 도커 허브에서 이미지 확인 가능"></a>17. 배포가 완료되면 도커 허브에서 이미지 확인 가능</h3><h3 id="18-도커-로그인-정보-파일-생성"><a href="#18-도커-로그인-정보-파일-생성" class="headerlink" title="18. 도커 로그인 정보 파일 생성"></a>18. 도커 로그인 정보 파일 생성</h3><pre><code>- $ docker login- ~/.docker/config.json 파일이 생성된 것 확인- 해당 파일을 S3 버킷을 만들어 업로드</code></pre><h3 id="19-eb-init-명령-실행"><a href="#19-eb-init-명령-실행" class="headerlink" title="19. eb init 명령 실행"></a>19. eb init 명령 실행</h3><pre><code>- $ eb init</code></pre><h3 id="20-Dockerrun-aws-json-파일-생성하여-필요-내용-입력"><a href="#20-Dockerrun-aws-json-파일-생성하여-필요-내용-입력" class="headerlink" title="20. Dockerrun.aws.json 파일 생성하여 필요 내용 입력"></a>20. Dockerrun.aws.json 파일 생성하여 필요 내용 입력</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;AWSEBDockerrunVersion&quot;:&quot;1&quot;,</span><br><span class="line">    &quot;Authentication&quot;: &#123;</span><br><span class="line">        &quot;Bucket&quot;: &quot;nginx-docker&quot;,</span><br><span class="line">        &quot;Key&quot;: &quot;config.json&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;image&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;positipman/django&quot;,</span><br><span class="line">        &quot;Update&quot;: &quot;true&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;Ports&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;ContainerPort&quot;: &quot;80&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;Logging&quot;: &quot;/var/log&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/21/190621-django-docker-elastic-beanstalk/#disqus_thread</comments>
    </item>
    
    <item>
      <title>번역 기능 학습</title>
      <link>https://chohyeonkeun.github.io/2019/06/20/190620-django-translation/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/20/190620-django-translation/</guid>
      <pubDate>Thu, 20 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;장고에서 번역 기능을 사용하는 것을 I18N(Internationalization)을 사용한다고 한다. &lt;/li&gt;
&lt;li&gt;이번 포스트에서는 I18N 기능 사용법에 대해 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>장고에서 번역 기능을 사용하는 것을 I18N(Internationalization)을 사용한다고 한다. </li><li>이번 포스트에서는 I18N 기능 사용법에 대해 알아볼 것이다.</li></ul><a id="more"></a><hr><h2 id="장고-프로젝트에-번역-기능-추가"><a href="#장고-프로젝트에-번역-기능-추가" class="headerlink" title="장고 프로젝트에 번역 기능 추가"></a>장고 프로젝트에 번역 기능 추가</h2><blockquote><p>ex) python-api 프로젝트</p></blockquote><h3 id="1-기본-언어-설정"><a href="#1-기본-언어-설정" class="headerlink" title="1. 기본 언어 설정"></a>1. 기본 언어 설정</h3><ul><li>경로 : config(프로젝트) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'ko-KR'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Seoul'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-다국어-지원을-하기-위해-LocaleMiddleware-추가"><a href="#2-다국어-지원을-하기-위해-LocaleMiddleware-추가" class="headerlink" title="2. 다국어 지원을 하기 위해 LocaleMiddleware 추가"></a>2. 다국어 지원을 하기 위해 LocaleMiddleware 추가</h3><ul><li>LocalMiddleware는 세션 데이터를 사용하고, </li><li>CommonMiddleware가 언어를 활성화하는 작업을 수행하므로,</li><li>Session과 Commen 사이에 위치시켜야 한다.</li><li>경로 : config(프로젝트) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.locale.LocaleMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-지원하고-싶은-언어-설정"><a href="#3-지원하고-싶은-언어-설정" class="headerlink" title="3. 지원하고 싶은 언어 설정"></a>3. 지원하고 싶은 언어 설정</h3><ul><li>경로 : config &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy as_</span><br><span class="line"></span><br><span class="line">LANGUAGES = [</span><br><span class="line">    (<span class="string">'ko'</span>, _(<span class="string">'Korean'</span>)),</span><br><span class="line">    (<span class="string">'en'</span>, _(<span class="string">'English'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-번역-파일이-저장될-폴더-생성"><a href="#4-번역-파일이-저장될-폴더-생성" class="headerlink" title="4. 번역 파일이 저장될 폴더 생성"></a>4. 번역 파일이 저장될 폴더 생성</h3><ul><li>경로 : config &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOCALE_PATHS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'locale'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-번역할-텍스트를-입력할-샘플-뷰-작성"><a href="#5-번역할-텍스트를-입력할-샘플-뷰-작성" class="headerlink" title="5. 번역할 텍스트를 입력할 샘플 뷰 작성"></a>5. 번역할 텍스트를 입력할 샘플 뷰 작성</h3><ul><li>경로 : sample &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 한글 메시지를 영어로 번역되도록 설정</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> translation</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    msg = _(<span class="string">"안녕하세요 조누스"</span>)  <span class="comment"># _(message) --&gt; message를 번역하겠다.</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(msg)</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-번역할-텍스트-목록-파일-생성"><a href="#6-번역할-텍스트-목록-파일-생성" class="headerlink" title="6. 번역할 텍스트 목록 파일 생성"></a>6. 번역할 텍스트 목록 파일 생성</h3><ul><li>경로 : python_api &gt; 터미널  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemessages -a</span><br><span class="line"><span class="comment"># 최초 실행 시, 언어별 별도 실행</span></span><br><span class="line"><span class="comment"># -i venv : venv 파일 무시하고 실행</span></span><br><span class="line">$ python manage.py makemessages -l ko -i venv</span><br><span class="line">$ python manage.py makemessages -l en -i venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 gettext가 없다는 오류 발생 시,</span></span><br><span class="line">Mac)</span><br><span class="line">$ brew install gettext</span><br><span class="line">$ brew link gettext --force</span><br><span class="line"></span><br><span class="line">ubuntu)</span><br><span class="line">$ sudo apt-get install gettext</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-locale-디렉토리에-생성된-django-po-파일을-열어서-‘-fuzzy’-줄-제거"><a href="#7-locale-디렉토리에-생성된-django-po-파일을-열어서-‘-fuzzy’-줄-제거" class="headerlink" title="7. locale 디렉토리에 생성된 django.po 파일을 열어서, ‘#, fuzzy’ 줄 제거"></a>7. locale 디렉토리에 생성된 django.po 파일을 열어서, ‘#, fuzzy’ 줄 제거</h3><ul><li>경로 : locale &gt; en 혹은 ko &gt; LC_MESSAGES &gt; django.po</li></ul><h3 id="8-django-po-파일에서-msgid를-참고하여-msgstr-설정"><a href="#8-django-po-파일에서-msgid를-참고하여-msgstr-설정" class="headerlink" title="8. django.po 파일에서 msgid를 참고하여 msgstr 설정"></a>8. django.po 파일에서 msgid를 참고하여 msgstr 설정</h3><ul><li>id를 보고 str에 번역 내용 입력</li><li>경로 : locale &gt; en &gt; LC_MESSAGES &gt; django.po  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#: sample/templates/sample/index.html:11</span><br><span class="line">msgid &quot;안녕하세요 조누스&quot;</span><br><span class="line">msgstr &quot;Hi Jonus&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-번역-내용을-장고에서-읽어-처리할-수-있도록-mo-파일-생성"><a href="#9-번역-내용을-장고에서-읽어-처리할-수-있도록-mo-파일-생성" class="headerlink" title="9. 번역 내용을 장고에서 읽어 처리할 수 있도록 mo 파일 생성"></a>9. 번역 내용을 장고에서 읽어 처리할 수 있도록 mo 파일 생성</h3><ul><li>경로 : python_api &gt; 터미널  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py compilemessages</span><br><span class="line"><span class="comment"># 만약 언어 파일별로 컴파일 하고 싶다면,</span></span><br><span class="line">$ python manage.py compilemessage -l ko</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-번역-파일-정상-작동하는지-확인-위해-강제로-언어설정-변경"><a href="#10-번역-파일-정상-작동하는지-확인-위해-강제로-언어설정-변경" class="headerlink" title="10. 번역 파일 정상 작동하는지 확인 위해 강제로 언어설정 변경"></a>10. 번역 파일 정상 작동하는지 확인 위해 강제로 언어설정 변경</h3><ul><li><p>경로 : sample &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 기존 LANGUAGE_SESSION_KEY 삭제하고, 'en'으로 활성화</span></span><br><span class="line"><span class="keyword">if</span> translation.LANGUAGE_SESSION_KEY <span class="keyword">in</span> request.session:</span><br><span class="line">    <span class="keyword">del</span>(request.session[translation.LANGUAGE_SESSION_KEY])</span><br><span class="line">translation.activate(<span class="string">'en'</span>)</span><br><span class="line"></span><br><span class="line">request.session[translation.LANGUAGE_SESSION_KEY] = <span class="string">'en'</span></span><br></pre></td></tr></table></figure></li><li><p>브라우저로 해당 뷰 접속해 보면 ‘안녕하세요 조누스’ 대신 ‘Hi Jonus’ 표시</p></li></ul><h3 id="11-언어-설정을-사용자가-선택해서-변경할-수-있도록-뷰-생성"><a href="#11-언어-설정을-사용자가-선택해서-변경할-수-있도록-뷰-생성" class="headerlink" title="11. 언어 설정을 사용자가 선택해서 변경할 수 있도록 뷰 생성"></a>11. 언어 설정을 사용자가 선택해서 변경할 수 있도록 뷰 생성</h3><ul><li>경로 : sample &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> translation</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment"># 1) url named group 을 통해 language code 받기</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_language</span><span class="params">(request, code)</span>:</span></span><br><span class="line">    <span class="comment"># 지원하는 언어 코드 목록을 만듦</span></span><br><span class="line">    languages = [language[<span class="number">0</span>] <span class="keyword">for</span> language <span class="keyword">in</span> settings.LANGUAGES]</span><br><span class="line">    <span class="comment"># 기본 언어 설정 가져오기</span></span><br><span class="line">    default_language = settings.LANGUAGE_CODE[:<span class="number">2</span>] <span class="comment"># LANGUAGE_CODE = 'ko-KR'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> translation.LANGUAGE_SESSION_KEY <span class="keyword">in</span> request.session:</span><br><span class="line">        <span class="keyword">del</span>(request.session[translation.LANGUAGE_SESSION_KEY])</span><br><span class="line">    <span class="comment"># code가 지원하는 언어코드이고 기본 언어 설정이 아닌 경우, 원하는 언어로 번역 실행</span></span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> languages <span class="keyword">and</span> code != default_language:</span><br><span class="line">        translation.activate(code)</span><br><span class="line">        request.session[translation.LANGUAGE_SESSION_KEY] = code</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        request.session[translation.LANGUAGE_SESSION_KEY] = default_language</span><br><span class="line">        code = default_language</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Language Change to "</span>+code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 쿼리 스트링으로 language code 받기</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_language2</span><span class="params">(request)</span>:</span></span><br><span class="line">    code = request.GET.get(<span class="string">'code'</span>)</span><br><span class="line">    <span class="keyword">if</span> translation.LANGUAGE_SESSION_KEY <span class="keyword">in</span> request.session:</span><br><span class="line">        <span class="keyword">del</span>(request.session[translation.LANGUAGE_SESSION_KEY])</span><br><span class="line">    translation.activate(code)</span><br><span class="line"></span><br><span class="line">    request.session[translation.LANGUAGE_SESSION_KEY] = code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Language Change to "</span>+code)</span><br></pre></td></tr></table></figure></li></ul><h3 id="12-템플릿-번역-기능-사용"><a href="#12-템플릿-번역-기능-사용" class="headerlink" title="12. 템플릿 번역 기능 사용"></a>12. 템플릿 번역 기능 사용</h3><ul><li>템플릿에서 번역 기능 사용하려면, ‘load i18n’ 사용하고 trans 태그 사용해야 한다.</li><li>경로 : sample &gt; templates &gt; sample &gt; index.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"&#123;&#123;LANGUAGE_CODE&#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% load i18n %&#125;</span><br><span class="line">    &#123;% trans '안녕하세요' %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 여러 줄이 들어가있는 번역 블록 설정 --&gt;</span></span><br><span class="line">    &#123;% blocktrans %&#125;</span><br><span class="line">    블록 번역</span><br><span class="line">    테스트하는 중입니다.</span><br><span class="line">    &#123;% endblocktrans %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- context가 있는 번역을 템플릿에서 사용--&gt;</span></span><br><span class="line">    &#123;% blocktrans context '구어' %&#125;안녕 조누스&#123;% endblocktrans %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="13-뷰에서-context를-가진-번역-진행"><a href="#13-뷰에서-context를-가진-번역-진행" class="headerlink" title="13. 뷰에서 context를 가진 번역 진행"></a>13. 뷰에서 context를 가진 번역 진행</h3><ul><li>경로 : sample &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> pgettext_lazy <span class="keyword">as</span> __</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    msg = __(<span class="string">"구어"</span>, <span class="string">"안녕하세요"</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(msg)</span><br></pre></td></tr></table></figure></li></ul><h3 id="14-언어-선택창-생성하여-해당-언어로-번역-표시되도록-진행"><a href="#14-언어-선택창-생성하여-해당-언어로-번역-표시되도록-진행" class="headerlink" title="14. 언어 선택창 생성하여 해당 언어로 번역 표시되도록 진행"></a>14. 언어 선택창 생성하여 해당 언어로 번역 표시되도록 진행</h3><ul><li><p>경로 : sample &gt; forms.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment"># 언어 선택 폼 생성</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LanguageForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    code = forms.ChoiceField(choices=settings.LANGUAGES)</span><br></pre></td></tr></table></figure></li><li><p>경로 : sample &gt; context_processors.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> LanguageForm</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> translation</span><br><span class="line"><span class="comment"># code를 context_processors 로 설정</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">language</span><span class="params">(request)</span>:</span></span><br><span class="line">    language_form = LanguageForm()</span><br><span class="line">    <span class="keyword">if</span> translation.LANGUAGE_SESSION_KEY <span class="keyword">in</span> request.session:</span><br><span class="line">        current_language = request.session[translation.LANGUAGE_SESSION_KEY]</span><br><span class="line">        language_form = LanguageForm(initial=&#123;<span class="string">'code'</span>:current_language&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'language_form'</span>:language_form&#125;</span><br></pre></td></tr></table></figure></li><li><p>경로 : config &gt; settings.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 설정에서 sample 앱의 context_processors 추가</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                ...</span><br><span class="line">                <span class="string">'sample.context_processors.language'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>경로 : sample &gt; templates &gt; sample &gt; index.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"&#123;&#123;LANGUAGE_CODE&#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 언어 선택창 생성 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 폼 전송 시, 이동할 경로 설정 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'change_language' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123;language_form.as_p&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Change"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    &#123;% load i18n %&#125;</span><br><span class="line">    &#123;% trans '안녕하세요 조누스' %&#125;</span><br><span class="line">    &#123;% blocktrans context '구어' %&#125;안녕 조누스&#123;% endblocktrans %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>경로 : sample &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> LanguageForm</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_language</span><span class="params">(request)</span>:</span></span><br><span class="line">    language_form = LanguageForm(request.POST)</span><br><span class="line">    <span class="keyword">if</span> language_form.is_valid():</span><br><span class="line">        language = language_form.cleaned_data[<span class="string">'code'</span>]</span><br><span class="line">        languages = [language[<span class="number">0</span>] <span class="keyword">for</span> language <span class="keyword">in</span> settings.LANGUAGES]</span><br><span class="line">        <span class="keyword">if</span> translation.LANGUAGE_SESSION_KEY <span class="keyword">in</span> request.session:</span><br><span class="line">            <span class="keyword">if</span> language <span class="keyword">in</span> languages:</span><br><span class="line">                <span class="keyword">del</span> (request.session[translation.LANGUAGE_SESSION_KEY])</span><br><span class="line">                translation.activate(language)</span><br><span class="line">                request.session[translation.LANGUAGE_SESSION_KEY] = language</span><br><span class="line">    url = request.META[<span class="string">'HTTP_REFERER'</span>]</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br></pre></td></tr></table></figure></li><li><p>경로 : sample &gt; urls.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 폼 전송 후, 이동할 경로 설정</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'changelanguage/'</span>, change_language, name=<span class="string">'change_language'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/20/190620-django-translation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Elastic Beanstalk 이용한 배포</title>
      <link>https://chohyeonkeun.github.io/2019/06/19/190619-django-elastic-beanstalk/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/19/190619-django-elastic-beanstalk/</guid>
      <pubDate>Wed, 19 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 REST API를 생성한 dstagram 프로젝트를 대상으로, Elastic Beanstalk를 사용하여 배포를 진행해볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 REST API를 생성한 dstagram 프로젝트를 대상으로, Elastic Beanstalk를 사용하여 배포를 진행해볼 것이다.</li></ul><a id="more"></a><hr><h2 id="Elastic-Beanstalk란"><a href="#Elastic-Beanstalk란" class="headerlink" title="Elastic Beanstalk란?"></a>Elastic Beanstalk란?</h2><ul><li>Elastic Beanstalk란 Docker 컨테이너 기반으로 애플리케이션을 쉽고 빠르게 배포하고, 운영 및 관리를 용이하게 해주는 AWS 서비스이다. (사용한 리소스만큼 비용 과금)</li><li>용량 프로비저닝, 로드 밸런싱, 조정, 애플리케이션 상태 모니터링에 대한 세부 정보를 자동으로 처리해준다.</li><li>Go, Java, NET, Node.js, PHP, Python 및 Ruby에서 개발된 애플리케이션을 지원하며,</li><li>애플리케이션을 배포할 때, Elastic Beanstalk가 선택된 지원 가능 플랫폼 버전을 구축하고,</li><li>Amazon EC2 인스턴스 등의 AWS 리소스를 하나 이상 프로비저닝하여 애플리케이션을 실행한다.</li></ul><h2 id="Elastic-Beanstalk-배포-방법"><a href="#Elastic-Beanstalk-배포-방법" class="headerlink" title="Elastic Beanstalk 배포 방법"></a>Elastic Beanstalk 배포 방법</h2><h3 id="1-AWS-서비스에서-IAM-계정-생성"><a href="#1-AWS-서비스에서-IAM-계정-생성" class="headerlink" title="1. AWS 서비스에서 IAM 계정 생성"></a>1. AWS 서비스에서 IAM 계정 생성</h3><ul><li>AWS 사이트 &gt; IAM &gt; [사용자] 메뉴 클릭</li><li>사용자 목록에서 [사용자 추가] 버튼 클릭</li><li>사용자 이름 입력 후, 액세스 유형으로 [프로그래밍 방식 액세스] 체크</li><li>권한 설정 부분에서 [그룹 생성] 버튼 클릭</li><li>그룹 생성 화면<ul><li>그룹 이름 설정 및 정책 필터</li><li>ElasticBeanstalk를 검색해 FullAccess에 체크</li></ul></li><li>태그 추가 없이 [다음:검토] 버튼 클릭</li><li>전체 요약 사항 검토 후, [사용자 만들기] 버튼 클릭</li><li>csv 파일 다운로드</li></ul><h3 id="2-의존성-패키지-목록-파일-생성"><a href="#2-의존성-패키지-목록-파일-생성" class="headerlink" title="2. 의존성 패키지 목록 파일 생성"></a>2. 의존성 패키지 목록 파일 생성</h3><ul><li><code>$ pip freeze &gt; requirements.txt</code></li></ul><h3 id="3-ebextensions-폴더-생성"><a href="#3-ebextensions-폴더-생성" class="headerlink" title="3. .ebextensions 폴더 생성"></a>3. .ebextensions 폴더 생성</h3><ul><li>경로 : dstagram_project &gt; .ebextensions</li><li><code>$ mkdir .ebextensions</code></li></ul><h3 id="4-ebextensions-폴더에-django-config-파일-생성"><a href="#4-ebextensions-폴더에-django-config-파일-생성" class="headerlink" title="4. .ebextensions 폴더에 django.config 파일 생성"></a>4. .ebextensions 폴더에 django.config 파일 생성</h3><ul><li>경로 : .ebextensions &gt; django.config  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">option_settings:</span><br><span class="line">    aws:elasticbeanstalk:container:python:</span><br><span class="line">        WSGIPath: config/wsgi.py</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-settings-py에-배포-관련-설정-진행"><a href="#5-settings-py에-배포-관련-설정-진행" class="headerlink" title="5. settings.py에 배포 관련 설정 진행"></a>5. settings.py에 배포 관련 설정 진행</h3><ul><li>경로 : config(프로젝트) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-gitignore-파일-생성"><a href="#6-gitignore-파일-생성" class="headerlink" title="6. .gitignore 파일 생성"></a>6. .gitignore 파일 생성</h3><ul><li>경로 : dstagram_project &gt; .gitignore  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*.pyc</span><br><span class="line">*~</span><br><span class="line">/venv</span><br><span class="line">__pycache__</span><br><span class="line">db.sqlite3</span><br><span class="line">.DS_Store</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-AWS-CLI-설치-선택"><a href="#7-AWS-CLI-설치-선택" class="headerlink" title="7. AWS CLI 설치(선택)"></a>7. AWS CLI 설치(선택)</h3><ul><li>배포 자동화를 콘솔에서 처리하기 위한 목적 (여기에서는 설치하지 않을 것이다.)</li><li><code>$ pip install awscli</code></li></ul><h3 id="8-EB-CLI-설치"><a href="#8-EB-CLI-설치" class="headerlink" title="8. EB CLI 설치"></a>8. EB CLI 설치</h3><ul><li><code>$ pip install awsebcli</code></li></ul><h3 id="9-Git-초기화-및-커밋-진행"><a href="#9-Git-초기화-및-커밋-진행" class="headerlink" title="9. Git 초기화 및 커밋 진행"></a>9. Git 초기화 및 커밋 진행</h3><ul><li><code>$ git init</code></li><li><code>$ git add -A .</code></li><li><code>$ git commit -m &quot;deploy using eb&quot;</code></li></ul><h3 id="10-eb-init-명령-실행"><a href="#10-eb-init-명령-실행" class="headerlink" title="10. eb init 명령 실행"></a>10. eb init 명령 실행</h3><ul><li>기본 설정 진행(여기에선 CodeCommit 사용하지 않음)</li><li><code>$ eb init</code><ul><li>ap-northeast-2 : Asia Oacific (Seoul) 선택</li><li>aws-access-id, aws-secret-key : IAM 계정 생성하여 다운로드한 csv 파일 참고하여 입력</li><li>Enter Application Name : Enter 입력</li><li>It appears you are using ~ (Y/N): Y 입력</li><li>Select a platform version. : python3.6 선택(1번)</li><li>Do you wish to continue with CodeCommit (Y/N) : N 입력</li><li>Do you want to set up SSH for your instance? (Y/N) : Y 입력</li><li>Select a keypair : 조회되는 번호 아무거나 입력<h3 id="11-eb-create-명령-실행하여-로드-밸런서-설정-진행"><a href="#11-eb-create-명령-실행하여-로드-밸런서-설정-진행" class="headerlink" title="11. eb create 명령 실행하여 로드 밸런서 설정 진행"></a>11. eb create 명령 실행하여 로드 밸런서 설정 진행</h3></li></ul></li><li><code>$ eb create</code><ul><li>Enter Environment Name : Enter 입력</li><li>Enter DNS CNAME prefix : Enter 입력</li><li>Select a load balancer type : application 선택(2번)</li><li>대기하다가, Successfully launched environment:~ 문구 확인</li><li>관리자 사이트 접속 안된다면,<ul><li>aws 사이트 &gt; EC2 &gt; 보안그룹 &gt; CNAME 이름의 보안그룹 ID 복사</li><li>RDS &gt; 데이터 베이스 &gt; VPC 보안그룹 &gt; 인바운드 &gt; 편집</li><li>포트 범위 : 5432</li><li>소스 : EC2에서 CNAME 이름의 보안그룹 ID 붙여넣기<h3 id="12-eb-open-명령-실행하여-사이트-확인"><a href="#12-eb-open-명령-실행하여-사이트-확인" class="headerlink" title="12. eb open 명령 실행하여 사이트 확인"></a>12. eb open 명령 실행하여 사이트 확인</h3></li></ul></li></ul></li><li><code>$ eb open</code></li></ul><h3 id="13-2-AWS-CLI-설치-선택"><a href="#13-2-AWS-CLI-설치-선택" class="headerlink" title="13. ### 2. AWS CLI 설치(선택)"></a>13. ### 2. AWS CLI 설치(선택)</h3><ul><li>배포 자동화를 콘솔에서 처리하기 위한 목적 (여기에서는 설치하지 않을 것이다.)</li><li><code>$ pip install awscli</code></li></ul><h3 id="3-EB-CLI-설치"><a href="#3-EB-CLI-설치" class="headerlink" title="3. EB CLI 설치"></a>3. EB CLI 설치</h3><ul><li><code>$ pip install awsebcli</code>코드 변경이 있을 시, 새로운 코드를 커밋하고, eb deploy 실행하면 새로운 코드로 업데이트된다.</li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/19/190619-django-elastic-beanstalk/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Rest Framework 사용</title>
      <link>https://chohyeonkeun.github.io/2019/06/18/190618-django-rest-framework/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/18/190618-django-rest-framework/</guid>
      <pubDate>Tue, 18 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 프론트엔드 개발자와 백엔드 개발자 간 협업을 위해 사용되는 REST API의 정의와 API를 생성하기 위한 Rest Framework 사용 방법에 대해 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 프론트엔드 개발자와 백엔드 개발자 간 협업을 위해 사용되는 REST API의 정의와 API를 생성하기 위한 Rest Framework 사용 방법에 대해 알아볼 것이다.</li></ul><a id="more"></a><hr><h2 id="REST-API란"><a href="#REST-API란" class="headerlink" title="REST API란?"></a>REST API란?</h2><ul><li>REST(Representational State Transfer)<ul><li>웹에 존재하는 모든 자원(이미지, 동영상, DB 자원)에 고유한 URI를 부여해 활용하는 것</li><li>자원(Resource) - URI</li><li>행위(Verb) - HTTP METHOD</li><li>표현(Representations)</li></ul></li><li>API(Application Programming Interface)<ul><li>컴퓨터 프로그램 간 상호작용을 촉진하며, 서로 정보를 교환할 수 있도록 도와주는 것</li></ul></li><li>REST API<ul><li>웹에 존재하는 모든 자원에 고유한 URI를 부여해 활용 가능한 API를 제공하는 것</li><li>백엔드 개발자와 프론트엔드, iOS, Android 개발자와의 협업을 위해 데이터 정보 교환이 가능하다.</li></ul></li></ul><h2 id="Django-Rest-Framework-사용-방법"><a href="#Django-Rest-Framework-사용-방법" class="headerlink" title="Django Rest Framework 사용 방법"></a>Django Rest Framework 사용 방법</h2><blockquote><p>ex) dstagram_project</p></blockquote><h3 id="1-rest-framework와-Swagger-설치"><a href="#1-rest-framework와-Swagger-설치" class="headerlink" title="1. rest framework와 Swagger 설치"></a>1. rest framework와 Swagger 설치</h3><ul><li>django-rest-framework 설치<ul><li><code>$ pip install djangorestframework</code></li></ul></li><li>Swagger 설치<ul><li><code>$ pip install django-rest-swagger==2.1.2</code></li></ul></li></ul><h3 id="2-INSTALLED-APP에-REST-API-관련-기능-추가"><a href="#2-INSTALLED-APP에-REST-API-관련-기능-추가" class="headerlink" title="2. INSTALLED_APP에 REST API 관련 기능 추가"></a>2. INSTALLED_APP에 REST API 관련 기능 추가</h3><ul><li>경로 : config(프로젝트) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="comment"># swagger UI 제공</span></span><br><span class="line">    <span class="string">'rest_framework_swagger'</span>,</span><br><span class="line">    <span class="comment"># 토큰 제공</span></span><br><span class="line">    <span class="string">'rest_framework.authtoken'</span>,</span><br><span class="line">    <span class="comment"># 특정 필드 서치 기능 제공</span></span><br><span class="line">    <span class="string">'django_filters'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-API-동작을-위한-Serializers-생성"><a href="#3-API-동작을-위한-Serializers-생성" class="headerlink" title="3. API 동작을 위한 Serializers 생성"></a>3. API 동작을 위한 Serializers 생성</h3><ul><li>경로 : photo &gt; serializers.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Photo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoListSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Photo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Photo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-인증-권한-부여-방법-설정"><a href="#4-인증-권한-부여-방법-설정" class="headerlink" title="4. 인증 권한 부여 방법 설정"></a>4. 인증 권한 부여 방법 설정</h3><ul><li>경로 : photo &gt; permissions.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 요청한 클라이언트가 해당 객체(포스트)의 생성자인 경우 인증 권한 부여</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permmission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> obj.author == request.user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 요청한 클라이언트가 해당 객체(포스트)의 생성자이거나, 관리자인 경우 인증 권한 부여</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerAndAdminOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> obj.author == request.user <span class="keyword">or</span> request.user.is_superuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모두에게 읽기 권한 부여하, 요청한 클라이언트가 해당 객체(포스트)의 생성자이거나, 관리자인 경우 인증 권한 부여</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="comment"># 읽기 권한은 모두에게 허용</span></span><br><span class="line">        <span class="comment"># GET, HEAD, OPTIONS 요청은 항상 허용</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 쓰기 권한은 해당 객체의 소유자 혹은 관리장에게만 부여</span></span><br><span class="line">        <span class="keyword">return</span> obj.author == request.user <span class="keyword">or</span> request.user.is_superuser</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-settings-py에-기본-인증-방식-토큰-방식-서치-기능-추가"><a href="#5-settings-py에-기본-인증-방식-토큰-방식-서치-기능-추가" class="headerlink" title="5. settings.py에 기본 인증 방식, 토큰 방식, 서치 기능 추가"></a>5. settings.py에 기본 인증 방식, 토큰 방식, 서치 기능 추가</h3><ul><li>경로 : config &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 로그인해야 모든 API 실행 가능</span></span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 토큰 인증 방식 추가</span></span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.TokenAuthentication'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 서치 기능 추가</span></span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: (</span><br><span class="line">        <span class="comment"># 필터 가능</span></span><br><span class="line">        <span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>,</span><br><span class="line">        <span class="comment"># 검색 필드 적용하여 ForeignKey로 묶인 필드들을 기준으로 검색 가능</span></span><br><span class="line">        <span class="comment"># SearchField를 필터 백엔드에 추가</span></span><br><span class="line">        <span class="string">'rest_framework.filters.SearchFilter'</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Swagger에 Token 인증 방법 추가</span></span><br><span class="line">SWAGGER_SETTINGS = &#123;</span><br><span class="line">    <span class="string">'SECURITY_DEFINITIONS'</span>: &#123;</span><br><span class="line">        <span class="string">"api_key"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>:<span class="string">"apiKey"</span>,</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"Authorization"</span>,</span><br><span class="line">            <span class="string">"in"</span>:<span class="string">"header"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-generic-이용하여-뷰-작성"><a href="#6-generic-이용하여-뷰-작성" class="headerlink" title="6. generic 이용하여 뷰 작성"></a>6. generic 이용하여 뷰 작성</h3><ul><li>경로 : photo &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .permissions <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># list, create 기능을 하나의 클래스로 정의</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoListView</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Photo.objects.all()</span><br><span class="line">    serializer_class = PhotoListSerializers</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ForeignKey로 연결된 필드의 키워드 서치</span></span><br><span class="line">    search_fields = (<span class="string">'text'</span>,<span class="string">'author__username'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create 시, 요청한 클라이언트를 요청한 데이터의 author로 설정</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        request.data[<span class="string">'author'</span>] = request.user.id</span><br><span class="line">        <span class="keyword">return</span> super().create(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 기본적으로 모든 API 뷰가 로그인해야만 실행될 수 있도록 하는 IsAuthenticated 호출</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"><span class="comment"># detail, update, delete 기능을 하나의 클래스로 정의</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoDetailView</span><span class="params">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></span><br><span class="line">    queryset = Photo.objects.all()</span><br><span class="line">    serializer_class = PhotoSerializers</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 로그인 이후 모든 API 뷰가 실행하도록 하고, 요청하는 클라이언트가 객체 생성자 혹은 관리자일 경우에 인증 권한 부여</span></span><br><span class="line">    permission_classes = [IsAuthenticated, IsOwnerAndAdminOnly]</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-API-뷰의-경로-설정"><a href="#7-API-뷰의-경로-설정" class="headerlink" title="7. API 뷰의 경로 설정"></a>7. API 뷰의 경로 설정</h3><ul><li><p>경로 : photo &gt; urls.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'api_list/'</span>, PhotoListView.as_view()),</span><br><span class="line">    path(<span class="string">'api_detail/&lt;int:pk&gt;/'</span>, PhotoDetailView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>경로 : config &gt; urls.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> rest_framework_swagger.views <span class="keyword">import</span> get_swagger_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.views <span class="keyword">import</span> obtain_auth_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">schema_view = get_swagger_view(title=<span class="string">'Dstagram API'</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># swagger UI 페이지 이동 위한 경로 설정</span></span><br><span class="line">    path(<span class="string">'api/doc/'</span>, schema_view),</span><br><span class="line">    <span class="comment"># 토큰 부여받기 위한 경로 설정</span></span><br><span class="line">    path(<span class="string">'api/get_token/'</span>, obtain_auth_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-accounts-앱에-serializers-py-생성"><a href="#8-accounts-앱에-serializers-py-생성" class="headerlink" title="8. accounts 앱에 serializers.py 생성"></a>8. accounts 앱에 serializers.py 생성</h3><ul><li>경로 : accounts &gt; serializers.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 유저 목록에 출력될 형식</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'first_name'</span>, <span class="string">'last_name'</span>, <span class="string">'email'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 회원 가입할 때 필요한 필드들에 관한 serializer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCreateSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'first_name'</span>, <span class="string">'last_name'</span>, <span class="string">'email'</span>]</span><br><span class="line">    <span class="comment"># 비밀번호 암호화(해쉬함수)하여 설정할 수 있도록 해주는 함수</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        user = User.objects.create(**validated_data)</span><br><span class="line">        user.set_password(validated_data.get(<span class="string">'password'</span>))</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="comment"># create view 는 항상 생성한 객체 반환</span></span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModifySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'password'</span>, <span class="string">'first_name'</span>, <span class="string">'last_name'</span>, <span class="string">'email'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> validated_data.items():</span><br><span class="line">            <span class="keyword">if</span> value:</span><br><span class="line">                setattr(instance, key, value)</span><br><span class="line">            <span class="keyword">if</span> key == <span class="string">'password'</span> <span class="keyword">and</span> value:</span><br><span class="line">                instance.set_password(value)</span><br><span class="line">            <span class="keyword">elif</span> value:</span><br><span class="line">                setattr(instance, key, value)</span><br><span class="line">        instance.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetailSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'first_name'</span>, <span class="string">'last_name'</span>, <span class="string">'email'</span>, <span class="string">'is_superuser'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-serializer를-활용한-뷰-작성"><a href="#9-serializer를-활용한-뷰-작성" class="headerlink" title="9. serializer를 활용한 뷰 작성"></a>9. serializer를 활용한 뷰 작성</h3><ul><li>경로 : accounts &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> UserListSerializer, UserCreateSerializer, UserModifySerializer, UserDetailSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListAPI</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    queryset = get_user_model().objects.all()</span><br><span class="line">    serializer_class = UserListSerializer</span><br><span class="line">    <span class="comment"># 원하는 검색 항목 추가</span></span><br><span class="line">    filterset_fields = (<span class="string">'username'</span>, <span class="string">'first_name'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 관리자의 경우에만 전체 목록 반환하고, 아닌 경우에는 자신의 정보만 반환</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        queryset = super().get_queryset()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.request.user.is_staff:</span><br><span class="line">            queryset = queryset.filter(pk=self.request.user.id)</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 인증 없이도 사용할 수 있도록 AllowAny 설정(회원가입 뷰 등)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCreateAPI</span><span class="params">(generics.CreateAPIView)</span>:</span></span><br><span class="line">    serializer_class = UserCreateSerializer</span><br><span class="line">    permission_classes = [AllowAny]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserUpdateAPI</span><span class="params">(generics.UpdateAPIView)</span>:</span></span><br><span class="line">    queryset = get_user_model().objects.all()</span><br><span class="line">    serializer_class = UserModifySerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetailAPI</span><span class="params">(generics.RetrieveAPIView)</span>:</span></span><br><span class="line">    queryset = get_user_model().objects.all()</span><br><span class="line">    serializer_class = UserDetailSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDeleteAPI</span><span class="params">(generics.DestroyAPIView)</span>:</span></span><br><span class="line">    queryset = get_user_model().objects.all()</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-뷰에-대한-경로-설정"><a href="#10-뷰에-대한-경로-설정" class="headerlink" title="10. 뷰에 대한 경로 설정"></a>10. 뷰에 대한 경로 설정</h3><ul><li>경로 : accounts &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">"accounts"</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'create/'</span>, UserCreateAPI.as_view()),</span><br><span class="line">    path(<span class="string">'list/'</span>, UserListAPI.as_view()),</span><br><span class="line">    path(<span class="string">'detail/&lt;int:pk&gt;/'</span>, UserUpdateAPI.as_view()),</span><br><span class="line">    path(<span class="string">'delete/&lt;int:pk&gt;/'</span>, UserDeleteAPI.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="추가-Swagger-UI-접속하여-데이터-정보-확인-DEBUG-모드일-경우"><a href="#추가-Swagger-UI-접속하여-데이터-정보-확인-DEBUG-모드일-경우" class="headerlink" title="추가) Swagger UI 접속하여 데이터 정보 확인(DEBUG 모드일 경우)"></a>추가) Swagger UI 접속하여 데이터 정보 확인(DEBUG 모드일 경우)</h2><ul><li>127.0.0.1:8000/api/doc 접속</li><li>api &gt; /api/get_token/<ul><li>username, password 입력하여 token 확인</li></ul></li><li>우측 상단 ‘Authorize’ 버튼 클릭<ul><li>value 값에 ‘Token [token 번호]’ 입력</li></ul></li><li>필요한 데이터 확인</li></ul><h2 id="추가-postman-프로그램으로-데이터-정보-확인-DEBUG-모드일-경우"><a href="#추가-postman-프로그램으로-데이터-정보-확인-DEBUG-모드일-경우" class="headerlink" title="추가) postman 프로그램으로 데이터 정보 확인 (DEBUG 모드일 경우)"></a>추가) postman 프로그램으로 데이터 정보 확인 (DEBUG 모드일 경우)</h2><ul><li>postman 프로그램 이용하여 회원 정보 저장 및 데이터 확인<ul><li>token 받아오기<ul><li>메인 화면에서 POST 선택 &gt; 127.0.0.1:8000/api/get_token/ 입력 &gt; Body 선택</li><li>KEY 값에 ‘username’, ‘password’ 입력하고, VALUE 값에 해당 회원정보 입력</li><li>SEND</li><li>token 번호 확인</li></ul></li><li>특정 데이터 정보 받아오기<ul><li>Swagger에서 받아오고 싶은 데이터 파악</li><li>postman 실행</li><li>메인화면에서 GET 선택 &gt; 127.0.0.1:8000/accounts/list 입력 &gt; Headers 선택</li><li>KEY 값에 ‘Authorization’ 입력하고, VALUE 값에 ‘Token [token 번호]’ 입력</li><li>SEND</li><li>데이터 확인</li></ul></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/18/190618-django-rest-framework/#disqus_thread</comments>
    </item>
    
    <item>
      <title>결제 시스템 연동</title>
      <link>https://chohyeonkeun.github.io/2019/06/17/190617-django-payment-function/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/17/190617-django-payment-function/</guid>
      <pubDate>Mon, 17 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어, 결제 시스템을 어떻게 연동하는지에 대해 알아볼 것이다.&lt;/li&gt;
&lt;li&gt;여기에서는 iamport를 사용하여 결제 시스템을 연동할 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어, 결제 시스템을 어떻게 연동하는지에 대해 알아볼 것이다.</li><li>여기에서는 iamport를 사용하여 결제 시스템을 연동할 것이다.</li></ul><a id="more"></a><hr><h2 id="iamport-결제-관리-시스템-이용"><a href="#iamport-결제-관리-시스템-이용" class="headerlink" title="iamport 결제 관리 시스템 이용"></a>iamport 결제 관리 시스템 이용</h2><h3 id="1-iamport-사이트-접속"><a href="#1-iamport-사이트-접속" class="headerlink" title="1. iamport 사이트 접속"></a>1. iamport 사이트 접속</h3><ul><li><a href="https://www.iamport.kr" target="_blank" rel="noopener">https://www.iamport.kr</a></li><li>우측 상단 ‘대사보드’ 클릭</li><li>회원가입 및 로그인</li><li>시스템설정 &gt; PG설정(일반결제 및 정기결제)<ul><li>PG사 : KG이니시스(웹표준결제창) 선택</li><li>테스트모드 : ON</li></ul></li></ul><h3 id="2-장고-프로젝트에-IAMPORT-관련-정보-설정"><a href="#2-장고-프로젝트에-IAMPORT-관련-정보-설정" class="headerlink" title="2. 장고 프로젝트에 IAMPORT 관련 정보 설정"></a>2. 장고 프로젝트에 IAMPORT 관련 정보 설정</h3><ul><li>경로 : config(프로젝트) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># iamport 사이트 &gt; 시스템설정 &gt; 내정보에서 IAMPORT_KEY, IAMPORT_SECRET 정보 입력</span></span><br><span class="line">IAMPORT_KEY = <span class="string">'REST API 키'</span></span><br><span class="line">IAMPORT_SECRET = <span class="string">'REST API secret'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-장바구니-페이지에서-결제-버튼-클릭-시-결제페이지로-이동되도록-코드-작성"><a href="#3-장바구니-페이지에서-결제-버튼-클릭-시-결제페이지로-이동되도록-코드-작성" class="headerlink" title="3. 장바구니 페이지에서 결제 버튼 클릭 시, 결제페이지로 이동되도록 코드 작성"></a>3. 장바구니 페이지에서 결제 버튼 클릭 시, 결제페이지로 이동되도록 코드 작성</h3><ul><li>경로 : cart &gt; templates &gt; cart &gt; cart.detail.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- 클릭 시, 결제페이지로 이동되는 버튼 부분 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 이전 페이지 이동 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;continue_url&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"float-left btn btn-lg btn-primary"</span>&gt;</span>Continue Shopping<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 결제페이지로 이동 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'order_create' %&#125;"</span> <span class="attr">class</span>=<span class="string">"float-right btn btn-lg btn-info"</span>&gt;</span>Checkout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-결제-페이지로-이동할-경로-작성"><a href="#4-결제-페이지로-이동할-경로-작성" class="headerlink" title="4. 결제 페이지로 이동할 경로 작성"></a>4. 결제 페이지로 이동할 경로 작성</h3><ul><li>경로 : order &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'create/'</span>, order_create, name=<span class="string">'order_create'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-결제-페이지-코드-작성"><a href="#5-결제-페이지-코드-작성" class="headerlink" title="5. 결제 페이지 코드 작성"></a>5. 결제 페이지 코드 작성</h3><ul><li><p>경로 : order &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cart.cart <span class="keyword">import</span> Cart</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> OrderItem</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> OrderForm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_create</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 장바구니에 존재하는 상품 정보 받아오기</span></span><br><span class="line">    cart = Cart(request)</span><br><span class="line">    <span class="comment"># 주문 정보가 입력 완료된 상황(결제 폼 작성 완료하여 POST 형태로 request를 받은 상황)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        form = OrderForm(request.POST)</span><br><span class="line">        <span class="comment"># 작성한 폼 validation 진행</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            order = form.save()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> cart:</span><br><span class="line">                <span class="comment"># 장바구니에 들어있는 모든 상품 정보를 OrderItem 모델에 저장</span></span><br><span class="line">                OrderItem.objects.create(order=order, product=item[<span class="string">'product'</span>], price=item[<span class="string">'price'</span>], quantity=item[<span class="string">'quantity'</span>])</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'order/order_created.html'</span>, &#123;<span class="string">'order'</span>: order&#125;)</span><br><span class="line">    <span class="comment"># 주문 정보가 입력되지 않은 상황(처음 결제페이지로 이동한 상황)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = OrderForm()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'order/order_create.html'</span>, &#123;<span class="string">'form'</span>:form&#125;)</span><br></pre></td></tr></table></figure></li><li><p>경로 : order &gt; templates &gt; order &gt; order_create.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">Order Checkout</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info mt-3"</span>&gt;</span></span><br><span class="line">    Please enter your order information.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"order-form"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"pre_order_id"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"amount"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;cart.get_total_price&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Payment"</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-success"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extra_script %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">csrf_token = <span class="string">'&#123;&#123;csrf_token&#125;&#125;'</span>;</span></span><br><span class="line"><span class="javascript">order_create_url = <span class="string">'&#123;% url '</span>order_create_ajax<span class="string">' %&#125;'</span>;</span></span><br><span class="line"><span class="javascript">order_checkout_url = <span class="string">'&#123;% url '</span>order_checkout<span class="string">' %&#125;'</span>;</span></span><br><span class="line"><span class="javascript">order_validation_url = <span class="string">'&#123;% url '</span>order_validation<span class="string">' %&#125;'</span>;</span></span><br><span class="line"><span class="javascript">order_complete_url = <span class="string">'&#123;% url '</span>order_complete<span class="string">' %&#125;'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iamport 사이트에서 해당 스크립트 복사 붙여넣기--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.iamport.kr/js/iamport.payment-1.1.5.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 결제창 띄우기 위한 자바스크립트 실행 --&gt;</span></span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/checkout.js' %&#125;"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-결제창-실행시키기-위해-필요한-자바스크립트-관련-view의-경로-설정"><a href="#6-결제창-실행시키기-위해-필요한-자바스크립트-관련-view의-경로-설정" class="headerlink" title="6. 결제창 실행시키기 위해 필요한 자바스크립트 관련 view의 경로 설정"></a>6. 결제창 실행시키기 위해 필요한 자바스크립트 관련 view의 경로 설정</h3><ul><li>경로 : order &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'create_ajax/'</span>, OrderCreateAjaxView.as_view(), name=<span class="string">'order_create_ajax'</span>),</span><br><span class="line">    path(<span class="string">'checkout/'</span>, OrderCheckoutAjaxView.as_view(), name=<span class="string">'order_checkout'</span>),</span><br><span class="line">    path(<span class="string">'validation/'</span>, OrderImpAjaxView.as_view(), name=<span class="string">'order_validation'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-결제창-실행시키기-위해-필요한-자바스크립트-관련-view-작성"><a href="#7-결제창-실행시키기-위해-필요한-자바스크립트-관련-view-작성" class="headerlink" title="7. 결제창 실행시키기 위해 필요한 자바스크립트 관련 view 작성"></a>7. 결제창 실행시키기 위해 필요한 자바스크립트 관련 view 작성</h3><ul><li>경로 : order &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cart.cart <span class="keyword">import</span> Cart</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> OrderItem</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> OrderForm</span><br><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderCreateAjaxView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        cart = Cart(request)</span><br><span class="line">        form = OrderForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            order = form.save()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> cart:</span><br><span class="line">                OrderItem.objects.create(order=order, product=item[<span class="string">'product'</span>], price=item[<span class="string">'price'</span>], quantity=item[<span class="string">'quantity'</span>])</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">"order_id"</span>:order.id</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(data)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;&#125;, status=<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> OrderTransaction</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderCheckoutAjaxView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        order_id = request.POST.get(<span class="string">'order_id'</span>)</span><br><span class="line">        order = Order.objects.get(id=order_id)</span><br><span class="line">        amount = request.POST.get(<span class="string">'amount'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            merchant_order_id = OrderTransaction.objects.create_new(order=order, amount=amount)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            merchant_order_id = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> merchant_order_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'works'</span>:<span class="literal">True</span>,</span><br><span class="line">                <span class="string">'merchant_id'</span>:merchant_order_id</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;&#125;, status=<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderImpAjaxView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        order_id = request.POST.get(<span class="string">'order_id'</span>)</span><br><span class="line">        merchant_id = request.POST.get(<span class="string">'merchant_id'</span>)</span><br><span class="line">        imp_id = request.POST.get(<span class="string">'imp_id'</span>)</span><br><span class="line">        amount = request.POST.get(<span class="string">'amount'</span>)</span><br><span class="line">        order = Order.objects.filter(pk=order_id)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> order.exists():</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;&#125;, status=<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line">        order = order[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        transaction = OrderTransaction.objects.filter(order=order, merchant_order_id=merchant_id, amount=amount)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> transaction.exists():</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;&#125;, status=<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 결제 정보 수정</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exact_transaction = transaction[<span class="number">0</span>]</span><br><span class="line">            exact_transaction.transaction_id = imp_id</span><br><span class="line">            exact_transaction.success = <span class="literal">True</span></span><br><span class="line">            exact_transaction.save()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 주문 정보 - 결제 완료로 변경</span></span><br><span class="line">            order.paid = <span class="literal">True</span></span><br><span class="line">            order.save()</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'works'</span>:<span class="literal">True</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cart = Cart(request)</span><br><span class="line">            cart.clear()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(data)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"transaction error"</span>, e)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">"message"</span>:str(e)&#125;, status=<span class="number">401</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-iamport-API와-통신하는-함수-작성"><a href="#8-iamport-API와-통신하는-함수-작성" class="headerlink" title="8. iamport API와 통신하는 함수 작성"></a>8. iamport API와 통신하는 함수 작성</h3><ul><li>경로 : order &gt; iamport.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iamport 가입 - 설정</span></span><br><span class="line"><span class="comment"># iamport API와 통신하는 함수 만들기</span></span><br><span class="line"><span class="comment"># views.py API함수를 이용한 결제 진행</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip install requests</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">()</span>:</span></span><br><span class="line">    access_data = &#123;</span><br><span class="line">        <span class="string">'imp_key'</span>:settings.IAMPORT_KEY,</span><br><span class="line">        <span class="string">'imp_secret'</span>:settings.IAMPORT_SECRET</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://api.iamport.kr/users/getToken'</span></span><br><span class="line"></span><br><span class="line">    req = requests.post(url, data=access_data)</span><br><span class="line">    data = req.json()</span><br><span class="line">    <span class="keyword">if</span> data[<span class="string">'code'</span>] <span class="keyword">is</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> data[<span class="string">'response'</span>][<span class="string">'access_token'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iamport에 사전 정보를 보내서 결제 준비</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payment_prepare</span><span class="params">(order_id, amount, *args, **kwargs)</span>:</span></span><br><span class="line">    access_token = get_token()</span><br><span class="line">    <span class="keyword">if</span> access_token:</span><br><span class="line">        access_data = &#123;</span><br><span class="line">            <span class="string">'merchant_uid'</span>:order_id,</span><br><span class="line">            <span class="string">'amount'</span>:amount</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        url = <span class="string">"https://api.iamport.kr/payments/prepare"</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'Authorization'</span>:access_token</span><br><span class="line">        &#125;</span><br><span class="line">        req = requests.post(url, data=access_data, headers=headers)</span><br><span class="line">        data = req.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">'code'</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"API 통신 오류"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"토큰 오류"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결제 이후에 해당 하는 주문 번호와 결제 금액으로 진행된 결제가 있는지 찾아주는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_transaction</span><span class="params">(order_id, *args, **kwargs)</span>:</span></span><br><span class="line">    access_token = get_token()</span><br><span class="line">    <span class="keyword">if</span> access_token:</span><br><span class="line">        url = <span class="string">"https://api.iamport.kr/payments/find/"</span>+order_id</span><br><span class="line">        headers = &#123;<span class="string">'Authorization'</span>:access_token&#125;</span><br><span class="line">        req = requests.post(url, headers=headers)</span><br><span class="line">        data = req.json()</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">'code'</span>] <span class="keyword">is</span> <span class="number">0</span>:</span><br><span class="line">            imp_data = data[<span class="string">'response'</span>]</span><br><span class="line">            context = &#123;</span><br><span class="line">                <span class="string">'imp_id'</span>: imp_data[<span class="string">'imp_uid'</span>],</span><br><span class="line">                <span class="string">'merchant_order_id'</span>: imp_data[<span class="string">'merchant_uid'</span>],</span><br><span class="line">                <span class="string">'amount'</span>:imp_data[<span class="string">'amount'</span>],</span><br><span class="line">                <span class="string">'status'</span>:imp_data[<span class="string">'status'</span>],</span><br><span class="line">                <span class="string">'type'</span>:imp_data[<span class="string">'pay_method'</span>],</span><br><span class="line">                <span class="string">'receipt_url'</span>:imp_data[<span class="string">'receipt_url'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> context</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"토큰 오류"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cancel_transaction</span><span class="params">(transaction_id, *args, **kwargs)</span>:</span></span><br><span class="line">    access_token = get_token()</span><br><span class="line">    <span class="keyword">if</span> access_token:</span><br><span class="line">        url = <span class="string">"https://api.iamport.kr/payments/cancel"</span></span><br><span class="line">        headers = &#123;<span class="string">'Authorization'</span>:access_token&#125;</span><br><span class="line">        access_data = &#123;</span><br><span class="line">            <span class="string">'imp_uid'</span>: transaction_id</span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="string">"data"</span>, access_data)</span><br><span class="line">        req = requests.post(url, data=access_data, headers=headers)</span><br><span class="line">        data = req.json()</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">'code'</span>] <span class="keyword">is</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"토큰 오류"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-결제창-띄우기-위한-자바스크립트-코드-작성"><a href="#9-결제창-띄우기-위한-자바스크립트-코드-작성" class="headerlink" title="9. 결제창 띄우기 위한 자바스크립트 코드 작성"></a>9. 결제창 띄우기 위한 자바스크립트 코드 작성</h3><ul><li>경로 : order &gt; static &gt; js &gt; checkout.js  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> IMP = <span class="built_in">window</span>.IMP;</span><br><span class="line">    IMP.init(<span class="string">'iamport 사이트에서 가맹점 식별코드 입력'</span>);</span><br><span class="line">    $(<span class="string">'.order-form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> amount = <span class="built_in">parseFloat</span>($(<span class="string">'.order-form input[name="amount"]'</span>).val().replace(<span class="string">','</span>, <span class="string">''</span>));</span><br><span class="line">        <span class="keyword">var</span> type = $(<span class="string">'.order-form input[name="type"]:checked'</span>).val();</span><br><span class="line">        <span class="comment">// 폼 데이터를 기준으로 주문 생성</span></span><br><span class="line">        <span class="keyword">var</span> order_id = AjaxCreateOrder(e);</span><br><span class="line">        <span class="keyword">if</span> (order_id == <span class="literal">false</span>) &#123;</span><br><span class="line">            alert(<span class="string">'주문 생성 실패\n다시 시도해주세요.'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 결제 정보 생성</span></span><br><span class="line">        <span class="keyword">var</span> merchant_id = AjaxStoreTransaction(e, order_id, amount, type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 결제 정보가 만들어졌으면 iamport로 실제 결제 시도</span></span><br><span class="line">        <span class="keyword">if</span> (merchant_id !== <span class="string">''</span>) &#123;</span><br><span class="line">            IMP.request_pay(&#123;</span><br><span class="line">                merchant_uid: merchant_id,</span><br><span class="line">                name: <span class="string">'E-Shop product'</span>,</span><br><span class="line">                buyer_name:$(<span class="string">'input[name="first_name"]'</span>).val()+<span class="string">" "</span>+$(<span class="string">'input[name="last_name"]'</span>).val(),</span><br><span class="line">                buyer_email:$(<span class="string">'input[name="email"]'</span>).val(),</span><br><span class="line">                amount: amount</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">rsp</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (rsp.success) &#123;</span><br><span class="line">                    <span class="keyword">var</span> msg = <span class="string">'결제가 완료되었습니다.'</span>;</span><br><span class="line">                    msg += <span class="string">'고유ID : '</span> + rsp.imp_uid;</span><br><span class="line">                    msg += <span class="string">'상점 거래ID : '</span> + rsp.merchant_uid;</span><br><span class="line">                    msg += <span class="string">'결제 금액 : '</span> + rsp.paid_amount;</span><br><span class="line">                    msg += <span class="string">'카드 승인번호 : '</span> + rsp.apply_num;</span><br><span class="line">                    <span class="comment">// 결제가 완료되었으면 비교해서 디비에 반영</span></span><br><span class="line">                    ImpTransaction(e, order_id, rsp.merchant_uid, rsp.imp_uid, rsp.paid_amount);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> msg = <span class="string">'결제에 실패하였습니다.'</span>;</span><br><span class="line">                    msg += <span class="string">'에러내용 : '</span> + rsp.error_msg;</span><br><span class="line">                    <span class="built_in">console</span>.log(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 폼 데이터를 기준으로 주문 생성</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AjaxCreateOrder</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> order_id = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> request = $.ajax(&#123;</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        url: order_create_url,</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">        data: $(<span class="string">'.order-form'</span>).serialize()</span><br><span class="line">    &#125;);</span><br><span class="line">    request.done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.order_id) &#123;</span><br><span class="line">            order_id = data.order_id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    request.fail(<span class="function"><span class="keyword">function</span> (<span class="params">jqXHR, textStatus</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jqXHR.status == <span class="number">404</span>) &#123;</span><br><span class="line">            alert(<span class="string">"페이지가 존재하지 않습니다."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jqXHR.status == <span class="number">403</span>) &#123;</span><br><span class="line">            alert(<span class="string">"로그인 해주세요."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"문제가 발생했습니다. 다시 시도해주세요."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> order_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결제 정보 생성</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AjaxStoreTransaction</span>(<span class="params">e, order_id, amount, type</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> merchant_id = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> request = $.ajax(&#123;</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        url: order_checkout_url,</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            order_id : order_id,</span><br><span class="line">            amount: amount,</span><br><span class="line">            type: type,</span><br><span class="line">            csrfmiddlewaretoken: csrf_token,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    request.done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.works) &#123;</span><br><span class="line">            merchant_id = data.merchant_id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    request.fail(<span class="function"><span class="keyword">function</span> (<span class="params">jqXHR, textStatus</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jqXHR.status == <span class="number">404</span>) &#123;</span><br><span class="line">            alert(<span class="string">"페이지가 존재하지 않습니다."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jqXHR.status == <span class="number">403</span>) &#123;</span><br><span class="line">            alert(<span class="string">"로그인 해주세요."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"문제가 발생했습니다. 다시 시도해주세요."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> merchant_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iamport에 결제 정보가 있는지 확인 후 결제 완료 페이지로 이동</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ImpTransaction</span>(<span class="params">e, order_id,merchant_id, imp_id, amount</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> request = $.ajax(&#123;</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        url: order_validation_url,</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            order_id:order_id,</span><br><span class="line">            merchant_id: merchant_id,</span><br><span class="line">            imp_id: imp_id,</span><br><span class="line">            amount: amount,</span><br><span class="line">            csrfmiddlewaretoken: csrf_token</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    request.done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.works) &#123;</span><br><span class="line">            $(location).attr(<span class="string">'href'</span>, location.origin+order_complete_url+<span class="string">'?order_id='</span>+order_id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    request.fail(<span class="function"><span class="keyword">function</span> (<span class="params">jqXHR, textStatus</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jqXHR.status == <span class="number">404</span>) &#123;</span><br><span class="line">            alert(<span class="string">"페이지가 존재하지 않습니다."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jqXHR.status == <span class="number">403</span>) &#123;</span><br><span class="line">            alert(<span class="string">"로그인 해주세요."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(jqXHR);</span><br><span class="line">            alert(<span class="string">"문제가 발생했습니다. 다시 시도해주세요."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/17/190617-django-payment-function/#disqus_thread</comments>
    </item>
    
    <item>
      <title>장바구니 기능 학습</title>
      <link>https://chohyeonkeun.github.io/2019/06/16/190616-django-cart-function/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/16/190616-django-cart-function/</guid>
      <pubDate>Sun, 16 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어, 장바구니 기능 구현 방법에 대해 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어, 장바구니 기능 구현 방법에 대해 알아볼 것이다.</li></ul><a id="more"></a><hr><h3 id="1-장바구니-기능-작성"><a href="#1-장바구니-기능-작성" class="headerlink" title="1. 장바구니 기능 작성"></a>1. 장바구니 기능 작성</h3><ul><li>경로 : cart(앱) &gt; cart.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> shop.models <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        self.session = request.session</span><br><span class="line">        cart = self.session.get(settings.CART_ID)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cart:</span><br><span class="line">            <span class="comment"># 세션에 없던 키 값을 생성하면 자동 저장</span></span><br><span class="line">            cart = self.session[settings.CART_ID] = &#123;&#125;</span><br><span class="line">            <span class="comment"># 세션에 이미 있는 키 값에 대한 값을 수정하면 수동으로 저장</span></span><br><span class="line">        self.cart = cart</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 요소가 몇개인지 갯수를 반환해주는 함수</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        id : 실제제품</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> sum(item[<span class="string">'quantity'</span>] <span class="keyword">for</span> item <span class="keyword">in</span> self.cart.values())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># for문 같은 문법을 사용할 때 안에 있는 요소를 어떤 형태로 반환할 것인지 결정하는 함수</span></span><br><span class="line">        product_ids = self.cart.keys()</span><br><span class="line">        products = Product.objects.filter(id__in=product_ids)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">            self.cart[str(product.id)][<span class="string">'product'</span>] = product</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.cart.values():</span><br><span class="line">            item[<span class="string">'total_price'</span>] = item[<span class="string">'price'</span>] * item[<span class="string">'quantity'</span>]</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, product, quantity=<span class="number">1</span>, is_update=False)</span>:</span></span><br><span class="line">        product_id = str(product.id)</span><br><span class="line">        <span class="keyword">if</span> product_id <span class="keyword">not</span> <span class="keyword">in</span> self.cart:</span><br><span class="line">            <span class="comment"># 만약 제품 정보가 Decimal 이라면 세션에 저장할 때는 str로 형변환 해서 저장하고</span></span><br><span class="line">            <span class="comment"># 꺼내올 때는 Decimal로 형변환해서 사용해야 한다.</span></span><br><span class="line">            self.cart[product_id] = &#123;<span class="string">'quantity'</span>:<span class="number">0</span>, <span class="string">'price'</span>:product.price&#125;</span><br><span class="line">        <span class="keyword">if</span> is_update:</span><br><span class="line">            self.cart[product_id][<span class="string">'quantity'</span>] = quantity</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cart[product_id][<span class="string">'quantity'</span>] += quantity</span><br><span class="line">        self.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, product)</span>:</span></span><br><span class="line">        product_id = str(product.id)</span><br><span class="line">        <span class="keyword">if</span> product_id <span class="keyword">in</span> self.cart:</span><br><span class="line">            <span class="keyword">del</span>(self.cart[product_id])</span><br><span class="line">        self.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.session[settings.CART_ID] = self.cart</span><br><span class="line">        self.session.modified = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cart = &#123;&#125;</span><br><span class="line">        self.save()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 전체 제품 가격</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_total_price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(item[<span class="string">'quantity'</span>]*item[<span class="string">'price'</span>] <span class="keyword">for</span> item <span class="keyword">in</span> self.cart.values())</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-여러-페이지에-cart를-context-data로-전달하기-위해-context-processors-작성"><a href="#2-여러-페이지에-cart를-context-data로-전달하기-위해-context-processors-작성" class="headerlink" title="2. 여러 페이지에 cart를 context data로 전달하기 위해 context processors 작성"></a>2. 여러 페이지에 cart를 context data로 전달하기 위해 context processors 작성</h3><ul><li>경로 : cart &gt; context_processors.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .cart <span class="keyword">import</span> Cart</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart</span><span class="params">(request)</span>:</span></span><br><span class="line">    cart = Cart(request)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'cart'</span>:cart&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-장고-프로젝트-설정에-context-processors-추가"><a href="#3-장고-프로젝트-설정에-context-processors-추가" class="headerlink" title="3. 장고 프로젝트 설정에 context_processors 추가"></a>3. 장고 프로젝트 설정에 context_processors 추가</h3><ul><li>경로 : config(프로젝트) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                ...</span><br><span class="line">                <span class="string">'cart.context_processors.cart'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-상품을-장바구니에-추가하기-위해-고객이-입력해야-할-폼-설정"><a href="#4-상품을-장바구니에-추가하기-위해-고객이-입력해야-할-폼-설정" class="headerlink" title="4. 상품을 장바구니에 추가하기 위해 고객이 입력해야 할 폼 설정"></a>4. 상품을 장바구니에 추가하기 위해 고객이 입력해야 할 폼 설정</h3><ul><li>경로 : cart &gt; forms.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddToCartForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 상품 수량 설정 field</span></span><br><span class="line">    quantity = forms.IntegerField(initial=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 수정 여부 확인 field</span></span><br><span class="line">    is_update = forms.BooleanField(required=<span class="literal">False</span>, initial=<span class="literal">False</span>, widget=forms.HiddenInput)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-상품-상세-페이지에-특정-상품을-장바구니에-저장해주는-버튼-생성"><a href="#5-상품-상세-페이지에-특정-상품을-장바구니에-저장해주는-버튼-생성" class="headerlink" title="5. 상품 상세 페이지에 특정 상품을 장바구니에 저장해주는 버튼 생성"></a>5. 상품 상세 페이지에 특정 상품을 장바구니에 저장해주는 버튼 생성</h3><ul><li><p>경로 : shop &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductDetail</span><span class="params">(DetailView)</span>:</span></span><br><span class="line">    model = Product</span><br><span class="line">    template_name = <span class="string">'shop/product_detail.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># context data로 form 전달</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        form = AddToCartForm()</span><br><span class="line">        kwargs.update(&#123;<span class="string">'form'</span>:form&#125;)</span><br><span class="line">        <span class="keyword">return</span> super().get_context_data(**kwargs)</span><br></pre></td></tr></table></figure></li><li><p>경로 : shop &gt; templates &gt; shop &gt; product_detail.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 금액을 10^3 단위로 comma 표시하기 위해 humanize 로드 (settings.py에서 INSTALLED_APPS = [    'django.contrib.humanize',] 추가) --&gt;</span></span><br><span class="line">&#123;% load humanize %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row no-gutters bg-light position-relative mt-3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 position-static p-4 pl-md-0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"mt-0"</span>&gt;</span>&#123;&#123;object.name&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'add_product' object.id %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 해당 금액 10^3 단위로 comma 표시 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.price|intcomma&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Stock<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.stock|intcomma&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Order Available<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.available_order&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                            &#123;&#123;form.quantity.label&#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                            &#123;&#123;form.quantity&#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- 장바구니 이동 버튼 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-outline-success float-right"</span> <span class="attr">value</span>=<span class="string">"Add to Cart"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-장바구니-관련-페이지-경로-설정"><a href="#6-장바구니-관련-페이지-경로-설정" class="headerlink" title="6. 장바구니 관련 페이지 경로 설정"></a>6. 장바구니 관련 페이지 경로 설정</h3><ul><li>경로 : cart &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 장바구니에 상품 추가하는 페이지로 이동하는 경로</span></span><br><span class="line">    path(<span class="string">'add/&lt;int:product_id&gt;/'</span>, add_product, name=<span class="string">'add_product'</span>),</span><br><span class="line">    <span class="comment"># 장바구니에서 상품 삭제하는 view로 이동하는 경로</span></span><br><span class="line">    path(<span class="string">'remove/&lt;int:product_id&gt;/'</span>, remove_product, name=<span class="string">'remove_product'</span>),</span><br><span class="line">    <span class="comment"># 장바구니 상세정보가 조회되는 페이지로 이동하는 경로</span></span><br><span class="line">    path(<span class="string">'detail/'</span>, cart_detail, name=<span class="string">'cart_detail'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-장바구니-페이지-구현"><a href="#7-장바구니-페이지-구현" class="headerlink" title="7. 장바구니 페이지 구현"></a>7. 장바구니 페이지 구현</h3><ul><li><p>경로 : cart &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.http <span class="keyword">import</span> require_POST</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> shop.models <span class="keyword">import</span> Product</span><br><span class="line"><span class="keyword">from</span> .cart <span class="keyword">import</span> Cart</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> AddToCartForm</span><br><span class="line"></span><br><span class="line"><span class="meta">@require_POST</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_product</span><span class="params">(request, product_id)</span>:</span></span><br><span class="line">    product = Product.objects.filter(pk=product_id)</span><br><span class="line">    <span class="keyword">if</span> product.exists():</span><br><span class="line">        cart = Cart(request)</span><br><span class="line">        form = AddToCartForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            cd = form.cleaned_data</span><br><span class="line">            <span class="comment"># filter로 객체 가져와서, 그 객체를 사용할 때는 객체 뒤에 '[0]'을 붙여야 한다.</span></span><br><span class="line">            cart.add(product=product[<span class="number">0</span>], quantity=cd[<span class="string">'quantity'</span>], is_update=cd[<span class="string">'is_update'</span>])</span><br><span class="line">    print(cart.cart.values())</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'cart_detail'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_product</span><span class="params">(request, product_id)</span>:</span></span><br><span class="line">product = Product.objects.filter(pk=product_id)</span><br><span class="line"><span class="keyword">if</span> product.exists():</span><br><span class="line">    cart = Cart(request)</span><br><span class="line">    cart.remove(product[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">'cart_detail'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart_detail</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 장바구니에 담겨 있는 제품 목록 띄우기, 제품 수량 수정, 지우기, 장바구니 비우기 버튼 구현</span></span><br><span class="line">    cart = Cart(request)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> cart:</span><br><span class="line"></span><br><span class="line">        item[<span class="string">'quantity_form'</span>] = AddToCartForm(initial=&#123;<span class="string">'quantity'</span>:item[<span class="string">'quantity'</span>], <span class="string">'is_update'</span>:<span class="literal">True</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    continue_url = <span class="string">'/'</span></span><br><span class="line">    <span class="comment"># 현재 페이지 주소 얻기</span></span><br><span class="line">    <span class="comment"># 1) request.build_absolute_uri('?') : 쿼리스트링 없이 현재 페이지 주소 얻기</span></span><br><span class="line">    <span class="comment"># 2) request.build_absolute_uri() : 쿼리스트링까지 얻어오기</span></span><br><span class="line">    current_url = request.build_absolute_uri(<span class="string">'?'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'HTTP_REFERER'</span> <span class="keyword">in</span> request.META <span class="keyword">and</span> current_url != request.META[<span class="string">'HTTP_REFERER'</span>]:</span><br><span class="line">        <span class="comment"># 이전 페이지로 이동하는 continue_url 설정</span></span><br><span class="line">        continue_url = request.META[<span class="string">'HTTP_REFERER'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'cart/cart_detail.html'</span>, &#123;<span class="string">'cart'</span>:cart, <span class="string">'continue_url'</span>:continue_url&#125;)</span><br></pre></td></tr></table></figure></li><li><p>경로 : cart &gt; templates &gt; cart &gt; cart_detail.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% load humanize %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped mt-3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Unit Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        &#123;% for item in cart %&#125;</span><br><span class="line">            &#123;% with product=item.product %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;forloop.counter&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;product.get_absolute_url&#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;product.image.url&#125;&#125;"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;product.get_absolute_url&#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123;product.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'add_product' product.id %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                    &#123;% csrf_token %&#125;</span><br><span class="line">                    &#123;&#123;item.quantity_form.quantity&#125;&#125;</span><br><span class="line">                    &#123;&#123;item.quantity_form.is_update&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-sm"</span> <span class="attr">value</span>=<span class="string">"Update"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price|intcomma&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.total_price|intcomma&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'remove_product' product.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-outline-warning"</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endwith %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                Total</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>&#123;&#123;cart.get_total_price|intcomma&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 이전 페이지로 이동 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;continue_url&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"float-left btn btn-lg btn-primary"</span>&gt;</span>Continue Shopping<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 결제창으로 이동(결제 기능 포스트 참고) --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'order_create' %&#125;"</span> <span class="attr">class</span>=<span class="string">"float-right btn btn-lg btn-info"</span>&gt;</span>Checkout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/16/190616-django-cart-function/#disqus_thread</comments>
    </item>
    
    <item>
      <title>관리자 사이트 - 결제 정보의 상세정보 조회</title>
      <link>https://chohyeonkeun.github.io/2019/06/15/190615-django-order-detail-page/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/15/190615-django-order-detail-page/</guid>
      <pubDate>Sat, 15 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어 고객이 결제한 상품의 상세정보를 관리자 사이트에서 확인하는 방법에 대해 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어 고객이 결제한 상품의 상세정보를 관리자 사이트에서 확인하는 방법에 대해 알아볼 것이다.</li></ul><a id="more"></a><hr><h3 id="1-관리자-사이트에서-상세-정보로-이동할-링크-설정"><a href="#1-관리자-사이트에서-상세-정보로-이동할-링크-설정" class="headerlink" title="1. 관리자 사이트에서 상세 정보로 이동할 링크 설정"></a>1. 관리자 사이트에서 상세 정보로 이동할 링크 설정</h3><ul><li>경로 : wps_onlineshop &gt; order &gt; admin.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> resolve_url</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_detail</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="comment"># 주문 상세 정보 페이</span></span><br><span class="line">    <span class="comment"># 상세 페이지 링크</span></span><br><span class="line">    url = resolve_url(<span class="string">'admin_order_detail'</span>, obj.id)</span><br><span class="line">    <span class="keyword">return</span> mark_safe(<span class="string">f'&lt;a href="<span class="subst">&#123;url&#125;</span>"&gt;detail&lt;/a&gt;'</span>)</span><br><span class="line">order_detail.short_description = <span class="string">'Detail'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-결제한-상품의-상세-페이지의-경로-설정"><a href="#2-결제한-상품의-상세-페이지의-경로-설정" class="headerlink" title="2. 결제한 상품의 상세 페이지의 경로 설정"></a>2. 결제한 상품의 상세 페이지의 경로 설정</h3><ul><li>경로 : order &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/order/&lt;int:order_id&gt;/'</span>, admin_order_detail, name=<span class="string">'admin_order_detail'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-관리자-사이트에서-detail-클릭-시-나타나는-페이지-작성"><a href="#3-관리자-사이트에서-detail-클릭-시-나타나는-페이지-작성" class="headerlink" title="3. 관리자 사이트에서 detail 클릭 시, 나타나는 페이지 작성"></a>3. 관리자 사이트에서 detail 클릭 시, 나타나는 페이지 작성</h3><ul><li><p>경로 : order &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404</span><br><span class="line"><span class="keyword">from</span> django.contrib.admin.views.decorators <span class="keyword">import</span> staff_member_required</span><br><span class="line"></span><br><span class="line"><span class="meta">@staff_member_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_order_detail</span><span class="params">(request, order_id)</span>:</span></span><br><span class="line">    order = get_object_or_404(Order, id=order_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'order/admin/order_detail.html'</span>, &#123;<span class="string">'order'</span>:order&#125;)</span><br></pre></td></tr></table></figure></li><li><p>경로 : order &gt; templates &gt; order &gt; admin &gt; order_detail.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'admin/base_site.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">    Order &#123;&#123;order.id&#125;&#125; Detail</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 상세 페이지 상단에 브레드크럼 네비게이션 표시(Home &gt; Orders &gt; Order 7 &gt; Detail)  --&gt;</span></span><br><span class="line">&#123;% block breadcrumbs %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"breadcrumbs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'admin:index' %&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &amp;rsaquo;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'admin:order_order_changelist' %&#125;"</span>&gt;</span>Orders<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &amp;rsaquo;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'admin:order_order_change' order.id %&#125;"</span>&gt;</span>Order &#123;&#123;order.id&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &amp;rsaquo;</span><br><span class="line">        Detail</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Order &#123;&#123;order.id&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"object-tools"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 인쇄 버튼 추가 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"window.print();"</span>&gt;</span>Print order<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Created<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.created&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Customer<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.first_name&#125;&#125; &#123;&#123;order.last_name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.address&#125;&#125; &#123;&#123;order.postal_code&#125;&#125; &#123;&#123;order.city&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Total amount<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.get_total_price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Product List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Unit Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    &#123;% for item in order.items.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;forloop.counter&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.product.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.quantity&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.get_item_total_price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/15/190615-django-order-detail-page/#disqus_thread</comments>
    </item>
    
    <item>
      <title>관리자 사이트 - 결제정보 csv 파일로 저장</title>
      <link>https://chohyeonkeun.github.io/2019/06/15/190615-django-order-csv-file/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/15/190615-django-order-csv-file/</guid>
      <pubDate>Sat, 15 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어 고객이 결제한 상품 정보를 csv 파일로 저장하는 방법에 대해 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어 고객이 결제한 상품 정보를 csv 파일로 저장하는 방법에 대해 알아볼 것이다.</li></ul><a id="more"></a><hr><h3 id="관리자-사이트에-csv-파일로-저장할-수-있는-기능-추가"><a href="#관리자-사이트에-csv-파일로-저장할-수-있는-기능-추가" class="headerlink" title="관리자 사이트에 csv 파일로 저장할 수 있는 기능 추가"></a>관리자 사이트에 csv 파일로 저장할 수 있는 기능 추가</h3><ul><li>경로 : order &gt; admin.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv <span class="comment"># csv 파일 생성</span></span><br><span class="line"><span class="keyword">import</span> datetime <span class="comment"># created, updated - datetime객체인지 여부 확인을 위해, string으로 컨버팅</span></span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone <span class="comment"># 장고에서 사용하는 표준 시각을 반영하기 위핸 모듈</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse <span class="comment"># 응답</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_to_csv</span><span class="params">(modeladmin, request, queryset)</span>:</span></span><br><span class="line">    <span class="comment"># modeladmin - modeladmin.model - 선택된 객체의 모델 정보</span></span><br><span class="line">    <span class="comment"># queryset : 선택된 객체</span></span><br><span class="line">    opts = modeladmin.model._meta</span><br><span class="line"></span><br><span class="line">    response = HttpResponse(content_type=<span class="string">'text/csv'</span>)</span><br><span class="line">    current_time =  timezone.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    <span class="comment"># 파일 이름 설정</span></span><br><span class="line">    response[<span class="string">'Content-Disposition'</span>] = <span class="string">f'attachment;filename=<span class="subst">&#123;opts.verbose_name&#125;</span>-<span class="subst">&#123;current_time&#125;</span>.csv'</span></span><br><span class="line">    writer = csv.writer(response)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 모델에서 필드 목록 불러와서 확인</span></span><br><span class="line">    print(opts.get_fields())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 로컬 필드만을 리스트 형태로 fields 변수로 저장하기</span></span><br><span class="line">    fields = [field <span class="keyword">for</span> field <span class="keyword">in</span> opts.get_fields() <span class="keyword">if</span> <span class="keyword">not</span> field.many_to_many <span class="keyword">and</span> <span class="keyword">not</span> field.one_to_many]</span><br><span class="line">    <span class="comment"># 로컬 필드명으로 헤더 만들기</span></span><br><span class="line">    field_headers = [field.verbose_name <span class="keyword">for</span> field <span class="keyword">in</span> fields]</span><br><span class="line">    field_headers += [<span class="string">'product name'</span>, <span class="string">'quantity'</span>, <span class="string">'Unit price'</span>, <span class="string">'Total Price'</span>]</span><br><span class="line">    <span class="comment"># 로컬 필드명의 헤더를 행에 표시하기</span></span><br><span class="line">    writer.writerow(field_headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> queryset:</span><br><span class="line">        data_row = []</span><br><span class="line">        <span class="comment"># getattr(obj, 'items') : obj 객체에 'items'가 있으면 가져온다. (order_item 모델 정보 가져옴)</span></span><br><span class="line">        order_items = getattr(obj, <span class="string">'items'</span>).all()</span><br><span class="line">        <span class="comment"># 제품 마다 중복 출력될 주문 정보 만들기</span></span><br><span class="line">        <span class="keyword">for</span> field <span class="keyword">in</span> fields:</span><br><span class="line">            value = getattr(obj, field.name)</span><br><span class="line">            <span class="comment"># if isinstance(value, datetime.datetime) : value가 datetime.datetime 타입인 경우 </span></span><br><span class="line">            <span class="keyword">if</span> isinstance(value, datetime.datetime):</span><br><span class="line">                value = value.strftime(<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">            data_row.append(value)</span><br><span class="line">        <span class="comment"># 주문 정보와 함께 제품 정보 출력하기</span></span><br><span class="line">        <span class="keyword">for</span> order_item <span class="keyword">in</span> order_items:</span><br><span class="line">            <span class="comment"># 주문 정보에 제품 정보를 껴넣기 위해 리스트 복제</span></span><br><span class="line">            current_data = data_row.copy()</span><br><span class="line">            current_data.append(order_item.product.name)</span><br><span class="line">            current_data.append(order_item.quantity)</span><br><span class="line">            current_data.append(order_item.price)</span><br><span class="line">            current_data.append(order_item.get_item_total_price())</span><br><span class="line">            writer.writerow(current_data)</span><br><span class="line">            <span class="comment"># 메모리 확보를 위해 리스트 삭제</span></span><br><span class="line">            <span class="keyword">del</span>(current_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">export_to_csv.short_description = <span class="string">"Oder Export to CSV"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="참고-결제-시-고객이-입력해야-할-모델-및-주문-정보를-저장할-모델-설정"><a href="#참고-결제-시-고객이-입력해야-할-모델-및-주문-정보를-저장할-모델-설정" class="headerlink" title="참고) 결제 시, 고객이 입력해야 할 모델 및 주문 정보를 저장할 모델 설정"></a>참고) 결제 시, 고객이 입력해야 할 모델 및 주문 정보를 저장할 모델 설정</h3><ul><li>경로 : order &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> shop.models <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결제 시, 고객이 입력해야 할 모델 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 결제 시도 전에 주문을 먼저 생성한다.</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line">    address1 = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    address2 = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    postal_code = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    paid = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-updated'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"Order <span class="subst">&#123;self.id&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 고객이 주문한 정보를 저장할 모델</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 주문 시스템을 구현할 때는 변동될 수 있는 정보는</span></span><br><span class="line">    <span class="comment"># 항상 별도로 복사해서 저장해둔다.</span></span><br><span class="line">    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name=<span class="string">'items'</span>)</span><br><span class="line">    product = models.ForeignKey(Product, on_delete=models.PROTECT, related_name=<span class="string">'ordered_items'</span>)</span><br><span class="line">    price = models.PositiveIntegerField()</span><br><span class="line">    quantity = models.PositiveIntegerField(default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"Order #<span class="subst">&#123;self.order.id&#125;</span> item <span class="subst">&#123;self.product.name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_item_total_price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.quantity</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/15/190615-django-order-csv-file/#disqus_thread</comments>
    </item>
    
    <item>
      <title>관리자 사이트 - 결제 정보의 PDF 파일</title>
      <link>https://chohyeonkeun.github.io/2019/06/14/190614-django-order-pdf-file/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/14/190614-django-order-pdf-file/</guid>
      <pubDate>Fri, 14 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;온라인 쇼핑몰 사이트의 경우, 관리자페이지에서 고객의 결제 정보를 PDF로 저장하는 경우가 있다.&lt;/li&gt;
&lt;li&gt;이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어 관리자 사이트에서 고객이 주문한 상품정보를 PDF 파일로 조회 및 다운로드하는 방법에 대해 다룰 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>온라인 쇼핑몰 사이트의 경우, 관리자페이지에서 고객의 결제 정보를 PDF로 저장하는 경우가 있다.</li><li>이번 포스트에서는 온라인 쇼핑몰 사이트를 예로 들어 관리자 사이트에서 고객이 주문한 상품정보를 PDF 파일로 조회 및 다운로드하는 방법에 대해 다룰 것이다.</li></ul><a id="more"></a><hr><h3 id="1-Weasyprint-설치"><a href="#1-Weasyprint-설치" class="headerlink" title="1. Weasyprint 설치"></a>1. Weasyprint 설치</h3><blockquote><p>ex) wps-onlineshop 프로젝트</p><ul><li>경로 : wps-onlineshop  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install weasyprint</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>설치 안되는 경우, 아래 주소로 접속하여 절차대로 실행<br>  <a href="https://weasyprint.readthedocs.io/en/latest/install.html" target="_blank" rel="noopener">https://weasyprint.readthedocs.io/en/latest/install.html</a></li></ul><h3 id="2-Weasyprint-실행"><a href="#2-Weasyprint-실행" class="headerlink" title="2. Weasyprint 실행"></a>2. Weasyprint 실행</h3><ul><li>경로 : wps-onlineshop  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m weasyprint http://weasyprint.org weasyprint.pdf</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-관리자-사이트에서-PDF-링크-설정"><a href="#3-관리자-사이트에서-PDF-링크-설정" class="headerlink" title="3. 관리자 사이트에서 PDF 링크 설정"></a>3. 관리자 사이트에서 PDF 링크 설정</h3><ul><li>경로 : wps-onlineshop &gt; order &gt; admin.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_pdf</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="comment"># pdf 파일 뷰로 가는 링크</span></span><br><span class="line">    url = resolve_url(<span class="string">'admin_order_pdf'</span>, obj.id)</span><br><span class="line">    <span class="comment"># mark_safe를 사용하여 텍스트를 html 형태로 변환 </span></span><br><span class="line">    <span class="keyword">return</span> mark_safe(<span class="string">f'&lt;a href="<span class="subst">&#123;url&#125;</span>" target="_blank"&gt;pdf&lt;/a&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 관리자페이지에서 링크로 연결되어지는 문구를 'PDF'로 설정</span></span><br><span class="line">order_pdf.short_description = <span class="string">'PDF'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-PDF-클릭-시-이동할-페이지-경로-설정"><a href="#4-PDF-클릭-시-이동할-페이지-경로-설정" class="headerlink" title="4. PDF 클릭 시, 이동할 페이지 경로 설정"></a>4. PDF 클릭 시, 이동할 페이지 경로 설정</h3><ul><li>경로 : order &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/pdf/&lt;int:order_id&gt;/'</span>, admin_order_pdf, name=<span class="string">'admin_order_pdf'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-PDF-파일에서-보여지는-내용-작성"><a href="#5-PDF-파일에서-보여지는-내용-작성" class="headerlink" title="5. PDF 파일에서 보여지는 내용 작성"></a>5. PDF 파일에서 보여지는 내용 작성</h3><ul><li><p>경로 : order &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.admin.views.decorators <span class="keyword">import</span> staff_member_required</span><br><span class="line"><span class="keyword">from</span> django.template.loader <span class="keyword">import</span> render_to_string</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> weasyprint</span><br><span class="line"><span class="comment"># 유저가 로그인했다면, 그 유저가 관리자인지 확인하여 관리자가 아니라면 기존 요청한 주소로 이동되도록 @staff_member_required 사용</span></span><br><span class="line"><span class="meta">@staff_member_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_order_pdf</span><span class="params">(request, order_id)</span>:</span></span><br><span class="line">    order = get_object_or_404(Order, id=order_id)</span><br><span class="line">    html = render_to_string(<span class="string">'order/admin/pdf.html'</span>, &#123;<span class="string">'order'</span>:order&#125;)</span><br><span class="line">    response = HttpResponse(content_type=<span class="string">'application/pdf'</span>)</span><br><span class="line">    response[<span class="string">'Content-Disposition'</span>] = <span class="string">f'filename=invoice_<span class="subst">&#123;order.id&#125;</span>.pdf'</span></span><br><span class="line">    weasyprint.HTML(string=html).write_pdf(response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li><li><p>경로 : order &gt; templates &gt; order &gt; admin &gt; pdf.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WPS Onlineshop<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Invoice no. &#123;&#123; order.id &#125;&#125;<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"secondary"</span>&gt;</span>&#123;&#123; order.created|date:"M d, Y" &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;% if order.paid %&#125;Payment Accepted&#123;% else %&#125;Pending payment&#123;% endif %&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; order.first_name &#125;&#125; &#123;&#123; order.last_name &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; order.email &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; order.address &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; order.postal_code &#125;&#125;, &#123;&#123; order.city &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Product List<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Product<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Cost<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        &#123;% for item in order.items.all %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"row&#123;% cycle '1' '2' %&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.product.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>$&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>&#123;&#123; item.quantity &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>$&#123;&#123; item.get_item_price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">            &#123;% if order.coupon %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"discount"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span>Discount<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>$&#123;&#123; order.discount &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span>Total<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>$&#123;&#123; order.get_total_price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-관리자-사이트에-보여질-항목에-pdf-항목-추가"><a href="#6-관리자-사이트에-보여질-항목에-pdf-항목-추가" class="headerlink" title="6. 관리자 사이트에 보여질 항목에 pdf 항목 추가"></a>6. 관리자 사이트에 보여질 항목에 pdf 항목 추가</h3><ul><li><p>경로 : order &gt; admin.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderOption</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line"><span class="comment"># 관리자 사이트 항목에 'order_pdf' 추가 </span></span><br><span class="line">list_display = [<span class="string">'id'</span>,<span class="string">'first_name'</span>,<span class="string">'last_name'</span>,<span class="string">'email'</span>,<span class="string">'paid'</span>, order_pdf, <span class="string">'created'</span>,<span class="string">'updated'</span>]</span><br><span class="line"></span><br><span class="line">admin.site.register(Order, OrderOption)</span><br></pre></td></tr></table></figure></li><li><p>경로 : order &gt; models.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># order 모델 참고</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line">    address1 = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    address2 = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    postal_code = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span> )</span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    paid = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 결제 시도 전에 주문을 먼저 생성한다.</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-updaed'</span>]</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/14/190614-django-order-pdf-file/#disqus_thread</comments>
    </item>
    
    <item>
      <title>상위, 하위 카테고리 생성 및 기능 구현</title>
      <link>https://chohyeonkeun.github.io/2019/06/13/190613-django-involved-category-function/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/13/190613-django-involved-category-function/</guid>
      <pubDate>Thu, 13 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 상위, 하위 카테고리를 생성하여 카테고리 클릭 시, 해당 페이지로 이동하는 방법에 대해 학습한 내용을 다룰 것이다.&lt;/li&gt;
&lt;li&gt;이 기능에서 가장 중요한 것은, 상위 카테고리 클릭 시, 상위/하위 카테고리에 해당하는 모든 포스트들이 조회가 되어야 한다는 점이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 상위, 하위 카테고리를 생성하여 카테고리 클릭 시, 해당 페이지로 이동하는 방법에 대해 학습한 내용을 다룰 것이다.</li><li>이 기능에서 가장 중요한 것은, 상위 카테고리 클릭 시, 상위/하위 카테고리에 해당하는 모든 포스트들이 조회가 되어야 한다는 점이다.</li></ul><a id="more"></a><hr><h2 id="Category-기능-구현"><a href="#Category-기능-구현" class="headerlink" title="Category 기능 구현"></a>Category 기능 구현</h2><h3 id="1-Category-모델-작성"><a href="#1-Category-모델-작성" class="headerlink" title="1. Category 모델 작성"></a>1. Category 모델 작성</h3><blockquote><p>ex) wps_onlineshop 프로젝트</p></blockquote><ul><li>경로 : shop &gt; models.py   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> resolve_url</span><br><span class="line"><span class="keyword">from</span> ckeditor_uploader.fields <span class="keyword">import</span> RichTextUploadingField</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    parent_category = models.ForeignKey(<span class="string">'self'</span>, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, related_name=<span class="string">'sub_categories'</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    slug = models.SlugField(max_length=<span class="number">200</span>, allow_unicode=<span class="literal">True</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">'category_images/%Y/%m/%d'</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    description = RichTextUploadingField(blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_absolute_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> resolve_url(<span class="string">'product_in_category'</span>, self.slug)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    category = models.ForeignKey(Category, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, related_name=<span class="string">'products'</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    slug = models.SlugField(max_length=<span class="number">200</span>, allow_unicode=<span class="literal">True</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">'product_images/%Y/%m/%d'</span>)</span><br><span class="line">    description = RichTextUploadingField(blank=<span class="literal">True</span>)</span><br><span class="line">    price = models.PositiveIntegerField()</span><br><span class="line">    stock = models.PositiveIntegerField()</span><br><span class="line">    available_display = models.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    available_order = models.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated = models.DateField(auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"["</span>+self.category.name+<span class="string">"] "</span> + self.name</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-카테고리-페이지-경로-작성"><a href="#2-카테고리-페이지-경로-작성" class="headerlink" title="2. 카테고리 페이지 경로 작성"></a>2. 카테고리 페이지 경로 작성</h3><ul><li>경로 : shop &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># url에 특정 카테고리 이름(=slug) 입력 시, 해당 카테고리 포스트로 이동되도록 경로 설정</span></span><br><span class="line">    path(<span class="string">'&lt;slug&gt;/'</span>, ProductList.as_view(), name=<span class="string">'product_in_category'</span>),</span><br><span class="line">    path(<span class="string">''</span>, ProductList.as_view(), name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-카테고리-클릭시-해당-카테고리별-포스트가-조회되도록-코드-작성"><a href="#3-카테고리-클릭시-해당-카테고리별-포스트가-조회되도록-코드-작성" class="headerlink" title="3. 카테고리 클릭시 해당 카테고리별 포스트가 조회되도록 코드 작성"></a>3. 카테고리 클릭시 해당 카테고리별 포스트가 조회되도록 코드 작성</h3><ul><li>경로 : shop &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span><span class="params">(ListView)</span>:</span></span><br><span class="line">model = Product</span><br><span class="line">template_name = <span class="string">'shop/product_list.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="comment"># 상위 카테고리를 고르면 하위 카테고리 제품들이 한꺼번에 출력되도록 변경</span></span><br><span class="line">        queryset = super().get_queryset()</span><br><span class="line"> <span class="comment"># url로 '/&lt;slug&gt;/'을 입력했다면 아래 코드 실행</span></span><br><span class="line"> <span class="keyword">if</span> <span class="string">'slug'</span> <span class="keyword">in</span> self.kwargs:</span><br><span class="line">     category = Category.objects.filter(slug=self.kwargs[<span class="string">'slug'</span>])</span><br><span class="line">     <span class="keyword">if</span> category.exists():</span><br><span class="line">         category |= self.get_category_list(category[<span class="number">0</span>])</span><br><span class="line">         queryset = queryset.filter(category__in=category)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         queryset = queryset.none()</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 하위 카테고리가 있으면, 재귀함수로 더이상 하위 카테고리가 없을 때까지 반복하여 categories에 저장</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_category_list</span><span class="params">(self,category)</span>:</span></span><br><span class="line">        categories = category.sub_categories.all()</span><br><span class="line">        <span class="keyword">for</span> category <span class="keyword">in</span> categories:</span><br><span class="line">            categories |= self.get_category_list(category)</span><br><span class="line">        <span class="keyword">return</span> categories</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-최상위-카테고리를-기준으로-그-하위-카테고리들을-context-processors로-전달하기-위한-코드-작성"><a href="#4-최상위-카테고리를-기준으로-그-하위-카테고리들을-context-processors로-전달하기-위한-코드-작성" class="headerlink" title="4. 최상위 카테고리를 기준으로 그 하위 카테고리들을 context_processors로 전달하기 위한 코드 작성"></a>4. 최상위 카테고리를 기준으로 그 하위 카테고리들을 context_processors로 전달하기 위한 코드 작성</h3><ul><li><p>경로 : shop &gt; context_processors.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> shop.models <span class="keyword">import</span> Category</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">category</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># id 1번을 'Home' 이라는 최상위 카테고리로 모델 저장하여 그 하위 카테고리들을 categories라는 변수로 반환  </span></span><br><span class="line">    categories = Category.objects.filter(parent_category=Category.objects.get(pk=<span class="number">1</span>)).order_by(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'categories'</span>:categories&#125;</span><br></pre></td></tr></table></figure></li><li><p>경로 : config(프로젝트) &gt; settings.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line"><span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line"><span class="comment"># 모든 페이지에 적용될 html이 있다면, 그 위치 설정</span></span><br><span class="line"><span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'layout'</span>)],</span><br><span class="line"><span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line"><span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">    <span class="string">'context_processors'</span>: [</span><br><span class="line">...</span><br><span class="line"><span class="comment"># context_processors.py 작성 시, 이 곳에 해당 위치 입력</span></span><br><span class="line">        <span class="string">'shop.context_processors.category'</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-카테고리가-위치할-header-부분-코드-작성"><a href="#5-카테고리가-위치할-header-부분-코드-작성" class="headerlink" title="5. 카테고리가 위치할 header 부분 코드 작성"></a>5. 카테고리가 위치할 header 부분 코드 작성</h3><ul><li><p>경로 : layout &gt; base.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-expand-lg navbar-light bg-light sticky-top"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggler"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbarTogglerDemo01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">aria-controls</span>=<span class="string">"navbarTogglerDemo01"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-label</span>=<span class="string">"Toggle navigation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"navbar-toggler-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"navbarTogglerDemo01"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar-nav mr-auto mt-2 mt-lg-0"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 카테고리 리스트 들어갈 위치 --&gt;</span> </span><br><span class="line">                &#123;% include 'category_list.html' %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline my-2 my-lg-0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control mr-sm-2"</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span> <span class="attr">aria-label</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-success my-2 my-sm-0"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>경로 : layout &gt; category_list.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 최상위 카테고리의 모든 하위 카테고리들을 for문으로 실행하여 --&gt;</span></span><br><span class="line">&#123;% for category in categories %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 1차 하위 카테고리에 2차 하위 카테고리가 있을 경우 --&gt;</span></span><br><span class="line">    &#123;% if category.sub_categories.all|length %&#125;</span><br><span class="line">        <span class="comment">&lt;!-- bootstrap 프레임워크를 이용하여 dropdown 타입으로 카테고리 표현 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item dropdown"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 카테고리 클릭 시, Category모델에서 설정한 get_absolute_url 페이지로 이동  --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;category.get_absolute_url&#125;&#125;"</span> <span class="attr">id</span>=<span class="string">"menu_category_&#123;&#123;category.id&#125;&#125;"</span> <span class="attr">role</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                &#123;&#123;category.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"menu_category_&#123;&#123;category.id&#125;&#125;"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1차 하위 카테고리의 2차 하위카테고리를 for문으로 순서대로 실행 --&gt;</span></span><br><span class="line">                &#123;% for sub_category in category.sub_categories.all %&#125;</span><br><span class="line">                <span class="comment">&lt;!-- 2차 하위카테고리를 dropdown 타입으로 표시하고, 클릭 시 해당 카테고리에 속하는 포스트가 조회되도록 코드 실행 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;sub_category.get_absolute_url&#125;&#125;"</span>&gt;</span>&#123;&#123;sub_category.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1차 하위 카테고리에 2차 하위 카테고리가 없는 경우 --&gt;</span>    </span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;category.get_absolute_url&#125;&#125;"</span>&gt;</span>&#123;&#123;category.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!-- dropdown 타입 CSS 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .dropdown .dropdown-menu &#123;</span></span><br><span class="line"><span class="undefined">        display:none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .dropdown:hover .dropdown-menu &#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        margin-top: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/13/190613-django-involved-category-function/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Table에서 checkbox 데이터를 ajax로 전달하기</title>
      <link>https://chohyeonkeun.github.io/2019/06/12/190612-django-ajax-checkbox/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/12/190612-django-ajax-checkbox/</guid>
      <pubDate>Wed, 12 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;이번 포스트에서는 테이블에서 checkbox type으로 선택된 특정 열의 데이터를 ajax를 이용하여 서버에 전달하고,&lt;/li&gt;
&lt;li&gt;서버에서 보낸 data를 받아오는 방법에 대해 학습한 것을 정리하였다. &lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>이번 포스트에서는 테이블에서 checkbox type으로 선택된 특정 열의 데이터를 ajax를 이용하여 서버에 전달하고,</li><li>서버에서 보낸 data를 받아오는 방법에 대해 학습한 것을 정리하였다. </li></ul><a id="more"></a><h2 id="Table에서-특정-열의-data를-서버에-ajax로-전달하는-방법"><a href="#Table에서-특정-열의-data를-서버에-ajax로-전달하는-방법" class="headerlink" title="Table에서 특정 열의 data를 서버에 ajax로 전달하는 방법"></a>Table에서 특정 열의 data를 서버에 ajax로 전달하는 방법</h2><h3 id="1-테이블에-저장할-데이터를-모델에-작성"><a href="#1-테이블에-저장할-데이터를-모델에-작성" class="headerlink" title="1. 테이블에 저장할 데이터를 모델에 작성"></a>1. 테이블에 저장할 데이터를 모델에 작성</h3><ul><li>경로 : program(앱) &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.ForeignKey(Category, on_delete=models.CASCADE, related_name=<span class="string">"program_name"</span>)  <span class="comment"># R 데이터 분석</span></span><br><span class="line">    time = models.CharField(max_length=<span class="number">100</span>)  <span class="comment"># 19:00 ~ 24:00</span></span><br><span class="line">    teacher = models.CharField(max_length=<span class="number">20</span>)  <span class="comment"># 박지웅</span></span><br><span class="line">    place = models.CharField(max_length=<span class="number">50</span>)  <span class="comment"># 2호선 성수역 부근 패스캠퍼스 B강의장</span></span><br><span class="line">    enroll = models.ManyToManyField(get_user_model(), related_name=<span class="string">"enrolled_program"</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.teacher</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-화면에-보여질-페이지-작성"><a href="#2-화면에-보여질-페이지-작성" class="headerlink" title="2. 화면에 보여질 페이지 작성"></a>2. 화면에 보여질 페이지 작성</h3><ul><li><p>경로 : program &gt; views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">program_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    programs = Program.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'program/program_list.html'</span>, &#123;<span class="string">'object_list'</span>:programs&#125;)</span><br></pre></td></tr></table></figure></li><li><p>경로 : program &gt; templates &gt; program &gt; program_list.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'category:program_submit' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"program_form"</span> <span class="attr">style</span>=<span class="string">"margin:20px 0 15px 0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- form으로 데이터 전달 시, 반드시 &#123;% csrf_token %&#125; 입력 --&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"width:100%; height:400px; margin-bottom:20px; border-top:solid; border-bottom:solid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>프로그램<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>기간<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>시간<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>강사<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>장소<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>선택<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% for object in object_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>19.06.01 ~ 19.08.31<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.time&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.teacher&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.place&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"programChecked"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;object.id&#125;&#125;"</span> <span class="attr">name</span>=<span class="string">"&#123;&#123;object.name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">style</span>=<span class="string">"float:right"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline btn-primary pull-right"</span> <span class="attr">id</span>=<span class="string">"selectBtn"</span> <span class="attr">value</span>=<span class="string">"신청하기"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-선택한-테이블-열의-데이터를-ajax를-이용하여-서버에-전달"><a href="#3-선택한-테이블-열의-데이터를-ajax를-이용하여-서버에-전달" class="headerlink" title="3. 선택한 테이블 열의 데이터를 ajax를 이용하여 서버에 전달"></a>3. 선택한 테이블 열의 데이터를 ajax를 이용하여 서버에 전달</h2><ul><li>경로 : prgram &gt; templates &gt; program &gt; program_list.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block extra_script %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#program_form'</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- preventDefault로 페이지 이동 못하도록 설정 --&gt;</span></span></span><br><span class="line"><span class="undefined">        e.preventDefault();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 데이터 전달할 열의 데이터의 id를 저장할 리스트 초기화 설정 --&gt;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj_id_list = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- checkbox 체크된 열의 데이터를 순차적으로 obj_id_list에 push --&gt;</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'input[class=programChecked]:checked'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            obj_id_list.push($(<span class="keyword">this</span>).val());</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- form의 action=""에 있는 경로를 url이라는 변수로 저장 --&gt;</span></span></span><br><span class="line"><span class="javascript">        url = $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>);</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- ajax로 데이터 전달 시, 데이터가 리스트 타입일 때 아래 코드 작성 --&gt;</span></span></span><br><span class="line"><span class="javascript">        jQuery.ajaxSettings.traditional = <span class="literal">true</span>;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- ajax로 특정 데이터의 id를 해당 서버에 전달 --&gt;</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            url: url, </span></span><br><span class="line"><span class="javascript">            method: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- 리스트 형태로 보낼 때는 변수 뒤에 '[]' 입력 --&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="string">'obj_id_list[]'</span> : obj_id_list,</span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- form 데이터 보낼 때, 아래 코드 입력 필수 --&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="string">'csrfmiddlewaretoken'</span>:<span class="string">'&#123;&#123;csrf_token&#125;&#125;'</span>,</span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- 서버쪽에서 ajax 요청이 왔는지 확인하기 위해, is_ajax를 True로 전달 --&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="string">'is_ajax'</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 서버쪽으로 데이터 전달 및 수신 성공 시, html 단에서 실행할 코드 입력 --&gt;</span></span></span><br><span class="line"><span class="javascript">        &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 서버로부터 json 형태로 'works'를 데이터로 전달받을 때 --&gt;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(data.works)&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'신청 완료되었습니다.'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> move = confirm(<span class="string">'결제 페이지로 이동하겠습니까?'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(move == <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!-- 사용자가 결제페이지 이동 희망 시, 특정 url 경로로 이동 --&gt;</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.location.href = <span class="string">'&#123;% url '</span>category:my_page<span class="string">' %&#125;'</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- 사용자가 결제페이지 이동 미희망 시, 해당 페이지 새로고침 --&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined">                    location.reload();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-서버에서-ajax로-전달받은-데이터-처리"><a href="#4-서버에서-ajax로-전달받은-데이터-처리" class="headerlink" title="4. 서버에서 ajax로 전달받은 데이터 처리"></a>4. 서버에서 ajax로 전달받은 데이터 처리</h2><ul><li>경로 : program &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">program_submit</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># ajax로 요청했는지 확인하기 위해, is_ajax가 true인지 확인 </span></span><br><span class="line">    is_ajax = request.POST.get(<span class="string">'is_ajax'</span>)</span><br><span class="line">    program_list = Program.objects.all()</span><br><span class="line">    <span class="comment"># ajax 요청 확인 시,</span></span><br><span class="line">    <span class="keyword">if</span> is_ajax:</span><br><span class="line">        <span class="comment"># ajax로 전달받은 데이터를 원하는 변수명으로 저장</span></span><br><span class="line">        obj_id_list = request.POST.getlist(<span class="string">'obj_id_list[]'</span>)</span><br><span class="line">        user = request.user</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 데이터를 요청한 user를 program의 enroll 필드에 저장</span></span><br><span class="line">        <span class="keyword">for</span> obj_id <span class="keyword">in</span> obj_id_list:</span><br><span class="line">            program = Program.objects.get(pk=int(obj_id))</span><br><span class="line">            user = request.user</span><br><span class="line">            <span class="comment"># user를 enroll 필드로 설정한 모든 program 객체를 user_program 변수로 저장</span></span><br><span class="line">            user_program = user.enrolled_program.all()</span><br><span class="line">            <span class="comment"># user_program 객체 중, 요청받은 데이터의 id가 있는 객체를 user_program 변수로 저장</span></span><br><span class="line">            user_program = user_program.filter(id=int(obj_id))</span><br><span class="line">            <span class="comment"># user_program이 존재한다면, program의 enroll 필드에 해당 user 추가</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> user_program.exists():</span><br><span class="line">                program.enroll.add(user)</span><br><span class="line">        <span class="comment"># 데이터를 요청한 페이지에 &#123;'works':True&#125;라는 json 데이터 전달</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'works'</span>:<span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/12/190612-django-ajax-checkbox/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Category 기능 학습</title>
      <link>https://chohyeonkeun.github.io/2019/06/11/190611-django-category-function/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/11/190611-django-category-function/</guid>
      <pubDate>Tue, 11 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Category-기능-학습-목표&quot;&gt;&lt;a href=&quot;#Category-기능-학습-목표&quot; class=&quot;headerlink&quot; title=&quot;Category 기능 학습 목표&quot;&gt;&lt;/a&gt;Category 기능 학습 목표&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;많은 카테고리 기능이 있지만, 여기서는 블로그의 상위 카테고리, 하위 카테고리 기능을 구현해보고자 한다.&lt;/li&gt;
&lt;li&gt;또한, 해당 카테고리의 숫자를 어떻게 표시할 수 있는지를 알아볼 것이다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Category-기능-학습-목표"><a href="#Category-기능-학습-목표" class="headerlink" title="Category 기능 학습 목표"></a>Category 기능 학습 목표</h2><ul><li>많은 카테고리 기능이 있지만, 여기서는 블로그의 상위 카테고리, 하위 카테고리 기능을 구현해보고자 한다.</li><li>또한, 해당 카테고리의 숫자를 어떻게 표시할 수 있는지를 알아볼 것이다.</li></ul><a id="more"></a><h2 id="Category-기능-구현-순서"><a href="#Category-기능-구현-순서" class="headerlink" title="Category 기능 구현 순서"></a>Category 기능 구현 순서</h2><h3 id="1-카테고리-모델-작성-블로그-프로젝트"><a href="#1-카테고리-모델-작성-블로그-프로젝트" class="headerlink" title="1. 카테고리 모델 작성 (블로그 프로젝트)"></a>1. 카테고리 모델 작성 (블로그 프로젝트)</h3><ul><li>경로 : post &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> ckeditor_uploader.fields <span class="keyword">import</span> RichTextUploadingField</span><br><span class="line"><span class="keyword">from</span> tagging.fields <span class="keyword">import</span> TagField</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> resolve_url</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">        slug = models.SlugField(max_length=<span class="number">120</span>, unique=<span class="literal">True</span>, allow_unicode=<span class="literal">True</span>, db_index=<span class="literal">True</span>)</span><br><span class="line">        parent_category = models.ForeignKey(<span class="string">"self"</span>, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, default=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    category = models.ForeignKey(Category, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    slug = models.SlugField(max_length=<span class="number">120</span>, unique=<span class="literal">True</span>, allow_unicode=<span class="literal">True</span>, db_index=<span class="literal">True</span>)</span><br><span class="line">    text = RichTextUploadingField()</span><br><span class="line">    material = models.FileField(upload_to=<span class="string">'material/%Y/%m/%d'</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    tag = TagField(blank=<span class="literal">True</span>)</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title + <span class="string">" at "</span> + self.created.strftime(<span class="string">"%Y-%m-%d"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-context-processors-페이지-작성"><a href="#2-context-processors-페이지-작성" class="headerlink" title="2. context_processors 페이지 작성"></a>2. context_processors 페이지 작성</h3><ul><li>경로 : post &gt; context_processors.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Category</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">category</span><span class="params">(request)</span>:</span></span><br><span class="line">    categories = Category.objects.filter(parent_category=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'categories'</span>:categories&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-카테고리를-보여줄-페이지에-삽입할-카테고리-페이지-html-작성"><a href="#3-카테고리를-보여줄-페이지에-삽입할-카테고리-페이지-html-작성" class="headerlink" title="3. 카테고리를 보여줄 페이지에 삽입할 카테고리 페이지(html) 작성"></a>3. 카테고리를 보여줄 페이지에 삽입할 카테고리 페이지(html) 작성</h3><ul><li><p>경로 : post &gt; templates &gt; post &gt; category_list.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"accordion"</span> <span class="attr">id</span>=<span class="string">"category_list"</span>&gt;</span></span><br><span class="line">    &#123;% for category in categories %&#125;</span><br><span class="line">        &#123;% include 'post/part_category_list.html' %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>경로 : post &gt; templates &gt; post &gt; part_category_list.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> &#123;% <span class="attr">if</span> <span class="attr">parent_id</span> %&#125;<span class="attr">class</span>=<span class="string">"collapse card category_sub_&#123;&#123;parent_id&#125;&#125;"</span> &#123;% <span class="attr">else</span> %&#125;<span class="attr">class</span>=<span class="string">"card"</span> &#123;% <span class="attr">endif</span> %&#125;&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-header"</span> <span class="attr">style</span>=<span class="string">"padding:0;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"mb-0"</span>&gt;</span></span><br><span class="line">              &#123;% if parent_id %&#125;</span><br><span class="line">              <span class="comment">&lt;!-- parent_category를 설정한 카테고리(하위)일 경우 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-link"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;category.get_absolute_url&#125;&#125;"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;category&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-primary badge-pill"</span>&gt;</span></span><br><span class="line">                      <span class="comment">&lt;!-- 해당 카테고리를 갖고 있는 포스트 갯수 표시 --&gt;</span></span><br><span class="line">                      &#123;&#123;category.post_set.count&#125;&#125;</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              &#123;% else %&#125;</span><br><span class="line"><span class="comment">&lt;!-- parent_category를 설정하지 않은 카테고리(상위)일 경우 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-link"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">data-target</span>=<span class="string">".category_sub_&#123;&#123;category.id&#125;&#125;"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;category&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-primary badge-pill"</span>&gt;</span>&#123;&#123;category.category_set.count&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              &#123;% endif %&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- parent_category가 있는 카테고리가 존재한다면 다음 코드 실행 --&gt;</span></span><br><span class="line">  &#123;% if category.category_set %&#125;</span><br><span class="line">      <span class="comment">&lt;!-- category.id를 parent_id로 부르겠다. --&gt;</span></span><br><span class="line">      &#123;% with category.id as parent_id %&#125;</span><br><span class="line">          <span class="comment">&lt;!-- parent_category가 있는 모든 카테고리마다 상기 html 코드 반복 --&gt;</span></span><br><span class="line">          &#123;% for category in category.category_set.all %&#125;</span><br><span class="line">              &#123;% include 'post/part_category_list.html' %&#125;</span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">      &#123;% endwith %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-카테고리-항목을-필요로-하는-html-페이지에서-해당-카테고리-페이지-호출"><a href="#4-카테고리-항목을-필요로-하는-html-페이지에서-해당-카테고리-페이지-호출" class="headerlink" title="4. 카테고리 항목을 필요로 하는 html 페이지에서 해당 카테고리 페이지 호출"></a>4. 카테고리 항목을 필요로 하는 html 페이지에서 해당 카테고리 페이지 호출</h3><ul><li>경로 : post &gt; templates &gt; post &gt; ***.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- category 항목 --&gt;</span></span><br><span class="line">    &#123;% include 'post/category_list.html' %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/11/190611-django-category-function/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Comment 기능 학습</title>
      <link>https://chohyeonkeun.github.io/2019/06/10/190610-django-blog-comment-function/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/10/190610-django-blog-comment-function/</guid>
      <pubDate>Mon, 10 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Comment-기능-구현&quot;&gt;&lt;a href=&quot;#Comment-기능-구현&quot; class=&quot;headerlink&quot; title=&quot;Comment 기능 구현&quot;&gt;&lt;/a&gt;Comment 기능 구현&lt;/h2&gt;&lt;h3 id=&quot;Comment-기능-적용-방법-중-현재까지-공부한-방법으로는-크게-2가지로-나뉠-수-있다&quot;&gt;&lt;a href=&quot;#Comment-기능-적용-방법-중-현재까지-공부한-방법으로는-크게-2가지로-나뉠-수-있다&quot; class=&quot;headerlink&quot; title=&quot;Comment 기능 적용 방법 중, 현재까지 공부한 방법으로는 크게 2가지로 나뉠 수 있다.&quot;&gt;&lt;/a&gt;Comment 기능 적용 방법 중, 현재까지 공부한 방법으로는 크게 2가지로 나뉠 수 있다.&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;특정 앱에 comment 모델 생성하여 구현하는 방법&lt;/li&gt;
&lt;li&gt;comment 앱 추가 생성하여 구현하는 방법&lt;/li&gt;
&lt;li&gt;여기서는 블로그 프로젝트를 예로 들어, comment 앱을 추가 생성하여 댓글 기능 구현 방법을 정리해보았다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Comment-기능-구현"><a href="#Comment-기능-구현" class="headerlink" title="Comment 기능 구현"></a>Comment 기능 구현</h2><h3 id="Comment-기능-적용-방법-중-현재까지-공부한-방법으로는-크게-2가지로-나뉠-수-있다"><a href="#Comment-기능-적용-방법-중-현재까지-공부한-방법으로는-크게-2가지로-나뉠-수-있다" class="headerlink" title="Comment 기능 적용 방법 중, 현재까지 공부한 방법으로는 크게 2가지로 나뉠 수 있다."></a>Comment 기능 적용 방법 중, 현재까지 공부한 방법으로는 크게 2가지로 나뉠 수 있다.</h3><ul><li>특정 앱에 comment 모델 생성하여 구현하는 방법</li><li>comment 앱 추가 생성하여 구현하는 방법</li><li>여기서는 블로그 프로젝트를 예로 들어, comment 앱을 추가 생성하여 댓글 기능 구현 방법을 정리해보았다.</li></ul><a id="more"></a><hr><h2 id="comment-앱-추가-생성하여-구현하는-방법-블로그-프로젝트"><a href="#comment-앱-추가-생성하여-구현하는-방법-블로그-프로젝트" class="headerlink" title="comment 앱 추가 생성하여 구현하는 방법(블로그 프로젝트)"></a>comment 앱 추가 생성하여 구현하는 방법(블로그 프로젝트)</h2><h3 id="1-comment-앱-생성"><a href="#1-comment-앱-생성" class="headerlink" title="1. comment 앱 생성"></a>1. comment 앱 생성</h3><ul><li><code>$ python manage.py startapp comment</code></li></ul><h3 id="2-comment-앱-모델-구현"><a href="#2-comment-앱-모델-구현" class="headerlink" title="2. comment 앱 모델 구현"></a>2. comment 앱 모델 구현</h3><ul><li>경로 : comment &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    author = models.ForeignKey(get_user_model(), on_delete=models.CASCADE, related_name=<span class="string">'my_comments'</span>)</span><br><span class="line"></span><br><span class="line">    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)</span><br><span class="line">    object_id = models.PositiveIntegerField()</span><br><span class="line">    content_object = GenericForeignKey(<span class="string">'content_type'</span>, <span class="string">'object_id'</span>)</span><br><span class="line"></span><br><span class="line">    text = models.CharField(max_length=<span class="number">400</span>)</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-comment-모델-폼-구현"><a href="#3-comment-모델-폼-구현" class="headerlink" title="3. comment 모델 폼 구현"></a>3. comment 모델 폼 구현</h3><ul><li>경로 : comment &gt; forms.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Comment</span><br><span class="line">        fields = [<span class="string">'text'</span>,<span class="string">'content_type'</span>,<span class="string">'object_id'</span>]</span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">'content_type'</span>: forms.HiddenInput(),</span><br><span class="line">            <span class="string">'object_id'</span>:forms.HiddenInput(),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-comment-모델을-관리자페이지에-등록"><a href="#4-comment-모델을-관리자페이지에-등록" class="headerlink" title="4. comment 모델을 관리자페이지에 등록"></a>4. comment 모델을 관리자페이지에 등록</h3><ul><li>경로 : comment &gt; admin.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line">admin.site.register(Comment)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-blog-포스트-상세페이지-view-구현"><a href="#5-blog-포스트-상세페이지-view-구현" class="headerlink" title="5. blog 포스트 상세페이지 view 구현"></a>5. blog 포스트 상세페이지 view 구현</h3><ul><li>경로 : blog &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostDetail</span><span class="params">(DetailView)</span>:</span></span><br><span class="line">    model = Post</span><br><span class="line">    template_name = <span class="string">'post/post_detail.html'</span></span><br><span class="line">    <span class="comment"># 댓글 입력창</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        context_data = super().get_context_data(**kwargs)</span><br><span class="line">        content_type = ContentType.objects.get_for_model(self.model)</span><br><span class="line">        context_data[<span class="string">'form'</span>] = CommentForm(initial=&#123;<span class="string">'content_type'</span>:content_type, <span class="string">'object_id'</span>:self.object.id&#125;)</span><br><span class="line">        <span class="keyword">return</span> context_data</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-blog-포스트-상세페이지-html-구현"><a href="#6-blog-포스트-상세페이지-html-구현" class="headerlink" title="6. blog 포스트 상세페이지 html 구현"></a>6. blog 포스트 상세페이지 html 구현</h3><ul><li>경로 : blog &gt; templates &gt; blog &gt; post_detail.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- comment 앱 &gt; templatetags &gt; comment.py 호출 --&gt;</span></span><br><span class="line">    &#123;% load comment %&#125;</span><br><span class="line">    &#123;% show_comment content_type=object object_id=object.id %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-게시물의-comment-목록-반환해주는-페이지-생성"><a href="#7-게시물의-comment-목록-반환해주는-페이지-생성" class="headerlink" title="7. 게시물의 comment 목록 반환해주는 페이지 생성"></a>7. 게시물의 comment 목록 반환해주는 페이지 생성</h3><ul><li>경로 : comment &gt; templatetags &gt; comment.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template.loader <span class="keyword">import</span> render_to_string</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line">register = Library()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> comment.forms <span class="keyword">import</span> CommentForm</span><br><span class="line"><span class="keyword">from</span> comment.models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag(takes_context=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_comment</span><span class="params">(context, content_type, object_id)</span>:</span></span><br><span class="line">    <span class="comment"># 폼 만들기</span></span><br><span class="line">    content_type = ContentType.objects.get_for_model(content_type)</span><br><span class="line">    form = CommentForm(initial=&#123;<span class="string">'content_type'</span>:content_type, <span class="string">'object_id'</span>:object_id&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 해당 하는 댓글 목록 뽑기</span></span><br><span class="line">    comments = Comment.objects.filter(content_type=content_type, object_id=object_id).all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 템플릿 렌더링</span></span><br><span class="line">    <span class="keyword">return</span> render_to_string(<span class="string">'comment/show_comment.html'</span>,&#123;<span class="string">'form'</span>:form, <span class="string">'object_list'</span>:comments&#125;, request=context[<span class="string">'request'</span>])</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-comment-레이아웃-페이지-생성"><a href="#8-comment-레이아웃-페이지-생성" class="headerlink" title="8. comment 레이아웃 페이지 생성"></a>8. comment 레이아웃 페이지 생성</h3><ul><li>경로 : comment &gt; templates &gt; comment &gt; show_comment.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'add_comment' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">value</span>=<span class="string">"Write"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br><span class="line">&#123;% for object in object_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.text&#125;&#125; &#123;% if object.author == user %&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'delete_comment' object.id %&#125;"</span>&gt;</span>[삭제]<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;% endif %&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.author.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.created&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="9-comment-추가-삭제-페이지로-이동하도록-url-설정"><a href="#9-comment-추가-삭제-페이지로-이동하도록-url-설정" class="headerlink" title="9. comment 추가/삭제 페이지로 이동하도록 url 설정"></a>9. comment 추가/삭제 페이지로 이동하도록 url 설정</h3><ul><li>경로 : comment &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'add_comment/'</span>, add_comment, name=<span class="string">'add_comment'</span>),</span><br><span class="line">    path(<span class="string">'delete_comment/&lt;int:pk&gt;/'</span>, delete_comment, name=<span class="string">'delete_comment'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-comment-추가-삭제-뷰-코드-구현"><a href="#10-comment-추가-삭제-뷰-코드-구현" class="headerlink" title="10. comment 추가/삭제 뷰 코드 구현"></a>10. comment 추가/삭제 뷰 코드 구현</h3><ul><li>경로 : comment &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> CommentForm</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_comment</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.user.is_anonymous:</span><br><span class="line">        comment_form = CommentForm(request.POST)</span><br><span class="line">        comment_form.instance.author_id = request.user.id</span><br><span class="line">        <span class="keyword">if</span> comment_form.is_valid():</span><br><span class="line">            comment_form.save()</span><br><span class="line">            messages.add_message(request, messages.SUCCESS, <span class="string">"댓글을 작성하였습니다."</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messages.add_message(request, messages.WARNING, <span class="string">"Comment Invalid"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        messages.add_message(request, messages.WARNING, <span class="string">"댓글은 로그인 사용자만 남길 수 있습니다."</span>)</span><br><span class="line"></span><br><span class="line">    referer = request.META[<span class="string">'HTTP_REFERER'</span>]</span><br><span class="line">    <span class="keyword">return</span> redirect(referer)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_comment</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    comment = Comment.objects.filter(pk=pk)</span><br><span class="line">    <span class="keyword">if</span> comment.exists() <span class="keyword">and</span> comment[<span class="number">0</span>].author == request.user :</span><br><span class="line">        comment.delete()</span><br><span class="line">        messages.add_message(request, messages.SUCCESS, <span class="string">"댓글을 삭제하였습니다."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        messages.add_message(request, messages.WARNING, <span class="string">"댓글을 삭제할 수 없습니다."</span>)</span><br><span class="line"></span><br><span class="line">    referer = request.META[<span class="string">'HTTP_REFERER'</span>]</span><br><span class="line">    <span class="keyword">return</span> redirect(referer)</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/10/190610-django-blog-comment-function/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tag 기능 학습</title>
      <link>https://chohyeonkeun.github.io/2019/06/09/190609-django-tag-function/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/09/190609-django-tag-function/</guid>
      <pubDate>Sun, 09 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-django-tagging-모듈-설치&quot;&gt;&lt;a href=&quot;#1-django-tagging-모듈-설치&quot; class=&quot;headerlink&quot; title=&quot;1. django-tagging 모듈 설치&quot;&gt;&lt;/a&gt;1. django-tagging 모듈 설치&lt;/h2&gt;&lt;p&gt;&lt;code&gt;$ pip install django-tagging&lt;/code&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-django-tagging-모듈-설치"><a href="#1-django-tagging-모듈-설치" class="headerlink" title="1. django-tagging 모듈 설치"></a>1. django-tagging 모듈 설치</h2><p><code>$ pip install django-tagging</code><br><a id="more"></a></p><h2 id="2-모델에-TagField-설정"><a href="#2-모델에-TagField-설정" class="headerlink" title="2. 모델에 TagField 설정"></a>2. 모델에 TagField 설정</h2><ul><li>경로 : 앱 &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> tagging.fields <span class="keyword">import</span> TagField</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    tag = TagField(blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-INSTALLED-APPS에-‘tagging’-추가"><a href="#3-INSTALLED-APPS에-‘tagging’-추가" class="headerlink" title="3. INSTALLED_APPS에 ‘tagging’ 추가"></a>3. INSTALLED_APPS에 ‘tagging’ 추가</h2><ul><li>경로 : config(프로젝트 명) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">'taggings'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-뷰-코드-작성"><a href="#4-뷰-코드-작성" class="headerlink" title="4. 뷰 코드 작성"></a>4. 뷰 코드 작성</h2><ul><li>경로 : post(앱 이름) &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostDetail</span><span class="params">(DetailView)</span>:</span></span><br><span class="line">    model = Post</span><br><span class="line">    template_name = <span class="string">'post/post_detail.html'</span></span><br><span class="line"><span class="comment"># 해당 태그가 속해있는 객체 리스트로 이동하는 뷰 코드</span></span><br><span class="line"><span class="keyword">from</span> tagging.views <span class="keyword">import</span> TaggedObjectList</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostTaggedObjectList</span><span class="params">(TaggedObjectList)</span>:</span></span><br><span class="line">    model = Post</span><br><span class="line">    allow_empty = <span class="literal">True</span></span><br><span class="line">    template_name = <span class="string">'post/post_list.html'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 모든 태그 리스트 조회할 수 있는 페이지로 이동하는 뷰 코드</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagList</span><span class="params">(TemplateView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'post/tag_list.html'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-템플릿-코드-작성"><a href="#5-템플릿-코드-작성" class="headerlink" title="5. 템플릿 코드 작성"></a>5. 템플릿 코드 작성</h2><ul><li><p>경로 : post &gt; templates &gt; post &gt; tag_list.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Tag List&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% load tagging_tags%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% tag_cloud_for_model post.Post as post_tags with steps=9 min_count=1 distribution=log %&#125;</span><br><span class="line">    &#123;% for tag in post_tags %&#125;</span><br><span class="line">        <span class="comment">&lt;!-- 같은 태그 많을 수록 태그 명 사이즈 증대되게 하는 코드 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'post:post_taggedlist' tag.name %&#125;"</span> <span class="attr">style</span>=<span class="string">"font-size:&#123;&#123;tag.font_size&#125;&#125;em;"</span>&gt;</span>&#123;&#123;tag&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>경로 : post &gt; templates &gt; post &gt; post_detail.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">&#123;&#123;object.title|truncatechars:15&#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row mt-3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>&#123;&#123;object.title&#125;&#125; - &#123;&#123;object.created&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;object.text|safe&#125;&#125;</span><br><span class="line">        <span class="comment">&lt;!-- 커스텀 Tag값을 호출하기 위해 해당 모듈 호출 --&gt;</span></span><br><span class="line">        &#123;% load tagging_tags %&#125;</span><br><span class="line">        <span class="comment">&lt;!-- object 객체에 포함된 tag들을 추출하여 그 객체를 tags로 변경 --&gt;</span></span><br><span class="line">        &#123;% tags_for_object object as tags %&#125;</span><br><span class="line">        &#123;% if tags %&#125;</span><br><span class="line">            Tags :</span><br><span class="line">            &#123;% for tag in tags %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'post:post_taggedlist' tag.name %&#125;"</span>&gt;</span>#&#123;&#123;tag.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/09/190609-django-tag-function/#disqus_thread</comments>
    </item>
    
    <item>
      <title>커스텀 템플릿 태그 생성</title>
      <link>https://chohyeonkeun.github.io/2019/06/08/190608-django-custom-templatetags/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/08/190608-django-custom-templatetags/</guid>
      <pubDate>Sat, 08 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;템플릿 문법을 사용하다보면 필요한 기능이 없는 경우가 있다.&lt;/li&gt;
&lt;li&gt;이럴 때 직접 커스텀 탬플릿 태그를 만들어 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>템플릿 문법을 사용하다보면 필요한 기능이 없는 경우가 있다.</li><li>이럴 때 직접 커스텀 탬플릿 태그를 만들어 사용할 수 있다.</li></ul><a id="more"></a><h2 id="커스텀-탬플릿-태그-생성-방법"><a href="#커스텀-탬플릿-태그-생성-방법" class="headerlink" title="커스텀 탬플릿 태그 생성 방법"></a>커스텀 탬플릿 태그 생성 방법</h2><h3 id="1-templatetags-폴더-생성"><a href="#1-templatetags-폴더-생성" class="headerlink" title="1. templatetags 폴더 생성"></a>1. templatetags 폴더 생성</h3><ul><li>앱 &gt; templatetags 폴더</li></ul><h3 id="2-원하는-기능을-작성할-파일-생성-및-코드-작성"><a href="#2-원하는-기능을-작성할-파일-생성-및-코드-작성" class="headerlink" title="2. 원하는 기능을 작성할 파일 생성 및 코드 작성"></a>2. 원하는 기능을 작성할 파일 생성 및 코드 작성</h3><ul><li>앱 &gt; templatetags &gt; blog.py</li><li>템플릿 라이브러리 변수 생성  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-필터-등록할-때는-아래와-같이-코드-작성"><a href="#3-필터-등록할-때는-아래와-같이-코드-작성" class="headerlink" title="3. 필터 등록할 때는 아래와 같이 코드 작성"></a>3. 필터 등록할 때는 아래와 같이 코드 작성</h3><ul><li><p>앱 &gt; templatetags &gt; blog.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_two</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>등록한 필터는 아래와 같이 사용</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load blog %&#125;</span><br><span class="line">&#123;&#123;변수|add_two&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-태그-등록-시-아래와-같이-코드-작성"><a href="#4-태그-등록-시-아래와-같이-코드-작성" class="headerlink" title="4. 태그 등록 시, 아래와 같이 코드 작성"></a>4. 태그 등록 시, 아래와 같이 코드 작성</h3><ul><li><p>앱 &gt; templatetags &gt; blog.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_template</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_to_string(<span class="string">'blog/test.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>등록한 태그는 아래와 같이 사용</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load blog %&#125;</span><br><span class="line">&#123;% print_template %&#125;</span><br></pre></td></tr></table></figure></li><li><p>태그 실행 결과를 변수로 지정하려면 as 키워드 사용</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load blog %&#125;</span><br><span class="line">&#123;% print_template as test %&#125;</span><br><span class="line">&#123;&#123;test&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-추가-인자가-있는-필터는-아래와-같이-코드-작성"><a href="#5-추가-인자가-있는-필터는-아래와-같이-코드-작성" class="headerlink" title="5. 추가 인자가 있는 필터는 아래와 같이 코드 작성"></a>5. 추가 인자가 있는 필터는 아래와 같이 코드 작성</h3><ul><li><p>앱 &gt; templatetags &gt; blog.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_append</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> left + <span class="string">"-"</span> + right</span><br></pre></td></tr></table></figure></li><li><p>해당 필터는 아래와 같이 사용</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load blog %&#125;</span><br><span class="line">&#123;&#123;&apos;string1&apos;|string_append:&apos;string2&apos;&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/08/190608-django-custom-templatetags/#disqus_thread</comments>
    </item>
    
    <item>
      <title>멀티 데이터베이스 사용</title>
      <link>https://chohyeonkeun.github.io/2019/06/07/190607-django-multi-database/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/07/190607-django-multi-database/</guid>
      <pubDate>Fri, 07 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;장고의-멀티데이터베이스-기능&quot;&gt;&lt;a href=&quot;#장고의-멀티데이터베이스-기능&quot; class=&quot;headerlink&quot; title=&quot;장고의 멀티데이터베이스 기능&quot;&gt;&lt;/a&gt;장고의 멀티데이터베이스 기능&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;인프라를 스케일링할 때 데이터베이스도 역시 스케일링을 고려해야 한다.&lt;/li&gt;
&lt;li&gt;데이터베이스는 동기화 문제가 발생하므로 웹 서버 인스턴스처럼 아웃 스케일링 방식을 쉽게 사용할 수 없으나,&lt;/li&gt;
&lt;li&gt;대부분의 데이터베이스 시스템은 마스터와 읽기전용 슬레이브 데이터베이스 형태를 지원해준다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="장고의-멀티데이터베이스-기능"><a href="#장고의-멀티데이터베이스-기능" class="headerlink" title="장고의 멀티데이터베이스 기능"></a>장고의 멀티데이터베이스 기능</h2><hr><ul><li>인프라를 스케일링할 때 데이터베이스도 역시 스케일링을 고려해야 한다.</li><li>데이터베이스는 동기화 문제가 발생하므로 웹 서버 인스턴스처럼 아웃 스케일링 방식을 쉽게 사용할 수 없으나,</li><li>대부분의 데이터베이스 시스템은 마스터와 읽기전용 슬레이브 데이터베이스 형태를 지원해준다.</li></ul><a id="more"></a><ul><li>아마존 인프라를 사용하면 이것도 쉽게 사용할 수 있다.</li><li>마스터 베이스에 읽기전용 서버를 추가하면 각각의 데이터베이스를 언제 사용할지 결정해야 한다.</li><li>보통은 쓰기 쿼리와 읽기 쿼리를 구분해서 어느 데이터베이스를 사용할지 결정하지만,</li><li>장고에서는 ORM을 사용하므로 쿼리를 구분해서 분기를 할 수 없다.</li><li>이를 위해 장고는 멀티데이터베이스를 위한 라우터 기법을 제공한다.</li><li>멀티데이터베이스를 사용하면 데이터베이스의 병목 현상을 줄일 수 있다.</li><li>라우팅 기법을 응용하면 모델별로도 다른 데이터베이스를 사용하게 할 수 있다.</li><li>특히 다른 서비스에서 갖고 있는 유저 정보를 공유해서 활용하고 싶다면</li><li>데이터베이스 라우팅을 사용하여 해당 정보를 기준으로 사용할 수 있다.</li><li>아래 절차를 따라 멀티 데이터베이스를 셋팅하고 라우팅을 해보자.</li></ul><h2 id="멀티데이터베이스-사용-방법"><a href="#멀티데이터베이스-사용-방법" class="headerlink" title="멀티데이터베이스 사용 방법"></a>멀티데이터베이스 사용 방법</h2><hr><h3 id="1-AWS-gt-데이터베이스-생성"><a href="#1-AWS-gt-데이터베이스-생성" class="headerlink" title="1. AWS &gt; 데이터베이스 생성"></a>1. AWS &gt; 데이터베이스 생성</h3><ul><li>새로운 PostgreSQL 데이터베이스 생성<ul><li>AWS &gt; RDS 에서 새 인스턴스 만들기에서 PostgreSQL 선택하고 [다음 단계] 버튼 클릭</li></ul></li><li>10.x 버전 선택(PostgreSQL 9.3.5 이상부터 읽기 전용 복제본 사용 가능)</li><li>용량은 20Gib 정도로 설정하고 관리자 계정 정보 입력 후 [다음 단계] 버튼 클릭</li><li>퍼블릭 액세스 가능성 ‘예’로 선택</li><li>데이터베이스 옵션에서 데이터베이스 이름 입력</li><li>멀티데이터베이스를 위해 읽기 전용 복제본을 만들려면 백업 기능이 활성화되어 있어야 한다.</li><li>백업 보존 기간을 1일 이상으로 설정</li><li>성능 개선 도우미는 비활성화(필수 옵션 아님)</li><li>유지 관리 옵션도 적절히 선택하고 [데이터베이스 생성] 버튼 클릭</li><li>인스턴스 생성이 완료되면 데이터베이스 셋팅 진행하고 migrate 명령 실행</li></ul><h3 id="2-데이터베이스-복제본-생성"><a href="#2-데이터베이스-복제본-생성" class="headerlink" title="2. 데이터베이스 복제본 생성"></a>2. 데이터베이스 복제본 생성</h3><ul><li>인스턴스 목록에서 원하는 데이터베이스를 선택하고 상단 메뉴에서 작업 &gt; 읽기 복제본 생성 클릭</li><li>읽기 전용 복제본 생성 창이 나타나면 퍼블릭 액세스 가능 부분에서 ‘예’를 선택</li><li>설정 부분의 데이터베이스 식별자를 적절히 입력</li><li>[읽기 전용 복제본 생성] 버튼 클릭</li><li>상기 과정 반복하여 한개 복제본 추가 생성</li></ul><h3 id="3-장고-설정부분에-데이터베이스-정보-추가"><a href="#3-장고-설정부분에-데이터베이스-정보-추가" class="headerlink" title="3. 장고 설정부분에 데이터베이스 정보 추가"></a>3. 장고 설정부분에 데이터베이스 정보 추가</h3><ul><li>프로젝트 &gt; settings.py에 데이터베이스 정보 추가<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'DB 이름'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'사용자 아이디'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'비밀번호'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'엔드포인트'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'read1'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'DB 이름'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'사용자 아이디'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'비밀번호'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'엔드포인트'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'read2'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'DB 이름'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'사용자 아이디'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'비밀번호'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'엔드포인트'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-라우트-클래스-생성하여-추가"><a href="#4-라우트-클래스-생성하여-추가" class="headerlink" title="4. 라우트 클래스 생성하여 추가"></a>4. 라우트 클래스 생성하여 추가</h3><ul><li>데이터베이스 정보 추가했으나, 자동으로 쓰기, 읽기 데이터베이스를 분기하여 사용하는 것이 아니고, 라우터 클래스를 만들어서 추가해야 한다.</li><li>프로젝트 &gt; master_slave_router.py 파일 추가 및 아래 코드 입력  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MasterSlaveRouter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_read</span><span class="params">(self, model, **hints)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> random.choice([<span class="string">'read1'</span>, <span class="string">'read2'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_write</span><span class="params">(self,model,**hints)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'default'</span>  <span class="comment"># return None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_relation</span><span class="params">(self,obj1,obj2,**hints)</span>:</span></span><br><span class="line">        db_list = (<span class="string">'default'</span>, <span class="string">'read1'</span>, <span class="string">'read2'</span>)</span><br><span class="line">        <span class="keyword">if</span> obj1._state.db <span class="keyword">in</span> db_list <span class="keyword">and</span> obj2._state.db <span class="keyword">in</span> db_list:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_migrate</span><span class="params">(self,db,app_label,model_name=None,**hints)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-생성한-라우터를-장고-설정부분에-추가"><a href="#5-생성한-라우터를-장고-설정부분에-추가" class="headerlink" title="5. 생성한 라우터를 장고 설정부분에 추가"></a>5. 생성한 라우터를 장고 설정부분에 추가</h3><ul><li>프로젝트 &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_ROUTERS = [</span><br><span class="line"><span class="string">'config.master_slave_router.MasterSlaveRouter'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-해당-기능이-잘-동작하는지-django-debug-toolbar-설치하여-확인"><a href="#6-해당-기능이-잘-동작하는지-django-debug-toolbar-설치하여-확인" class="headerlink" title="6. 해당 기능이 잘 동작하는지 django-debug-toolbar 설치하여 확인"></a>6. 해당 기능이 잘 동작하는지 django-debug-toolbar 설치하여 확인</h3><ul><li>관리자페이지 &gt; debug toolbar의 SQL 선택<ul><li>사용하는 데이터베이스 확인 가능</li></ul></li></ul><hr><blockquote><h2 id="다른-서비스에서-갖고-있는-유저-정보를-공유해서-활용하고-싶은-경우"><a href="#다른-서비스에서-갖고-있는-유저-정보를-공유해서-활용하고-싶은-경우" class="headerlink" title="다른 서비스에서 갖고 있는 유저 정보를 공유해서 활용하고 싶은 경우"></a>다른 서비스에서 갖고 있는 유저 정보를 공유해서 활용하고 싶은 경우</h2></blockquote><h3 id="1-유저-정보를-담고-있는-데이터베이스-정보를-장고-설정부분에-추가"><a href="#1-유저-정보를-담고-있는-데이터베이스-정보를-장고-설정부분에-추가" class="headerlink" title="1. 유저 정보를 담고 있는 데이터베이스 정보를 장고 설정부분에 추가"></a>1. 유저 정보를 담고 있는 데이터베이스 정보를 장고 설정부분에 추가</h3><ul><li>프로젝트 &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">DATABASE = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line"><span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line"><span class="string">'NAME'</span>: <span class="string">'DB 이름'</span>,</span><br><span class="line"><span class="string">'USER'</span>: <span class="string">'사용자 아이디'</span>,</span><br><span class="line"><span class="string">'PASSWORD'</span>: <span class="string">'비밀번호'</span>,</span><br><span class="line"><span class="string">'HOST'</span>: <span class="string">'엔드포인트'</span>,</span><br><span class="line"><span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'read1'</span>: &#123;</span><br><span class="line"><span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line"><span class="string">'NAME'</span>: <span class="string">'DB 이름'</span>,</span><br><span class="line"><span class="string">'USER'</span>: <span class="string">'사용자 아이디'</span>,</span><br><span class="line"><span class="string">'PASSWORD'</span>: <span class="string">'비밀번호'</span>,</span><br><span class="line"><span class="string">'HOST'</span>: <span class="string">'엔드포인트'</span>,</span><br><span class="line"><span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'read2'</span>: &#123;</span><br><span class="line"><span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line"><span class="string">'NAME'</span>: <span class="string">'DB 이름'</span>,</span><br><span class="line"><span class="string">'USER'</span>: <span class="string">'사용자 아이디'</span>,</span><br><span class="line"><span class="string">'PASSWORD'</span>: <span class="string">'비밀번호'</span>,</span><br><span class="line"><span class="string">'HOST'</span>: <span class="string">'엔드포인트'</span>,</span><br><span class="line"><span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'user'</span>: &#123;</span><br><span class="line"><span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line"><span class="string">'NAME'</span>: <span class="string">'DB 이름'</span>,</span><br><span class="line"><span class="string">'USER'</span>: <span class="string">'사용자 아이디'</span>,</span><br><span class="line"><span class="string">'PASSWORD'</span>: <span class="string">'비밀번호'</span>,</span><br><span class="line"><span class="string">'HOST'</span>: <span class="string">'엔드포인트'</span>,</span><br><span class="line"><span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-유저-정보-데이터베이스를-위한-라우터-추가"><a href="#2-유저-정보-데이터베이스를-위한-라우터-추가" class="headerlink" title="2. 유저 정보 데이터베이스를 위한 라우터 추가"></a>2. 유저 정보 데이터베이스를 위한 라우터 추가</h3><ul><li>프로젝트 &gt; user_router.py 파일 추가 및 아래 코드 입력  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRouter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_read</span><span class="params">(self,model,**hints)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> model._meta.model_name == <span class="string">'user'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'user'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_write</span><span class="params">(self,model,**hints)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> model._meta.model_name == <span class="string">'user'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'user'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_relation</span><span class="params">(self,obj1,obj2,**hints)</span>:</span></span><br><span class="line">        db_list = settings.DATABASES.keys()</span><br><span class="line">        <span class="keyword">if</span> obj1._state.db <span class="keyword">in</span> db_list <span class="keyword">and</span> obj2._state.db <span class="keyword">in</span> db_list:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_migrate</span><span class="params">(self,db,app_label,model_name=None,**hints)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-장고-설정부분에-라우터-추가"><a href="#3-장고-설정부분에-라우터-추가" class="headerlink" title="3. 장고 설정부분에 라우터 추가"></a>3. 장고 설정부분에 라우터 추가</h3><ul><li>프로젝트 &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_ROUTERS = [</span><br><span class="line">    <span class="string">'config.user_router.UserRouter'</span>,  <span class="comment"># 라우터는 입력한 순서대로 실행된다.</span></span><br><span class="line">    <span class="string">'config.master_slave_router.MasterSlaveRouter'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-관리자-페이지의-유저-모델-관리-페이지에서-쿼리-잘-실행되는지-확인"><a href="#4-관리자-페이지의-유저-모델-관리-페이지에서-쿼리-잘-실행되는지-확인" class="headerlink" title="4. 관리자 페이지의 유저 모델 관리 페이지에서 쿼리 잘 실행되는지 확인"></a>4. 관리자 페이지의 유저 모델 관리 페이지에서 쿼리 잘 실행되는지 확인</h3>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/07/190607-django-multi-database/#disqus_thread</comments>
    </item>
    
    <item>
      <title>EC2에 장고 배포하기</title>
      <link>https://chohyeonkeun.github.io/2019/06/06/190606-django-EC2-django-deploy/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/06/190606-django-EC2-django-deploy/</guid>
      <pubDate>Thu, 06 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;EC2는 아마존 인프라에서 사용되는 범용 서버 컴퓨팅 서비스이다.&lt;/li&gt;
&lt;li&gt;EC2를 이용하면 다양한 서버를 운영할 수 있지만,&lt;/li&gt;
&lt;li&gt;장고 애플리케이션을 구동하기 위해서는 웹 서버가 필요하므로 EC2로 장고 웹 서버를 설정하고 배포하는 방법을 아래와 같은 순서로 진행하겠다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>EC2는 아마존 인프라에서 사용되는 범용 서버 컴퓨팅 서비스이다.</li><li>EC2를 이용하면 다양한 서버를 운영할 수 있지만,</li><li>장고 애플리케이션을 구동하기 위해서는 웹 서버가 필요하므로 EC2로 장고 웹 서버를 설정하고 배포하는 방법을 아래와 같은 순서로 진행하겠다.</li></ul><a id="more"></a><h3 id="1-AWS-서비스-gt-EC2-로-이동하여-인스턴스-시작-버튼-클릭"><a href="#1-AWS-서비스-gt-EC2-로-이동하여-인스턴스-시작-버튼-클릭" class="headerlink" title="1. AWS 서비스 &gt; EC2 로 이동하여 [인스턴스 시작] 버튼 클릭"></a>1. AWS 서비스 &gt; EC2 로 이동하여 [인스턴스 시작] 버튼 클릭</h3><h3 id="2-이미지-목록에서-Ubuntu-server-18-04-선택-버튼-클릭"><a href="#2-이미지-목록에서-Ubuntu-server-18-04-선택-버튼-클릭" class="headerlink" title="2. 이미지 목록에서 Ubuntu server 18.04 [선택] 버튼 클릭"></a>2. 이미지 목록에서 Ubuntu server 18.04 [선택] 버튼 클릭</h3><h3 id="3-인스턴스-타입은-t2-micro-선택"><a href="#3-인스턴스-타입은-t2-micro-선택" class="headerlink" title="3. 인스턴스 타입은 t2.micro 선택"></a>3. 인스턴스 타입은 t2.micro 선택</h3><ul><li>서비스 상황에 따라 더 높은 사양 선택 가능</li><li>선택 후, [다음: 인스턴스 세부 정보 구성] 버튼 클릭</li></ul><h3 id="4-인스턴스-구성에서는-특별히-변경사항-없으므로-다음-스토리지-추가-버튼-클릭"><a href="#4-인스턴스-구성에서는-특별히-변경사항-없으므로-다음-스토리지-추가-버튼-클릭" class="headerlink" title="4. 인스턴스 구성에서는 특별히 변경사항 없으므로, [다음: 스토리지 추가] 버튼 클릭"></a>4. 인스턴스 구성에서는 특별히 변경사항 없으므로, [다음: 스토리지 추가] 버튼 클릭</h3><h3 id="5-스토리지-크기-적절히-설정-gt-다음-태그-추가-버튼-클릭"><a href="#5-스토리지-크기-적절히-설정-gt-다음-태그-추가-버튼-클릭" class="headerlink" title="5. 스토리지 크기 적절히 설정 &gt; [다음: 태그 추가] 버튼 클릭"></a>5. 스토리지 크기 적절히 설정 &gt; [다음: 태그 추가] 버튼 클릭</h3><h3 id="6-태그는-특별히-설정할-것이-없으면-다음-보안-그룹-구성-버튼-클릭"><a href="#6-태그는-특별히-설정할-것이-없으면-다음-보안-그룹-구성-버튼-클릭" class="headerlink" title="6. 태그는 특별히 설정할 것이 없으면 [다음: 보안 그룹 구성] 버튼 클릭"></a>6. 태그는 특별히 설정할 것이 없으면 [다음: 보안 그룹 구성] 버튼 클릭</h3><h3 id="7-새-보안-그룹-생성-선택-gt-정보-입력-gt-검토-및-시작-버튼-클릭"><a href="#7-새-보안-그룹-생성-선택-gt-정보-입력-gt-검토-및-시작-버튼-클릭" class="headerlink" title="7. [새 보안 그룹 생성] 선택 &gt; 정보 입력 &gt; [검토 및 시작] 버튼 클릭"></a>7. [새 보안 그룹 생성] 선택 &gt; 정보 입력 &gt; [검토 및 시작] 버튼 클릭</h3><ul><li>ELB에 넣을 인스턴스 생성하는 경우라면, 기존 인스턴스와 같은 그룹 선택</li></ul><h3 id="8-인스턴스-정보-검토-gt-시작하기-버튼-클릭"><a href="#8-인스턴스-정보-검토-gt-시작하기-버튼-클릭" class="headerlink" title="8. 인스턴스 정보 검토 &gt; [시작하기] 버튼 클릭"></a>8. 인스턴스 정보 검토 &gt; [시작하기] 버튼 클릭</h3><h3 id="9-인스턴스-접속하기-위한-키-파일-생성"><a href="#9-인스턴스-접속하기-위한-키-파일-생성" class="headerlink" title="9. 인스턴스 접속하기 위한 키 파일 생성"></a>9. 인스턴스 접속하기 위한 키 파일 생성</h3><ul><li>[새 키 페어 생성] 선택</li><li>키 페어 이름 입력</li><li>[키 페어 다운로드] 버튼 클릭</li></ul><h3 id="10-파일-다운로드-이후-활성화되는-인스턴스-시작-버튼-클릭"><a href="#10-파일-다운로드-이후-활성화되는-인스턴스-시작-버튼-클릭" class="headerlink" title="10. 파일 다운로드 이후 활성화되는 [인스턴스 시작] 버튼 클릭"></a>10. 파일 다운로드 이후 활성화되는 [인스턴스 시작] 버튼 클릭</h3><h3 id="11-인스턴스-시작-중-메시지-나타나면-인스턴스-보기-버튼-클릭"><a href="#11-인스턴스-시작-중-메시지-나타나면-인스턴스-보기-버튼-클릭" class="headerlink" title="11. 인스턴스 시작 중 메시지 나타나면 [인스턴스 보기] 버튼 클릭"></a>11. 인스턴스 시작 중 메시지 나타나면 [인스턴스 보기] 버튼 클릭</h3><h3 id="12-생성된-인스턴스-목록-확인하고-알아보기-쉽게-이름-설정"><a href="#12-생성된-인스턴스-목록-확인하고-알아보기-쉽게-이름-설정" class="headerlink" title="12. 생성된 인스턴스 목록 확인하고 알아보기 쉽게 이름 설정"></a>12. 생성된 인스턴스 목록 확인하고 알아보기 쉽게 이름 설정</h3><h3 id="13-다운로드-받은-키-페어-파일의-권한을-400으로-변경"><a href="#13-다운로드-받은-키-페어-파일의-권한을-400으로-변경" class="headerlink" title="13. 다운로드 받은 키 페어 파일의 권한을 400으로 변경"></a>13. 다운로드 받은 키 페어 파일의 권한을 400으로 변경</h3><p><code>$ chmod 400 [키 페어 파일 경로]</code></p><h3 id="14-키-페어-파일을-ssh-폴더로-이동-필수-아님"><a href="#14-키-페어-파일을-ssh-폴더로-이동-필수-아님" class="headerlink" title="14. 키 페어 파일을 .ssh 폴더로 이동(*필수 아님)"></a>14. 키 페어 파일을 .ssh 폴더로 이동(*필수 아님)</h3><p><code>$ mv [키 페어 파일 경로] ~/.ssh/</code></p><h3 id="15-키-페어-파일-이용해-EC2-인스턴스에-ssh-접속"><a href="#15-키-페어-파일-이용해-EC2-인스턴스에-ssh-접속" class="headerlink" title="15. 키 페어 파일 이용해 EC2 인스턴스에 ssh 접속"></a>15. 키 페어 파일 이용해 EC2 인스턴스에 ssh 접속</h3><p><code>$ ssh -i [키 페어 파일 경로] [계정]@[EC2 접속 주소]</code></p><h3 id="16-EC2-서버-접속-후-기존-패키지-업데이트"><a href="#16-EC2-서버-접속-후-기존-패키지-업데이트" class="headerlink" title="16. EC2 서버 접속 후, 기존 패키지 업데이트"></a>16. EC2 서버 접속 후, 기존 패키지 업데이트</h3><p><code>$ sudo apt-get update</code></p><h3 id="17-Nginx-설치"><a href="#17-Nginx-설치" class="headerlink" title="17. Nginx 설치"></a>17. Nginx 설치</h3><p><code>$ sudo apt-get install nginx</code></p><h3 id="18-Vim-설치"><a href="#18-Vim-설치" class="headerlink" title="18. Vim 설치"></a>18. Vim 설치</h3><p><code>$ sudo apt-get install vim</code></p><h3 id="19-파이썬-관련-패키지-설치"><a href="#19-파이썬-관련-패키지-설치" class="headerlink" title="19. 파이썬 관련 패키지 설치"></a>19. 파이썬 관련 패키지 설치</h3><p><code>$ sudo apt-get install python3-dev python3-venv python3-pip</code></p><h3 id="20-django-애플리케이션-구동용-계정-생성"><a href="#20-django-애플리케이션-구동용-계정-생성" class="headerlink" title="20. django 애플리케이션 구동용 계정 생성"></a>20. django 애플리케이션 구동용 계정 생성</h3><p><code>$ sudo useradd -b /home -m -s /bin/bash django</code></p><h3 id="21-www-data-그룹에-django-유저-추가"><a href="#21-www-data-그룹에-django-유저-추가" class="headerlink" title="21. www-data 그룹에 django 유저 추가"></a>21. www-data 그룹에 django 유저 추가</h3><p><code>$ sudo usermod -a -G www-data django</code></p><h3 id="22-www-data-그룹에-ubuntu-유저-추가"><a href="#22-www-data-그룹에-ubuntu-유저-추가" class="headerlink" title="22. www-data 그룹에 ubuntu 유저 추가"></a>22. www-data 그룹에 ubuntu 유저 추가</h3><p><code>sudo usermod -a -G www-data ubuntu</code></p><ul><li>FTP로 업로드할 때 ubuntu 계정 사용하므로,<br>-애플리케이션 소스코드 폴더에 쓰기 권한 얻기 위해 wwww-data 그룹에 ubuntu 유저 추가</li></ul><h3 id="23-소스코드-업로드-위한-폴더-생성"><a href="#23-소스코드-업로드-위한-폴더-생성" class="headerlink" title="23. 소스코드 업로드 위한 폴더 생성"></a>23. 소스코드 업로드 위한 폴더 생성</h3><p><code>$ sudo mkdir -p /var/www/django</code></p><h3 id="24-UWSGI-모듈을-위한-폴더-생성"><a href="#24-UWSGI-모듈을-위한-폴더-생성" class="headerlink" title="24. UWSGI 모듈을 위한 폴더 생성"></a>24. UWSGI 모듈을 위한 폴더 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /var/www/django/run</span><br><span class="line">$ sudo mkdir /var/www/django/logs</span><br><span class="line">$ sudo mkdir /var/www/django/ini</span><br></pre></td></tr></table></figure><h3 id="25-uwsgi-설정-파일-생성"><a href="#25-uwsgi-설정-파일-생성" class="headerlink" title="25. uwsgi 설정 파일 생성"></a>25. uwsgi 설정 파일 생성</h3><p><code>$ sudo vim /var/www/django/ini/uwsgi.ini</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">uid = django</span><br><span class="line">base = /var/www/django</span><br><span class="line"></span><br><span class="line">home = %(base)/venv</span><br><span class="line">chdir = %(base)</span><br><span class="line">module = config.wsgi:application</span><br><span class="line">env = DJANGO_SETTINGS_MODULE=config.settings</span><br><span class="line"></span><br><span class="line">master = true</span><br><span class="line">processes = 5</span><br><span class="line"></span><br><span class="line">socket =%(base)/run/uwsgi.sock</span><br><span class="line">logto = %(base)/logs/uwsgi.log</span><br><span class="line">chown-socket = %(uid):www-data</span><br><span class="line">chmod-socket = 660</span><br><span class="line">vacuum = true</span><br></pre></td></tr></table></figure></p><h3 id="26-가상-환경을-소스코드-폴더-밑에-생성"><a href="#26-가상-환경을-소스코드-폴더-밑에-생성" class="headerlink" title="26. 가상 환경을 소스코드 폴더 밑에 생성"></a>26. 가상 환경을 소스코드 폴더 밑에 생성</h3><p><code>$ sudo python3 -m venv /var/www/django/venv</code></p><h3 id="27-소스-코드-업로드-전-폴더의-소유자와-사용권한-변경"><a href="#27-소스-코드-업로드-전-폴더의-소유자와-사용권한-변경" class="headerlink" title="27. 소스 코드 업로드 전, 폴더의 소유자와 사용권한 변경"></a>27. 소스 코드 업로드 전, 폴더의 소유자와 사용권한 변경</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R django:www-data /var/www/django</span><br><span class="line">$ sudo chmod -R g+w /var/www/django</span><br></pre></td></tr></table></figure><h3 id="28-Filezilla-프로그램-실행-및-파일-전송"><a href="#28-Filezilla-프로그램-실행-및-파일-전송" class="headerlink" title="28. Filezilla 프로그램 실행 및 파일 전송"></a>28. Filezilla 프로그램 실행 및 파일 전송</h3><ul><li>우측 상단 관리자 아이콘 클릭</li><li>새로운 사이트 추가 및 접속 정보 설정<ul><li>프로토콜 : SFTP</li><li>호스트 : EC2의 접속 주소</li><li>로그온 유형 : 키파일</li><li>사용자 : ubuntu</li><li>키 파일 : 키 페어 파일 선택</li><li>고급 탭에서 기본 리모트 디렉터리를 소스코드 폴더로 설정하면 편리</li><li>연결</li></ul></li><li>처음 접속 시, 알 수 없는 호스트키 창이 나타날 수 있는데, [항상 이 호스트를 신뢰하고 이 키를 캐시에 등록] 에크 및 [확인] 버튼 클릭</li><li>접속 됐다면, 소스코드 폴더에 소스코드 업로드</li></ul><h3 id="29-가상-환경에-패키지-설치하기-위해-소스코드-폴더로-이동"><a href="#29-가상-환경에-패키지-설치하기-위해-소스코드-폴더로-이동" class="headerlink" title="29. 가상 환경에 패키지 설치하기 위해 소스코드 폴더로 이동"></a>29. 가상 환경에 패키지 설치하기 위해 소스코드 폴더로 이동</h3><p><code>$ cd /var/www/django</code></p><h3 id="30-가상-환경-활성화"><a href="#30-가상-환경-활성화" class="headerlink" title="30. 가상 환경 활성화"></a>30. 가상 환경 활성화</h3><p><code>$ sudo -s</code><br><code>source venv/bin/activate</code></p><h3 id="31-의존성-패키지-설치"><a href="#31-의존성-패키지-설치" class="headerlink" title="31. 의존성 패키지 설치"></a>31. 의존성 패키지 설치</h3><p><code>$ pip install -r requirements.txt</code></p><h3 id="32-uwsgi-설치"><a href="#32-uwsgi-설치" class="headerlink" title="32. uwsgi 설치"></a>32. uwsgi 설치</h3><p><code>$ pip install uwsgi</code></p><h3 id="33-runserver-명령으로-프로젝트-구동-여부-확인"><a href="#33-runserver-명령으로-프로젝트-구동-여부-확인" class="headerlink" title="33. runserver 명령으로 프로젝트 구동 여부 확인"></a>33. runserver 명령으로 프로젝트 구동 여부 확인</h3><p><code>$ python manage.py runserver 0:8000</code></p><h3 id="34-runserver-종료하고-uwsgi-모듈로-구동-여부-확인"><a href="#34-runserver-종료하고-uwsgi-모듈로-구동-여부-확인" class="headerlink" title="34. runserver 종료하고, uwsgi 모듈로 구동 여부 확인"></a>34. runserver 종료하고, uwsgi 모듈로 구동 여부 확인</h3><p><code>$ uwsgi --http :8000 --home /var/www/django/venv/ --chdir /var/www/django/ --module config.wsgi</code></p><h3 id="35-uwsgi-service-파일-작성"><a href="#35-uwsgi-service-파일-작성" class="headerlink" title="35. uwsgi.service 파일 작성"></a>35. uwsgi.service 파일 작성</h3><p><code>$ sudo vim /etc/systemd/system/uwsgi.service</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=uWSGI Emperor service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/var/www/django/venv/bin/uwsgi --emperor /var/www/django/ini</span><br><span class="line">User=django</span><br><span class="line">Group=www-data</span><br><span class="line">Restart=on-failure</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=all</span><br><span class="line">StandardError=syslog</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><h3 id="36-서비스-시작하고-시작-서비스로-등록"><a href="#36-서비스-시작하고-시작-서비스로-등록" class="headerlink" title="36. 서비스 시작하고 시작 서비스로 등록"></a>36. 서비스 시작하고 시작 서비스로 등록</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start uwsgi</span><br><span class="line">$ sudo systemctl enable uwsgi</span><br></pre></td></tr></table></figure><h3 id="37-서비스-상태-확인"><a href="#37-서비스-상태-확인" class="headerlink" title="37. 서비스 상태 확인"></a>37. 서비스 상태 확인</h3><p><code>$ sudo systemctl status uwsgi</code></p><h3 id="38-Nginx의-디폴트-사이트-파일-수정"><a href="#38-Nginx의-디폴트-사이트-파일-수정" class="headerlink" title="38. Nginx의 디폴트 사이트 파일 수정"></a>38. Nginx의 디폴트 사이트 파일 수정</h3><p><code>$ sudo vim /etc/nginx/sites-available/default</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">upstream django &#123;</span><br><span class="line">    server unix:/var/www/django/run/uwsgi.sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server;</span><br><span class="line">    charset uft-8;</span><br><span class="line">    server_name_;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include /etc/nginx/uwsgi_params;</span><br><span class="line">        uwsgi_pass django;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="39-Nginx-재시작"><a href="#39-Nginx-재시작" class="headerlink" title="39. Nginx 재시작"></a>39. Nginx 재시작</h3><p><code>$ sudo systemctl restart nginx</code></p><h3 id="40-포트번호-없이-주소나-퍼블릭-DNS-사용하여-접속"><a href="#40-포트번호-없이-주소나-퍼블릭-DNS-사용하여-접속" class="headerlink" title="40. 포트번호 없이 주소나 퍼블릭 DNS 사용하여 접속"></a>40. 포트번호 없이 주소나 퍼블릭 DNS 사용하여 접속</h3><p><br></p><h3 id="다음번-소스코드-업데이트-위해-아래-명령어-실행해-두거나-다음-소스코드-업로드-전에-실행"><a href="#다음번-소스코드-업데이트-위해-아래-명령어-실행해-두거나-다음-소스코드-업로드-전에-실행" class="headerlink" title="** 다음번 소스코드 업데이트 위해 아래 명령어 실행해 두거나 다음 소스코드 업로드 전에 실행"></a>** 다음번 소스코드 업데이트 위해 아래 명령어 실행해 두거나 다음 소스코드 업로드 전에 실행</h3><p><code>$ sudo chmod -R g+w /var/www/django</code></p><h3 id="소스코드-수정-시-uwsgi-서비스-재시작"><a href="#소스코드-수정-시-uwsgi-서비스-재시작" class="headerlink" title="** 소스코드 수정 시, uwsgi 서비스 재시작"></a>** 소스코드 수정 시, uwsgi 서비스 재시작</h3><p><code>$ sudo systemctl restart uwsgi</code></p>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/06/190606-django-EC2-django-deploy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>이메일 서버 셋팅</title>
      <link>https://chohyeonkeun.github.io/2019/06/05/190605-django-email-server/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/05/190605-django-email-server/</guid>
      <pubDate>Wed, 05 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;웹 서비스를 이용하면 회원  가입 시 메일을 보내는 등의 일을 해야할 때가 있다.&lt;/li&gt;
&lt;li&gt;장고에서는 메일 서버를 셋팅하기만 하면 쉽게 메일을 보낼 수 있다.&lt;/li&gt;
&lt;li&gt;이번에는 아래와 같은 순서로 gmail을 이용하여 메일을 보내보겠다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>웹 서비스를 이용하면 회원  가입 시 메일을 보내는 등의 일을 해야할 때가 있다.</li><li>장고에서는 메일 서버를 셋팅하기만 하면 쉽게 메일을 보낼 수 있다.</li><li>이번에는 아래와 같은 순서로 gmail을 이용하여 메일을 보내보겠다.</li></ul><a id="more"></a><h2 id="1-gmail-설정-변경"><a href="#1-gmail-설정-변경" class="headerlink" title="1. gmail 설정 변경"></a>1. gmail 설정 변경</h2><ul><li>외부에서 메일 보내기 서버를 사용하려면 gmail 설정에서 IMAP 사용으로 변경 필요</li><li>gmail 로그인하여 화면 우측 상단 설정 버튼 클릭</li><li>[전달 및 POP/IMAP] 탭으로 이동해 IMAP 사용에 체크</li><li>화면 하단의 [변경사항 저장] 버튼 클릭</li><li>보안 수준이 낮은 앱의 액세스 허용을 위해 계정 -&gt; Google 계정을 클릭해 계정 설정으로 이동</li><li>계정 설정 화면에서 [보안] 탭 클릭 &gt; [보안 수준이 낮은 앱의 액세스] 부분을 찾아 [액세스 사용 설정] 버튼 클릭</li></ul><h2 id="2-django-프로젝트의-settings-py에-메일서버-설정"><a href="#2-django-프로젝트의-settings-py에-메일서버-설정" class="headerlink" title="2. django 프로젝트의 settings.py에 메일서버 설정"></a>2. django 프로젝트의 settings.py에 메일서버 설정</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">"smtp.gmail.com"</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'이메일 계정'</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'계정 비밀번호'</span></span><br><span class="line">EMAIL_PORT = <span class="number">587</span></span><br><span class="line">EMAIL_USE_TLS = <span class="literal">True</span></span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br></pre></td></tr></table></figure><h2 id="3-쉘을-이용한-메일-전송-테스트"><a href="#3-쉘을-이용한-메일-전송-테스트" class="headerlink" title="3. 쉘을 이용한 메일 전송 테스트"></a>3. 쉘을 이용한 메일 전송 테스트</h2><ul><li><p>쉘 접속<br>  <code>$ python manage.py shell</code></p><ul><li><p>일반 메일 전송</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> EmailMessage</span><br><span class="line">email = EmailMessage(<span class="string">'제목'</span>, <span class="string">'본문'</span>, to=[<span class="string">'받는 사람 이메일주소'</span>])</span><br><span class="line">email.send()</span><br></pre></td></tr></table></figure></li><li><p>HTML 포함된 메일 전송</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> EmailMultiAlternatives</span><br><span class="line">email = EmailMultiAlternatives(<span class="string">'제목'</span>, <span class="string">'본문'</span>, to=[<span class="string">'받는사람 이메일주소'</span>])</span><br><span class="line">email.attach_alternative(<span class="string">"html이 포함된 본문"</span>, <span class="string">"text/html"</span>)</span><br><span class="line">email.send()</span><br></pre></td></tr></table></figure></li><li><p>send 메시지 실행했을 때, 1이 출력되면 메일 전송 성공 -&gt; 받는 메일함에서 확인</p></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/05/190605-django-email-server/#disqus_thread</comments>
    </item>
    
    <item>
      <title>로드밸런서에 SSL 인증서 적용</title>
      <link>https://chohyeonkeun.github.io/2019/06/04/190604-django-ELB-SSL/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/04/190604-django-ELB-SSL/</guid>
      <pubDate>Tue, 04 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;1-인증서-적용할-로드밸런서-선택-및-하단-리스너-탭의-리스너-추가-버튼-클릭&quot;&gt;&lt;a href=&quot;#1-인증서-적용할-로드밸런서-선택-및-하단-리스너-탭의-리스너-추가-버튼-클릭&quot; class=&quot;headerlink&quot; title=&quot;1. 인증서 적용할 로드밸런서 선택 및 하단 리스너 탭의 [리스너 추가] 버튼 클릭&quot;&gt;&lt;/a&gt;1. 인증서 적용할 로드밸런서 선택 및 하단 리스너 탭의 [리스너 추가] 버튼 클릭&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;프로토콜과 포트 HTTPS:443 으로 설정&lt;/li&gt;
&lt;li&gt;기본작업은 [다음으로 전달] 선택하고 리스너 그룹 선택&lt;/li&gt;
&lt;li&gt;여기서는 보안 정책 [2016-08] 선택&lt;/li&gt;
&lt;li&gt;기본 SSL 인증서는 기존 ACM에서 발급받아둔 인증서 선택 및 [저장] 버튼 클릭&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="1-인증서-적용할-로드밸런서-선택-및-하단-리스너-탭의-리스너-추가-버튼-클릭"><a href="#1-인증서-적용할-로드밸런서-선택-및-하단-리스너-탭의-리스너-추가-버튼-클릭" class="headerlink" title="1. 인증서 적용할 로드밸런서 선택 및 하단 리스너 탭의 [리스너 추가] 버튼 클릭"></a>1. 인증서 적용할 로드밸런서 선택 및 하단 리스너 탭의 [리스너 추가] 버튼 클릭</h3><ul><li>프로토콜과 포트 HTTPS:443 으로 설정</li><li>기본작업은 [다음으로 전달] 선택하고 리스너 그룹 선택</li><li>여기서는 보안 정책 [2016-08] 선택</li><li>기본 SSL 인증서는 기존 ACM에서 발급받아둔 인증서 선택 및 [저장] 버튼 클릭</li></ul><a id="more"></a><h3 id="2-추가-리스너를-성공적으로-생성함-메시지-확인"><a href="#2-추가-리스너를-성공적으로-생성함-메시지-확인" class="headerlink" title="2. 추가 리스너를 성공적으로 생성함 메시지 확인"></a>2. 추가 리스너를 성공적으로 생성함 메시지 확인</h3><h3 id="3-로드밸런서-하단-리스너-탭에서-http-80-선택-및-편집-버튼-클릭"><a href="#3-로드밸런서-하단-리스너-탭에서-http-80-선택-및-편집-버튼-클릭" class="headerlink" title="3. 로드밸런서 하단 리스너 탭에서 http 80 선택 및 [편집] 버튼 클릭"></a>3. 로드밸런서 하단 리스너 탭에서 http 80 선택 및 [편집] 버튼 클릭</h3><h3 id="4-기본-작업-삭제-및-‘다음으로-리디렉션’-선택-및-작업-추가-버튼-클릭"><a href="#4-기본-작업-삭제-및-‘다음으로-리디렉션’-선택-및-작업-추가-버튼-클릭" class="headerlink" title="4. 기본 작업 삭제 및 ‘다음으로 리디렉션’ 선택 및 [작업 추가] 버튼 클릭"></a>4. 기본 작업 삭제 및 ‘다음으로 리디렉션’ 선택 및 [작업 추가] 버튼 클릭</h3><h3 id="5-HTTPS-우측-443-입력-및-확인"><a href="#5-HTTPS-우측-443-입력-및-확인" class="headerlink" title="5. HTTPS 우측 443 입력 및 확인"></a>5. HTTPS 우측 443 입력 및 확인</h3><h3 id="6-웹-브라우저에-도메인주소-입력-시-자동-https-로-이동"><a href="#6-웹-브라우저에-도메인주소-입력-시-자동-https-로-이동" class="headerlink" title="6. 웹 브라우저에 도메인주소 입력 시, 자동 https:// 로 이동"></a>6. 웹 브라우저에 도메인주소 입력 시, 자동 https:// 로 이동</h3>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/04/190604-django-ELB-SSL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ELB 셋팅</title>
      <link>https://chohyeonkeun.github.io/2019/06/04/190604-django-ELB-setting/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/04/190604-django-ELB-setting/</guid>
      <pubDate>Tue, 04 Jun 2019 07:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;ELB-Elastic-Load-Balancing-란&quot;&gt;&lt;a href=&quot;#ELB-Elastic-Load-Balancing-란&quot; class=&quot;headerlink&quot; title=&quot;ELB(Elastic Load Balancing)란?&quot;&gt;&lt;/a&gt;ELB(Elastic Load Balancing)란?&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;ELB는 AWS의 Load Balancer 서비스이다.&lt;/li&gt;
&lt;li&gt;크게 클래식, 네트워크, 애플리케이션 로드밸런서로 구성되어 있으며,&lt;/li&gt;
&lt;li&gt;보통의 경우 애플리케이션 로드밸런서를 사용하는 것이 편리하다.&lt;/li&gt;
&lt;li&gt;ELB는 복수의 서버에 적절한 트래픽을 분산시키기 위해 사용하며,&lt;/li&gt;
&lt;li&gt;보통의 경우 R.R 방식을 사용해 트래픽을 분산한다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="ELB-Elastic-Load-Balancing-란"><a href="#ELB-Elastic-Load-Balancing-란" class="headerlink" title="ELB(Elastic Load Balancing)란?"></a>ELB(Elastic Load Balancing)란?</h2><hr><ul><li>ELB는 AWS의 Load Balancer 서비스이다.</li><li>크게 클래식, 네트워크, 애플리케이션 로드밸런서로 구성되어 있으며,</li><li>보통의 경우 애플리케이션 로드밸런서를 사용하는 것이 편리하다.</li><li>ELB는 복수의 서버에 적절한 트래픽을 분산시키기 위해 사용하며,</li><li>보통의 경우 R.R 방식을 사용해 트래픽을 분산한다.</li></ul><a id="more"></a><h2 id="ELB-셋팅-방법"><a href="#ELB-셋팅-방법" class="headerlink" title="ELB 셋팅 방법"></a>ELB 셋팅 방법</h2><hr><h3 id="1-EC2-좌측-메뉴에서-로드밸런서-메뉴-클릭"><a href="#1-EC2-좌측-메뉴에서-로드밸런서-메뉴-클릭" class="headerlink" title="1. EC2 좌측 메뉴에서 [로드밸런서] 메뉴 클릭"></a>1. EC2 좌측 메뉴에서 [로드밸런서] 메뉴 클릭</h3><h3 id="2-로드밸런서-목록에서-로드-밸런서-생성-버튼-클릭"><a href="#2-로드밸런서-목록에서-로드-밸런서-생성-버튼-클릭" class="headerlink" title="2. 로드밸런서 목록에서 [로드 밸런서 생성] 버튼 클릭"></a>2. 로드밸런서 목록에서 [로드 밸런서 생성] 버튼 클릭</h3><h3 id="3-유형은-Application-Load-Balancer-의-생성-버튼-클릭"><a href="#3-유형은-Application-Load-Balancer-의-생성-버튼-클릭" class="headerlink" title="3. 유형은 [Application Load Balancer]의 [생성] 버튼 클릭"></a>3. 유형은 [Application Load Balancer]의 [생성] 버튼 클릭</h3><ul><li>ALB : 일반적인 웹 애플리케이션에 사용, 특정 요청에 대하여 지정된 그룹으로 트래픽을 보낼 수 있다.</li><li>NLB : 네트워크 성능에 특화된 로드밸런서, 게임서버나 메일서버 등 웹 애플리케이션이 아닌 네트워크 성능이 우선시 되는 애플리케이션 서버에 사용한다.</li></ul><h3 id="4-로드-밸런서-구성-단계에서-이름-입력-및-리스너-생성"><a href="#4-로드-밸런서-구성-단계에서-이름-입력-및-리스너-생성" class="headerlink" title="4. 로드 밸런서 구성 단계에서 이름 입력 및 리스너 생성"></a>4. 로드 밸런서 구성 단계에서 이름 입력 및 리스너 생성</h3><ul><li>이름 : wps-django-elb</li><li>리스너 : HTTP(프로토콜) - 80(포트) </li></ul><h3 id="5-가용영역에서는-필요한-AZ-모두-체크하고-다음-보안-설정-구성-버튼-클릭"><a href="#5-가용영역에서는-필요한-AZ-모두-체크하고-다음-보안-설정-구성-버튼-클릭" class="headerlink" title="5. 가용영역에서는 필요한 AZ 모두 체크하고, [다음: 보안 설정 구성] 버튼 클릭"></a>5. 가용영역에서는 필요한 AZ 모두 체크하고, [다음: 보안 설정 구성] 버튼 클릭</h3><h3 id="6-적절한-보안-그룹-구성-선택하고-인바운드-규칙에-80-포트에-대한-전세계-접속-지정"><a href="#6-적절한-보안-그룹-구성-선택하고-인바운드-규칙에-80-포트에-대한-전세계-접속-지정" class="headerlink" title="6. 적절한 보안 그룹 구성 선택하고, 인바운드 규칙에 80 포트에 대한 전세계 접속 지정"></a>6. 적절한 보안 그룹 구성 선택하고, 인바운드 규칙에 80 포트에 대한 전세계 접속 지정</h3><h3 id="7-라우팅-구성에서-적잘한-그룹명-입력"><a href="#7-라우팅-구성에서-적잘한-그룹명-입력" class="headerlink" title="7. 라우팅 구성에서 적잘한 그룹명 입력"></a>7. 라우팅 구성에서 적잘한 그룹명 입력</h3><h3 id="8-대상-등록-화면에서-미리-생성해둔-EC2-인스턴스-선택-및-등록된-화면에-추가-버튼-클릭하여-추가"><a href="#8-대상-등록-화면에서-미리-생성해둔-EC2-인스턴스-선택-및-등록된-화면에-추가-버튼-클릭하여-추가" class="headerlink" title="8. 대상 등록 화면에서 미리 생성해둔 EC2 인스턴스 선택 및 [등록된 화면에 추가] 버튼 클릭하여 추가"></a>8. 대상 등록 화면에서 미리 생성해둔 EC2 인스턴스 선택 및 [등록된 화면에 추가] 버튼 클릭하여 추가</h3><h3 id="9-검토-화면에서-내용-확인-및-생성-버튼-클릭"><a href="#9-검토-화면에서-내용-확인-및-생성-버튼-클릭" class="headerlink" title="9. 검토 화면에서 내용 확인 및 [생성] 버튼 클릭"></a>9. 검토 화면에서 내용 확인 및 [생성] 버튼 클릭</h3><h3 id="10-로드밸런서-목록에서-생성된-로드밸런서-확인-및-DNS-이름으로-브라우저-접속하여-정상-작동-여부-확인"><a href="#10-로드밸런서-목록에서-생성된-로드밸런서-확인-및-DNS-이름으로-브라우저-접속하여-정상-작동-여부-확인" class="headerlink" title="10. 로드밸런서 목록에서 생성된 로드밸런서 확인 및 DNS 이름으로 브라우저 접속하여 정상 작동 여부 확인"></a>10. 로드밸런서 목록에서 생성된 로드밸런서 확인 및 DNS 이름으로 브라우저 접속하여 정상 작동 여부 확인</h3>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/04/190604-django-ELB-setting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ACM으로 SSL 인증서 발급</title>
      <link>https://chohyeonkeun.github.io/2019/06/03/190603-django-ACM-SSL/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/03/190603-django-ACM-SSL/</guid>
      <pubDate>Mon, 03 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;ACM에서-SSL-인증서를-발급하는-이유&quot;&gt;&lt;a href=&quot;#ACM에서-SSL-인증서를-발급하는-이유&quot; class=&quot;headerlink&quot; title=&quot;ACM에서 SSL 인증서를 발급하는 이유&quot;&gt;&lt;/a&gt;ACM에서 SSL 인증서를 발급하는 이유&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;https 기능을 사이트에 적용하려면 웹 서버에 ssl 인증서를 등록해야 한다.&lt;/li&gt;
&lt;li&gt;로드밸런서를 사용하면 더 쉽게 인증서를 적용할 수 있다.&lt;/li&gt;
&lt;li&gt;일반적인 인증서를 일정 비용을 지불하여 공식 업체에서 발급 받지만, 아마존에서는 ACM 서비스를 통해 무료로 인증서를 발급한다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="ACM에서-SSL-인증서를-발급하는-이유"><a href="#ACM에서-SSL-인증서를-발급하는-이유" class="headerlink" title="ACM에서 SSL 인증서를 발급하는 이유"></a>ACM에서 SSL 인증서를 발급하는 이유</h2><hr><ul><li>https 기능을 사이트에 적용하려면 웹 서버에 ssl 인증서를 등록해야 한다.</li><li>로드밸런서를 사용하면 더 쉽게 인증서를 적용할 수 있다.</li><li>일반적인 인증서를 일정 비용을 지불하여 공식 업체에서 발급 받지만, 아마존에서는 ACM 서비스를 통해 무료로 인증서를 발급한다.</li></ul><a id="more"></a><h2 id="ACM을-이용한-SSL-인증서-발급-방법"><a href="#ACM을-이용한-SSL-인증서-발급-방법" class="headerlink" title="ACM을 이용한 SSL 인증서 발급 방법"></a>ACM을 이용한 SSL 인증서 발급 방법</h2><hr><h3 id="1-AWS-서비스-메뉴-gt-Certificate-Manager-메뉴-선택"><a href="#1-AWS-서비스-메뉴-gt-Certificate-Manager-메뉴-선택" class="headerlink" title="1. AWS 서비스 메뉴 &gt; Certificate Manager 메뉴 선택"></a>1. AWS 서비스 메뉴 &gt; Certificate Manager 메뉴 선택</h3><h3 id="2-인증서-프로비저닝-시작하기-버튼-클릭"><a href="#2-인증서-프로비저닝-시작하기-버튼-클릭" class="headerlink" title="2. 인증서 프로비저닝 [시작하기] 버튼 클릭"></a>2. 인증서 프로비저닝 [시작하기] 버튼 클릭</h3><h3 id="3-인증서-요청에서-공인-인증서-요청-선택하고-인증서-요청-버튼-클릭"><a href="#3-인증서-요청에서-공인-인증서-요청-선택하고-인증서-요청-버튼-클릭" class="headerlink" title="3. 인증서 요청에서 [공인 인증서 요청] 선택하고 [인증서 요청] 버튼 클릭"></a>3. 인증서 요청에서 [공인 인증서 요청] 선택하고 [인증서 요청] 버튼 클릭</h3><h3 id="4-발급받고자-하는-대상-도메인-입력하고-다음-클릭"><a href="#4-발급받고자-하는-대상-도메인-입력하고-다음-클릭" class="headerlink" title="4. 발급받고자 하는 대상 도메인 입력하고 [다음] 클릭"></a>4. 발급받고자 하는 대상 도메인 입력하고 [다음] 클릭</h3><ul><li>ssl 인증서는 도메인 별로 발급된다.</li><li><em>로 발급받으면 와일드 카드 인정서로 서브 도메인 전체에 대한 적용이 가능하다. (ex. </em>.wpsshool.site)</li></ul><h3 id="5-‘검증-방법-선택’에서-DNS-검증-선택-및-검토-버튼-클릭"><a href="#5-‘검증-방법-선택’에서-DNS-검증-선택-및-검토-버튼-클릭" class="headerlink" title="5. ‘검증 방법 선택’에서 DNS 검증 선택 및 [검토] 버튼 클릭"></a>5. ‘검증 방법 선택’에서 DNS 검증 선택 및 [검토] 버튼 클릭</h3><h3 id="6-검증-방법-및-신청-내용-확인하고-확인-및-요청-버튼-클릭"><a href="#6-검증-방법-및-신청-내용-확인하고-확인-및-요청-버튼-클릭" class="headerlink" title="6. 검증 방법 및 신청 내용 확인하고 [확인 및 요청] 버튼 클릭"></a>6. 검증 방법 및 신청 내용 확인하고 [확인 및 요청] 버튼 클릭</h3><h3 id="7-검증단계에서-검증-보류-메시지-확인"><a href="#7-검증단계에서-검증-보류-메시지-확인" class="headerlink" title="7. 검증단계에서 검증 보류 메시지 확인"></a>7. 검증단계에서 검증 보류 메시지 확인</h3><ul><li>도메인 주소 옆에 있는 화살표키 눌러 상세 정보 확인</li><li>[Route 53에서 레코드 생성] 버튼 클릭</li></ul><h3 id="8-레코드-내용-확인-및-생성-버튼-클릭"><a href="#8-레코드-내용-확인-및-생성-버튼-클릭" class="headerlink" title="8. 레코드 내용 확인 및 [생성] 버튼 클릭"></a>8. 레코드 내용 확인 및 [생성] 버튼 클릭</h3><h3 id="9-생성-성공-메시지-확인-및-계속-버튼-클릭"><a href="#9-생성-성공-메시지-확인-및-계속-버튼-클릭" class="headerlink" title="9. 생성 성공 메시지 확인 및 [계속] 버튼 클릭"></a>9. 생성 성공 메시지 확인 및 [계속] 버튼 클릭</h3><h3 id="10-일정-시간-지나-검증-완료-이후-인증서-발급"><a href="#10-일정-시간-지나-검증-완료-이후-인증서-발급" class="headerlink" title="10. 일정 시간 지나 검증 완료 이후, 인증서 발급"></a>10. 일정 시간 지나 검증 완료 이후, 인증서 발급</h3><h3 id="11-발급된-인증서를-로드밸런서에서-바로-적용-가능"><a href="#11-발급된-인증서를-로드밸런서에서-바로-적용-가능" class="headerlink" title="11. 발급된 인증서를 로드밸런서에서 바로 적용 가능"></a>11. 발급된 인증서를 로드밸런서에서 바로 적용 가능</h3>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/03/190603-django-ACM-SSL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>정규표현식 기초 학습</title>
      <link>https://chohyeonkeun.github.io/2019/06/02/190602-python-regular-expression/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/02/190602-python-regular-expression/</guid>
      <pubDate>Sun, 02 Jun 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;정규표현식이란&quot;&gt;&lt;a href=&quot;#정규표현식이란&quot; class=&quot;headerlink&quot; title=&quot;정규표현식이란?&quot;&gt;&lt;/a&gt;정규표현식이란?&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 형식 언어&lt;/li&gt;
&lt;li&gt;프로그래밍 언어 혹은 텍스트 에디터 등에서 문자열의 검색과 치환을 위한 용도로 사용&lt;/li&gt;
&lt;li&gt;정규표현식에서 사용하는 기호를 메타 문자라고 한다.&lt;/li&gt;
&lt;li&gt;메타 문자(meta characters) : 원래 그 문자가 가진 뜻이 아닌 표현식 내부에서 특정한 의미를 갖는 문자&lt;ul&gt;
&lt;li&gt;ex) . 6 $ * + ? { } [ ] \ | ( )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="정규표현식이란"><a href="#정규표현식이란" class="headerlink" title="정규표현식이란?"></a>정규표현식이란?</h2><hr><ul><li>특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 형식 언어</li><li>프로그래밍 언어 혹은 텍스트 에디터 등에서 문자열의 검색과 치환을 위한 용도로 사용</li><li>정규표현식에서 사용하는 기호를 메타 문자라고 한다.</li><li>메타 문자(meta characters) : 원래 그 문자가 가진 뜻이 아닌 표현식 내부에서 특정한 의미를 갖는 문자<ul><li>ex) . 6 $ * + ? { } [ ] \ | ( )</li></ul></li></ul><a id="more"></a><h2 id="문자-클래스"><a href="#문자-클래스" class="headerlink" title="문자 클래스 [ ]"></a>문자 클래스 [ ]</h2><hr><ul><li>문자 클래스로 만들어진 정규식은 “ [  ] 사이의 문자들과 매치 “ 라는 의미를 갖는다.</li><li>예를 들어 [abc]는 “a, b, c 중 한개의 문자와 매치” 를 의미한다.<ul><li>“apple” –&gt; 정규식과 일치하는 문자 “a”가 있으므로 매치</li><li>“bottle” –&gt; 정규식과 일치하는 문자 “b”가 있으므로 매치</li><li>“dog” –&gt; 정규식과 일치하는 문자 없으므로 매치되지 않음</li></ul></li><li>[  ] 안의 두 문자 사이에 하이픈(-)을 사용하면, 두 문자 사이의 범위(from-to) 를 의미한다.<ul><li>정규표현식 [a-c]은 [abc]와 동일하고, [0-5]는 [012345]와 동일</li><li>[a-zA-Z] : 알파벳(소문자/대문자) 모두</li><li>[0-9] : 숫자</li></ul></li><li>[  ] 안에 ^ 메타 문자는, 반대(not)라는 의미를 갖는다.<ul><li>^[0-9] : 숫자가 아닌 문자만 매치</li></ul></li><li>자주 사용하는 문자 클래스<ul><li>^ : 문자열 시작</li><li>$ : 문자열 종료</li><li>\d : 숫자와 매치</li><li>\D : 숫자가 아닌 것과 매치, [^0-9]와 동일</li><li>\s : whitespace 문자와 매치, [ \t\n\r\f\v]와 동일(맨 앞 빈 칸은 공백문자를 의미)</li><li>\S : whitespace 문자가 아닌 것과 매치, [^ \t\n\r\f\v]와 동일</li><li>\w : 문자+숫자와 매치, [a-zA-Z0-9_]와 동일</li><li>\W : 문자+숫자가 아닌 것과 매치, [^a-zA-Z0-9_]와 동일</li></ul></li></ul><h2 id="Dot"><a href="#Dot" class="headerlink" title="Dot(.)"></a>Dot(.)</h2><hr><ul><li>정규표현식의 Dot(.) 메타 문자는 줄바꿈 문자인 \n를 제외한 모든 문자와 매치(옵션으로 re.DOTALL 옵션을 주면, \n 문자와도 매치)</li><li>a.b 는 “a + 모든문자 + b”라는 의미<ul><li>ex) “aab”, “a0b”, “aAb” –&gt; “a”와 “b”사이에 모든 문자를 의미하는 . 과 일치하므로 매치</li><li>ex) “abc” –&gt; “a”와 “b” 사이에 어떤 문자도 없으므로 매치되지 않음</li></ul></li><li>주의 : a[.]b 는 “a + Dot(.)문자 + b”라는 의미 <ul><li>“a.b” 문자열만 매치</li></ul></li></ul><h2 id="반복"><a href="#반복" class="headerlink" title="반복(*)"></a>반복(*)</h2><hr><ul><li><em>의 의미는 </em> 바로 앞에 있는 문자가 최소 0번 이상 무한대로 반복될 수 있다는 것<ul><li>ex) ca*t –&gt; “ct”, “cat”, “caaaat” 매치</li></ul></li></ul><h2 id="반복-1"><a href="#반복-1" class="headerlink" title="반복(+)"></a>반복(+)</h2><hr><ul><li>+의 의미는 + 바로 앞에 있는 문자가 최소 1번 이상 무한대로 반복될 수 있다는 것<ul><li>ex) ca+t –&gt; “cat”, “caaaat” 매치</li></ul></li></ul><h2 id="반복-m-n"><a href="#반복-m-n" class="headerlink" title="반복({m,n},?)"></a>반복({m,n},?)</h2><hr><ul><li>{m,n}의 의미는 반복 횟수가 m부터 n까지인 것을 매치한다는 의미<ul><li>m 또는 n 생략 가능<ul><li>{3,} –&gt; 반복 횟수 3번 이상인 경우</li><li>{,3} –&gt; 반복 횟수 3번 이하인 경우</li><li>{3} –&gt; 반복 횟수 3번인 경우</li></ul></li><li>{1,} 는 * 메타 문자와 동일</li><li>{0,} 는 + 메타 문자와 동일</li><li>{0, 1} 는 ? 메타 문자와 동일<ul><li>ab?c –&gt; “a + b(있어도 되고 없어도 된다) + c”</li></ul></li></ul></li></ul><h2 id="파이썬에서-정규-표현식을-지원하는-re-모듈"><a href="#파이썬에서-정규-표현식을-지원하는-re-모듈" class="headerlink" title="파이썬에서 정규 표현식을 지원하는 re 모듈"></a>파이썬에서 정규 표현식을 지원하는 re 모듈</h2><hr><ul><li>파이썬은 정규 표현식을 지원하기 위해 re(regular expression의 약어) 모듈 제공</li><li>re 모듈은 파이썬 설치될 때 자동 설치되는 기본 라이브러리<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">p = re.compile(<span class="string">'ab*'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="정규식-이용한-문자열-검색"><a href="#정규식-이용한-문자열-검색" class="headerlink" title="정규식 이용한 문자열 검색"></a>정규식 이용한 문자열 검색</h2><hr><ul><li>컴파일 된 패턴 객체는 4가지 메소드 제공<ul><li>match() : 문자열 처음부터 정규식과 매치되는지 조사</li><li>search() : 문자열 전체 검색하여 정규식과 매치되는지 조사</li><li>findall() : 정규식과 매치되는 모든 문자열을 리스트로 리턴</li><li>finditer() : 정규식과 매치되는 모든 문자열을 iterator 객체로 리턴</li></ul></li><li>match, search는 정규식과 매치 될 경우, match객체 리턴(매치되지 않을 경우 None 리턴)</li><li><p>match</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">p = re.compile(<span class="string">'[a-z]+'</span>)</span><br><span class="line"></span><br><span class="line">m = p.match(<span class="string">"python"</span>)</span><br><span class="line">print(m) <span class="comment"># &lt;_sre.SRE_Match object at 0x01F3F9F8&gt;</span></span><br><span class="line"></span><br><span class="line">m = p.match(<span class="string">"3 python"</span>)</span><br><span class="line">print(m) <span class="comment"># None</span></span><br><span class="line"><span class="comment"># "3 python" 문자열의 처음 문자인 3이 정규식 [a-z]+ 에 부합되지 않으므로 None 리턴</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 파이썬 정규식 프로그램은 보통 아래와 같은 흐름으로 작성</span></span><br><span class="line">m = p.match(<span class="string">'string goes here'</span>)</span><br><span class="line"><span class="keyword">if</span> m:</span><br><span class="line">    print(<span class="string">'Match found: '</span>, m.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'No match'</span>)</span><br></pre></td></tr></table></figure></li><li><p>search</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m = p.search(<span class="string">"python"</span>)</span><br><span class="line">print(m) <span class="comment"># &lt;_sre.SRE.Match object at 0x01F3FA68</span></span><br><span class="line"></span><br><span class="line">m = p.search(<span class="string">"3 python"</span>)</span><br><span class="line">print(m) <span class="comment"># &lt;_sre.SRE.Match object at 0x01F3FA30&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>findall</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = p.findall(<span class="string">"life is too short"</span>)</span><br><span class="line">print(result) <span class="comment"># ['life', 'is', 'too', 'short']</span></span><br></pre></td></tr></table></figure></li><li><p>finditer</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = p.finditer(<span class="string">"life is too short"</span>)</span><br><span class="line">print(result) <span class="comment"># &lt;callable_iterator object at 0x01F5E390&gt;</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> result: </span><br><span class="line">    print(r)</span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object at 0x01F3F9F8&gt;</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object at 0x01F3FAD8&gt;</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object at 0x01F3FAA0&gt;</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object at 0x01F3F9F8&gt;</span></span><br></pre></td></tr></table></figure><ul><li>finditer는 findall과 동일하지만, 반복 가능한 객체(iterator object)를 리턴한다. (match 객체)</li></ul></li></ul><h2 id="match-객체의-메서드"><a href="#match-객체의-메서드" class="headerlink" title="match 객체의 메서드"></a>match 객체의 메서드</h2><hr><ul><li><p>match 객체의 메서드</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m = p.match(<span class="string">"python"</span>)</span><br><span class="line">m.group()  <span class="comment"># 'python'</span></span><br><span class="line">m.start()  <span class="comment"># 0</span></span><br><span class="line">m.end()  <span class="comment"># 6</span></span><br><span class="line">m.span()  <span class="comment"># (0, 6)</span></span><br></pre></td></tr></table></figure><ul><li>group() : 매치된 문자열 리턴</li><li>start() : 매치된 문자열의 시작 위치 리턴</li><li>end() : 매치된 문자열의 끝 위치 리턴</li><li>span() : 매치된 문자열의 (시작, 끝)에 해당하는 튜플 리턴</li></ul></li><li><p>re.compile 축약 방법</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = re.compile(<span class="string">'[a-z]+'</span>)</span><br><span class="line">m = p.match(<span class="string">"python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 컴파일과 match 메서드 한번에 수행</span></span><br><span class="line">m = re.match(<span class="string">'[a-z]+'</span>, <span class="string">"python"</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="컴파일-옵션"><a href="#컴파일-옵션" class="headerlink" title="컴파일 옵션"></a>컴파일 옵션</h2><ul><li>정규식을 컴파일할 때 아래와 같은 옵션 사용<ul><li>DOTALL(S) : 메타문자 . 이 줄바꿈 문자를 포함하여 모든 문자와 매치할 수 있도록 한다.</li><li>IGNORECASE(I) : 대소문자 상관없이 매치</li><li>MULTILINE(M) : 여러줄과 매치(^, $ 메타 문자 사용과 관계있는 옵션)</li><li>VERBOSE(X) : verbose 모드 사용(정규식을 보기 편하게 만들고, 주석 등 사용 가능)</li></ul></li><li><p>DOTALL,S (re.DOTALL 혹은 re.S)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">p = re.compile(<span class="string">'a.b'</span>)</span><br><span class="line">m = p.match(<span class="string">'a\nb'</span>)</span><br><span class="line">print(m)  <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line">p = re.compile(<span class="string">'a.b'</span>, re.DOTALL)</span><br><span class="line">m = p.match(<span class="string">'a\nb'</span>)</span><br><span class="line">print(m)  <span class="comment"># &lt;_sre.SRE_Match object at 0x01FCF3D8&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>IGNORECASE,I (re.IGNORECASE 혹은 re.I)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = re.compile(<span class="string">'[a-z]'</span>, re.I)</span><br><span class="line">p.match(<span class="string">'python'</span>)  <span class="comment"># &lt;_sre.SRE_Match object at 0x01FCFA30&gt;</span></span><br><span class="line">p.match(<span class="string">'Python'</span>)  <span class="comment"># &lt;_sre.SRE_Match object at 0x01FCFA68&gt;</span></span><br><span class="line">p.match(<span class="string">'PYTHON'</span>)  <span class="comment"># &lt;_sre.SRE_Match object at 0x01FCF9F8&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MULTILINE,M (re.MULTILINE 혹은 re.M)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">p = re.compile(<span class="string">"^python\s\w+"</span>)</span><br><span class="line"><span class="comment"># ^ 메타 문자에 의해 python 문자열이 사용된 첫 번째 라인만 매치</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">"""python one</span></span><br><span class="line"><span class="string">life is too short</span></span><br><span class="line"><span class="string">python two</span></span><br><span class="line"><span class="string">you need python</span></span><br><span class="line"><span class="string">python three"""</span></span><br><span class="line"></span><br><span class="line">print(p.findall(data)) <span class="comment"># ['python one']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 메타 문자를 문자열 전체가 아닌 각 라인의 처음으로 인식시키고 싶은 경우</span></span><br><span class="line">p = re.compile(<span class="string">"^python\s\w+"</span>, re.MULTILINE)</span><br><span class="line"></span><br><span class="line">print(d.findall(data))  <span class="comment"># ['python one', 'python two', 'python three']</span></span><br></pre></td></tr></table></figure></li><li><p>VERBOSE,X (re.VERBOSE 또는 re.X)</p><ul><li>이해하기 어려운 정규식을 주석 또는 라인 단위로 구분하여 가독성있게 작성하고 싶을 때 사용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">charref = re.compile(<span class="string">r'&amp;[#](0[0-7]+|[0-9]+|x[0-9a-fA-F]+);'</span>)</span><br><span class="line"></span><br><span class="line">charref = re.compile(<span class="string">r"""</span></span><br><span class="line"><span class="string">&amp;[#]                # Start of a numeric entity reference)</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">    0[0-7]+         # Octal form</span></span><br><span class="line"><span class="string">    |[0-9]+         # Decimal form</span></span><br><span class="line"><span class="string">    |x[0-9a-fA-F]+  # Hexadecimal form</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">;                   # Trailing semicolon</span></span><br><span class="line"><span class="string">"""</span>, re.VERBOSE)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="백슬래쉬-문제"><a href="#백슬래쉬-문제" class="headerlink" title="백슬래쉬 문제"></a>백슬래쉬 문제</h2><hr><ul><li><p>“\section”이라는 문자열을 찾기 위한 정규식을 만들고 싶은 경우</p><ul><li><p>\section에서 \s 문자가 whitespace로 해석되므로, <code>\\section</code> 으로 변경하여 사용하여 이스케이프 처리를 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = re.compile(<span class="string">'\\section'</span>)</span><br></pre></td></tr></table></figure></li><li><p>하지만, 실제 파이썬 정규식 엔진에는 파이썬 문자열 리터럴 규칙에 의하여 <code>\\</code>이 <code>\</code>로 변경되어 <code>\section</code>이 전달된다.</p></li><li><p>따라서, 파이썬은 <code>\\\\</code> 백슬래쉬 4개를 사용해야 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = re.compile(<span class="string">'\\\\section'</span>)</span><br></pre></td></tr></table></figure></li><li><p>상기와 같은 문제를 해결하기 위해 파이썬 정규식에는 Raw string이 생겨났다.</p></li><li><p>즉, 컴파일해야 하는 정규식이 Raw String임을 알려줄 수 있도록 파이썬 문법이 만들어진 것</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = re.compile(<span class="string">r'\\section'</span>)</span><br></pre></td></tr></table></figure></li><li><p>정규식 문자열 앞에 r 문자를 선행하면 이 정규식은 Raw String 규칙에 의해 백슬래시 2개 대신 1개만 써도 두개를 쓴 것과 동일한 의미를 가진다.</p></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/02/190602-python-regular-expression/#disqus_thread</comments>
    </item>
    
    <item>
      <title>django allauth 사용(facebook 연동)</title>
      <link>https://chohyeonkeun.github.io/2019/06/01/190601-django-allauth-facebook/</link>
      <guid>https://chohyeonkeun.github.io/2019/06/01/190601-django-allauth-facebook/</guid>
      <pubDate>Sat, 01 Jun 2019 13:55:01 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;facebook은 https에 한해서 연동되므로, 앞서 포스팅했던 openssl로 인증서 생성 및 해당 프로젝트로 파일 이동시킨 후, 아래와 같은 절차를 따른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-django-allauth-설치&quot;&gt;&lt;a href=&quot;#1-django-allauth-설치&quot; class=&quot;headerlink&quot; title=&quot;1. django-allauth 설치&quot;&gt;&lt;/a&gt;1. django-allauth 설치&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;pip install django-allauth
&lt;/code&gt;&lt;/pre&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>facebook은 https에 한해서 연동되므로, 앞서 포스팅했던 openssl로 인증서 생성 및 해당 프로젝트로 파일 이동시킨 후, 아래와 같은 절차를 따른다.</li></ul><h3 id="1-django-allauth-설치"><a href="#1-django-allauth-설치" class="headerlink" title="1. django-allauth 설치"></a>1. django-allauth 설치</h3><pre><code>pip install django-allauth</code></pre><a id="more"></a><h3 id="2-settings-py의-INSTALLED-APPS-추가"><a href="#2-settings-py의-INSTALLED-APPS-추가" class="headerlink" title="2. settings.py의 INSTALLED_APPS 추가"></a>2. settings.py의 INSTALLED_APPS 추가</h3><pre><code>INSTALLED_APPS = [    ...    &apos;django.contrib.sites&apos;,    &apos;allauth&apos;,    &apos;allauth.account&apos;,    &apos;allauth.socialaccount&apos;,]</code></pre><h3 id="3-settings-py에-AUTHENTICATION-BACKENDS-추가"><a href="#3-settings-py에-AUTHENTICATION-BACKENDS-추가" class="headerlink" title="3. settings.py에 AUTHENTICATION_BACKENDS 추가"></a>3. settings.py에 AUTHENTICATION_BACKENDS 추가</h3><pre><code>AUTHENTICATION_BACKENDS = [    &apos;django.contrib.auth.backends.ModelBackend&apos;,    &apos;allauth.account.auth_backends.AuthenticationBackend&apos;,]</code></pre><h3 id="4-사용하고자-하는-프로바이더-추가"><a href="#4-사용하고자-하는-프로바이더-추가" class="headerlink" title="4. 사용하고자 하는 프로바이더 추가"></a>4. 사용하고자 하는 프로바이더 추가</h3><pre><code>INSTALLED_APPS = [    ...    &apos;allauth.socialaccount.providers.facebook&apos;,]</code></pre><h3 id="5-settings-py에-SITE-ID-값-추가"><a href="#5-settings-py에-SITE-ID-값-추가" class="headerlink" title="5. settings.py에 SITE_ID 값 추가"></a>5. settings.py에 SITE_ID 값 추가</h3><pre><code>SITE_ID = 1</code></pre><h3 id="6-urls-py에-allauth-관련-라우팅-추가"><a href="#6-urls-py에-allauth-관련-라우팅-추가" class="headerlink" title="6. urls.py에 allauth 관련 라우팅 추가"></a>6. urls.py에 allauth 관련 라우팅 추가</h3><pre><code>urlpattterns = [    ...    path(&apos;accounts/&apos;, include(&apos;allauth.urls&apos;)),]</code></pre><h3 id="7-migrate-명령-실행"><a href="#7-migrate-명령-실행" class="headerlink" title="7. migrate 명령 실행"></a>7. migrate 명령 실행</h3><pre><code>$ python manage.py migrate</code></pre><h3 id="8-페이스북-개발자-사이트로-이동하여-앱-등록"><a href="#8-페이스북-개발자-사이트로-이동하여-앱-등록" class="headerlink" title="8. 페이스북 개발자 사이트로 이동하여 앱 등록"></a>8. 페이스북 개발자 사이트로 이동하여 앱 등록</h3><ul><li><a href="https://developers.facebook.com/?locale=ko_KR" target="_blank" rel="noopener">https://developers.facebook.com/?locale=ko_KR</a> 이동</li><li>로그인 후, [새 앱 추가] 버튼 클릭</li></ul><h3 id="9-앱-이름과-이메일-입력-후-앱-ID-만들기-버튼-클릭"><a href="#9-앱-이름과-이메일-입력-후-앱-ID-만들기-버튼-클릭" class="headerlink" title="9. 앱 이름과 이메일 입력 후, [앱 ID 만들기] 버튼 클릭"></a>9. 앱 이름과 이메일 입력 후, [앱 ID 만들기] 버튼 클릭</h3><h3 id="10-앱-기능-중-Facebook-로그인-통합에-체크-및-확인-버튼-클릭"><a href="#10-앱-기능-중-Facebook-로그인-통합에-체크-및-확인-버튼-클릭" class="headerlink" title="10. 앱 기능 중, Facebook 로그인 통합에 체크 및 [확인] 버튼 클릭"></a>10. 앱 기능 중, Facebook 로그인 통합에 체크 및 [확인] 버튼 클릭</h3><h3 id="11-화면-하단-‘내-제품’-목록에서-Facebook-로그인의-설정-버튼-클릭"><a href="#11-화면-하단-‘내-제품’-목록에서-Facebook-로그인의-설정-버튼-클릭" class="headerlink" title="11. 화면 하단 ‘내 제품’ 목록에서 Facebook 로그인의 [설정] 버튼 클릭"></a>11. 화면 하단 ‘내 제품’ 목록에서 Facebook 로그인의 [설정] 버튼 클릭</h3><h3 id="12-유효한-Oauth-리디렉션-URI에-서버-주소-입력-및-변경-내용-저장-버튼-클릭"><a href="#12-유효한-Oauth-리디렉션-URI에-서버-주소-입력-및-변경-내용-저장-버튼-클릭" class="headerlink" title="12. 유효한 Oauth 리디렉션 URI에 서버 주소 입력 및 [변경 내용 저장] 버튼 클릭"></a>12. 유효한 Oauth 리디렉션 URI에 서버 주소 입력 및 [변경 내용 저장] 버튼 클릭</h3><ul><li><a href="https://127.0.0.1:8000" target="_blank" rel="noopener">https://127.0.0.1:8000</a></li><li><a href="https://127.0.0.1:8000/accounts/facebook/login/callback/" target="_blank" rel="noopener">https://127.0.0.1:8000/accounts/facebook/login/callback/</a></li></ul><h3 id="13-앱-기본-설정-페이지로-이동하여-앱-ID와-시크릿-코드-확인"><a href="#13-앱-기본-설정-페이지로-이동하여-앱-ID와-시크릿-코드-확인" class="headerlink" title="13. 앱 기본 설정 페이지로 이동하여 앱 ID와 시크릿 코드 확인"></a>13. 앱 기본 설정 페이지로 이동하여 앱 ID와 시크릿 코드 확인</h3><h3 id="14-관리자-페이지-Social-application에-새로운-설정-추가"><a href="#14-관리자-페이지-Social-application에-새로운-설정-추가" class="headerlink" title="14. 관리자 페이지 Social application에 새로운 설정 추가"></a>14. 관리자 페이지 Social application에 새로운 설정 추가</h3><ul><li>Provider : Facebook</li><li>이름 입력</li><li>Client Id, Secret Key : 페이스북 앱 화면에서 복사 붙여넣기</li><li>sites : ‘Available sites’의 example.com을 우측 ‘Chosen sites’로 이동</li></ul><h3 id="15-로그인-페이지에-접속해-Facebook-버튼-클릭"><a href="#15-로그인-페이지에-접속해-Facebook-버튼-클릭" class="headerlink" title="15. 로그인 페이지에 접속해 Facebook 버튼 클릭"></a>15. 로그인 페이지에 접속해 Facebook 버튼 클릭</h3><ul><li>…/accounts/login 페이지 이동하여 Facebook 로그인<ul><li>…/accounts/profile 페이지로 이동한다면, settings.py에 아래 코드 추가</li><li>`LOGIN_REDIRECT_URL = ‘/‘</li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/06/01/190601-django-allauth-facebook/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Openssl로 인증서 생성 및 ssl runserver 사용</title>
      <link>https://chohyeonkeun.github.io/2019/05/31/190531-django-openssl/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/31/190531-django-openssl/</guid>
      <pubDate>Fri, 31 May 2019 12:25:10 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;1-openssl-버전-확인&quot;&gt;&lt;a href=&quot;#1-openssl-버전-확인&quot; class=&quot;headerlink&quot; title=&quot;1. openssl 버전 확인&quot;&gt;&lt;/a&gt;1. openssl 버전 확인&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ openssl version
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;만약 나타나지 않는다면 설치해야 한다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="1-openssl-버전-확인"><a href="#1-openssl-버전-확인" class="headerlink" title="1. openssl 버전 확인"></a>1. openssl 버전 확인</h3><pre><code>$ openssl version</code></pre><ul><li>만약 나타나지 않는다면 설치해야 한다.</li></ul><a id="more"></a><h3 id="2-키-파일-생성"><a href="#2-키-파일-생성" class="headerlink" title="2. 키 파일 생성"></a>2. 키 파일 생성</h3><pre><code>$ openssl genrsa 1024 &gt; django.key</code></pre><h3 id="3-cert-파일-생성"><a href="#3-cert-파일-생성" class="headerlink" title="3. cert 파일 생성"></a>3. cert 파일 생성</h3><pre><code>$ openssl req -new -x509 -nodes -sha256 -days 365 -key django.key &gt; django.cert</code></pre><h3 id="4-해당-파일을-프로젝트-폴더에-붙여넣기"><a href="#4-해당-파일을-프로젝트-폴더에-붙여넣기" class="headerlink" title="4. 해당 파일을 프로젝트 폴더에 붙여넣기"></a>4. 해당 파일을 프로젝트 폴더에 붙여넣기</h3><h3 id="5-django-sslserver-설치"><a href="#5-django-sslserver-설치" class="headerlink" title="5. django-sslserver 설치"></a>5. django-sslserver 설치</h3><pre><code>$ pip install django-sslserver</code></pre><h3 id="6-settings-py에-INSTALLED-APPS-추가"><a href="#6-settings-py에-INSTALLED-APPS-추가" class="headerlink" title="6. settings.py에 INSTALLED_APPS 추가"></a>6. settings.py에 INSTALLED_APPS 추가</h3><pre><code>INSTALLED_APPS = [    ...    &apos;sslserver&apos;,]</code></pre><h3 id="7-명령어-실행"><a href="#7-명령어-실행" class="headerlink" title="7. 명령어 실행"></a>7. 명령어 실행</h3><pre><code>$ python manage.py runsslserver --certificate django.cert --key django.key</code></pre>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/31/190531-django-openssl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>FTP를 이용한 파일 업로드</title>
      <link>https://chohyeonkeun.github.io/2019/05/30/190530-django-FTP/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/30/190530-django-FTP/</guid>
      <pubDate>Thu, 30 May 2019 11:21:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Filezilla-사용&quot;&gt;&lt;a href=&quot;#Filezilla-사용&quot; class=&quot;headerlink&quot; title=&quot;Filezilla 사용&quot;&gt;&lt;/a&gt;Filezilla 사용&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;서버에 소스 코드 배포하는 방식 중, 가장 기본이 되는 것이 FTP 프로그램을 이용해 소스코드를 직접 업로드 하는 방식이다.&lt;/li&gt;
&lt;li&gt;FTP 프로그램 중, Filezilla 프로그램이 무료로 사용 가능하며, 강력한 성능을 자랑한다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Filezilla-사용"><a href="#Filezilla-사용" class="headerlink" title="Filezilla 사용"></a>Filezilla 사용</h2><hr><ul><li>서버에 소스 코드 배포하는 방식 중, 가장 기본이 되는 것이 FTP 프로그램을 이용해 소스코드를 직접 업로드 하는 방식이다.</li><li>FTP 프로그램 중, Filezilla 프로그램이 무료로 사용 가능하며, 강력한 성능을 자랑한다.</li></ul><a id="more"></a><h2 id="Filezilla-이용-방법"><a href="#Filezilla-이용-방법" class="headerlink" title="Filezilla 이용 방법"></a>Filezilla 이용 방법</h2><hr><h3 id="1-검색엔진에-filezilla-검색하여-공식-사이트-접속"><a href="#1-검색엔진에-filezilla-검색하여-공식-사이트-접속" class="headerlink" title="1. 검색엔진에 [filezilla] 검색하여 공식 사이트 접속"></a>1. 검색엔진에 [filezilla] 검색하여 공식 사이트 접속</h3><h3 id="2-사이트-화면-중앙에-있는-Doiwnload-Filezilla-Client-버튼-클릭"><a href="#2-사이트-화면-중앙에-있는-Doiwnload-Filezilla-Client-버튼-클릭" class="headerlink" title="2. 사이트 화면 중앙에 있는 [Doiwnload Filezilla Client] 버튼 클릭"></a>2. 사이트 화면 중앙에 있는 [Doiwnload Filezilla Client] 버튼 클릭</h3><ul><li>Client : FTP 서버에 접속하게 도와주는 프로그램</li><li>Server : FTP 서버를 운영할 수 있게 도와주는 프로그램</li></ul><h3 id="3-다운로드-페이지에서-Download-FileZilla-Client-버튼-클릭"><a href="#3-다운로드-페이지에서-Download-FileZilla-Client-버튼-클릭" class="headerlink" title="3. 다운로드 페이지에서 [Download FileZilla Client] 버튼 클릭"></a>3. 다운로드 페이지에서 [Download FileZilla Client] 버튼 클릭</h3><h3 id="4-Filezilla-프로그램-실행"><a href="#4-Filezilla-프로그램-실행" class="headerlink" title="4. Filezilla 프로그램 실행"></a>4. Filezilla 프로그램 실행</h3><h3 id="5-관리자에-원하는-FTP-등록-및-사용하기-위해-화면-왼쪽-상단-사이트-관리자-버튼-클릭"><a href="#5-관리자에-원하는-FTP-등록-및-사용하기-위해-화면-왼쪽-상단-사이트-관리자-버튼-클릭" class="headerlink" title="5. 관리자에 원하는 FTP 등록 및 사용하기 위해 화면 왼쪽 상단 사이트 관리자 버튼 클릭"></a>5. 관리자에 원하는 FTP 등록 및 사용하기 위해 화면 왼쪽 상단 사이트 관리자 버튼 클릭</h3><h3 id="6-사이트-관리자-하단에-있는-새-사이트-버튼-클릭하여-정보-입력"><a href="#6-사이트-관리자-하단에-있는-새-사이트-버튼-클릭하여-정보-입력" class="headerlink" title="6. 사이트 관리자 하단에 있는 [새 사이트] 버튼 클릭하여 정보 입력"></a>6. 사이트 관리자 하단에 있는 [새 사이트] 버튼 클릭하여 정보 입력</h3><ul><li>프로토콜 : SFTP - SSH File Transfer Protocol</li><li>호스트 : [도메인 주소; wps.django.wpsshool.site]</li><li>로그인 유형 : 키 파일</li><li>사용자 : ubuntu</li><li>키 파일 : [키 파일; wps-django.pem]</li><li>연결</li></ul><h3 id="7-처음-접속-시-항상-이-호스트를-신뢰하고-이-키를-캐시에-등록-체크-및-확인-버튼-클릭"><a href="#7-처음-접속-시-항상-이-호스트를-신뢰하고-이-키를-캐시에-등록-체크-및-확인-버튼-클릭" class="headerlink" title="7. 처음 접속 시, [항상 이 호스트를 신뢰하고 이 키를 캐시에 등록] 체크 및 [확인] 버튼 클릭"></a>7. 처음 접속 시, [항상 이 호스트를 신뢰하고 이 키를 캐시에 등록] 체크 및 [확인] 버튼 클릭</h3><ul><li>서버 파일 목록 조회 확인</li><li>접속되지 않는다면, 접속 정보 확인하거나 AWS의 경우, 보안 그룹 확인</li></ul><h3 id="8-접속-시-원하는-디렉터리에서-시작하고-싶다면-사이트-관리자에서-원하는-FTP-서버-선택-후-고급-탭으로-이동해-기본-로컬-디렉토리와-기본-리모트-디렉토리-설정"><a href="#8-접속-시-원하는-디렉터리에서-시작하고-싶다면-사이트-관리자에서-원하는-FTP-서버-선택-후-고급-탭으로-이동해-기본-로컬-디렉토리와-기본-리모트-디렉토리-설정" class="headerlink" title="8. 접속 시 원하는 디렉터리에서 시작하고 싶다면 사이트 관리자에서 원하는 FTP 서버 선택 후, [고급] 탭으로 이동해 기본 로컬 디렉토리와 기본 리모트 디렉토리 설정"></a>8. 접속 시 원하는 디렉터리에서 시작하고 싶다면 사이트 관리자에서 원하는 FTP 서버 선택 후, [고급] 탭으로 이동해 기본 로컬 디렉토리와 기본 리모트 디렉토리 설정</h3><ul><li>서버 종류 : 기본(자동 감지)</li><li>기본 로컬 디렉터리 : /Users/positipman/Desktop/sample_project</li><li>기본 리모트 디렉터리 : /var/www/django</li><li>연결</li></ul><h3 id="9-원하는-파일-전송"><a href="#9-원하는-파일-전송" class="headerlink" title="9. 원하는 파일 전송"></a>9. 원하는 파일 전송</h3><ul><li>파일 업로드가 되지 않는다면, 터미널에서 아래와 같은 명령 실행<ul><li>ssh -i ~/.ssh/[키 파일명] ubuntu@[도메인 주소]</li><li>sudo useradd -a -G www-data ubuntu</li><li>sudo chmod -R g+w /var/www/django</li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/30/190530-django-FTP/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nginx를 사용한 리소스 파일 서빙하기</title>
      <link>https://chohyeonkeun.github.io/2019/05/30/190530-django-nginx-resource-serving/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/30/190530-django-nginx-resource-serving/</guid>
      <pubDate>Wed, 29 May 2019 17:03:11 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;1-각-사이트를-위한-nginx의-설정-파일-편집하여-아래-내용-추가&quot;&gt;&lt;a href=&quot;#1-각-사이트를-위한-nginx의-설정-파일-편집하여-아래-내용-추가&quot; class=&quot;headerlink&quot; title=&quot;1. 각 사이트를 위한 nginx의 설정 파일 편집하여 아래 내용 추가&quot;&gt;&lt;/a&gt;1. 각 사이트를 위한 nginx의 설정 파일 편집하여 아래 내용 추가&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;경로&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh -i ~/.ssh/[키 페어 파일 이름] ubuntu@[퍼블릭 DNS 혹은 IP 주소]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo vim /etc/nginx/sites-available/staticweb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="1-각-사이트를-위한-nginx의-설정-파일-편집하여-아래-내용-추가"><a href="#1-각-사이트를-위한-nginx의-설정-파일-편집하여-아래-내용-추가" class="headerlink" title="1. 각 사이트를 위한 nginx의 설정 파일 편집하여 아래 내용 추가"></a>1. 각 사이트를 위한 nginx의 설정 파일 편집하여 아래 내용 추가</h3><ul><li><p>경로</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i ~/.ssh/[키 페어 파일 이름] ubuntu@[퍼블릭 DNS 혹은 IP 주소]</span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/sites-available/staticweb</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>내용 추가<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 최대 업로드 용량</span></span><br><span class="line">client_max_body_size <span class="number">75</span>M;  <span class="comment">// adjust to taste</span></span><br><span class="line"></span><br><span class="line">location /media &#123;</span><br><span class="line">    alias /<span class="keyword">var</span>/www/django/media;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /<span class="keyword">static</span> &#123;</span><br><span class="line">    alias /<span class="keyword">var</span>/www/django/<span class="keyword">static</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-서버-설정-적용을-위해-Nginx-재시작"><a href="#2-서버-설정-적용을-위해-Nginx-재시작" class="headerlink" title="2. 서버 설정 적용을 위해 Nginx 재시작"></a>2. 서버 설정 적용을 위해 Nginx 재시작</h3><pre><code>$ sudo systemctl restart nginx</code></pre>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/30/190530-django-nginx-resource-serving/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Static 파일 서빙하기</title>
      <link>https://chohyeonkeun.github.io/2019/05/29/190529-django-static-serving/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/29/190529-django-static-serving/</guid>
      <pubDate>Wed, 29 May 2019 14:59:48 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Static-파일이란&quot;&gt;&lt;a href=&quot;#Static-파일이란&quot; class=&quot;headerlink&quot; title=&quot;Static 파일이란?&quot;&gt;&lt;/a&gt;Static 파일이란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Static 파일 : 서버에서 미리 준비해둔 파일&lt;/li&gt;
&lt;li&gt;‘{‘ + ‘% load static %’ + ‘}’을 이용해 static 태그를 불러와서 리소스 사용 가능(디버그 모드일 때만 정상 동작) &lt;/li&gt;
&lt;li&gt;whitenoise를 사용하면 라이브 서버에서도 스테틱 파일을 사용할 수 있다.(S3 이용 못할 시, 사용)&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Static-파일이란"><a href="#Static-파일이란" class="headerlink" title="Static 파일이란?"></a>Static 파일이란?</h2><ul><li>Static 파일 : 서버에서 미리 준비해둔 파일</li><li>‘{‘ + ‘% load static %’ + ‘}’을 이용해 static 태그를 불러와서 리소스 사용 가능(디버그 모드일 때만 정상 동작) </li><li>whitenoise를 사용하면 라이브 서버에서도 스테틱 파일을 사용할 수 있다.(S3 이용 못할 시, 사용)</li></ul><a id="more"></a><h2 id="Static-파일-서빙-위한-절차"><a href="#Static-파일-서빙-위한-절차" class="headerlink" title="Static 파일 서빙 위한 절차"></a>Static 파일 서빙 위한 절차</h2><h3 id="1-whitenoise-설치"><a href="#1-whitenoise-설치" class="headerlink" title="1. whitenoise 설치"></a>1. whitenoise 설치</h3><pre><code>$ pip install whitenoise</code></pre><h3 id="2-설정파일-MIDDLEWARE에-whitenoise-추가"><a href="#2-설정파일-MIDDLEWARE에-whitenoise-추가" class="headerlink" title="2. 설정파일 MIDDLEWARE에 whitenoise 추가"></a>2. 설정파일 MIDDLEWARE에 whitenoise 추가</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'whitenoise.middleware.WhiteNoiseMiddleware'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-설정파일에-static-관련-설정-추가"><a href="#3-설정파일에-static-관련-설정-추가" class="headerlink" title="3. 설정파일에 static 관련 설정 추가"></a>3. 설정파일에 static 관련 설정 추가</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br></pre></td></tr></table></figure><h3 id="4-디버그-모드-끄고-서버-접속-기본적으로-디버그-모드-비활성화-시-스테틱-미디어-파일-서빙-불가"><a href="#4-디버그-모드-끄고-서버-접속-기본적으로-디버그-모드-비활성화-시-스테틱-미디어-파일-서빙-불가" class="headerlink" title="4. 디버그 모드 끄고 서버 접속(기본적으로 디버그 모드 비활성화 시, 스테틱/미디어 파일 서빙 불가)"></a>4. 디버그 모드 끄고 서버 접속(기본적으로 디버그 모드 비활성화 시, 스테틱/미디어 파일 서빙 불가)</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure><h3 id="5-기존-존재하는-스테틱-파일들을-STATIC-ROOT-폴더에-모아둔다"><a href="#5-기존-존재하는-스테틱-파일들을-STATIC-ROOT-폴더에-모아둔다" class="headerlink" title="5. 기존 존재하는 스테틱 파일들을 STATIC_ROOT 폴더에 모아둔다."></a>5. 기존 존재하는 스테틱 파일들을 STATIC_ROOT 폴더에 모아둔다.</h3><pre><code>$ python manage.py collectstatic- whitenoise는 STATIC_URL이 포함된 리소스를 STATIC_ROOT에서 찾아 전달하는 역할을 한다.- 기존 스테틱 파일들을 STATIC_ROOT 폴더에 모아두어야 하는데 이 명령어가 collectstatic 이다.</code></pre>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/29/190529-django-static-serving/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Media 파일 서빙하기</title>
      <link>https://chohyeonkeun.github.io/2019/05/29/190529-django-media-serving/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/29/190529-django-media-serving/</guid>
      <pubDate>Wed, 29 May 2019 14:11:10 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;1-미디어-파일-관련-설정&quot;&gt;&lt;a href=&quot;#1-미디어-파일-관련-설정&quot; class=&quot;headerlink&quot; title=&quot;1. 미디어 파일 관련 설정&quot;&gt;&lt;/a&gt;1. 미디어 파일 관련 설정&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 경로 : 프로젝트 &amp;gt; settings.py
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MEDIA_URL = &lt;span class=&quot;string&quot;&gt;&#39;/media/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MEDIA_ROOT = os.path.join(BASE_DIR, &lt;span class=&quot;string&quot;&gt;&#39;media&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="1-미디어-파일-관련-설정"><a href="#1-미디어-파일-관련-설정" class="headerlink" title="1. 미디어 파일 관련 설정"></a>1. 미디어 파일 관련 설정</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-디버그-모드일-경우-urlpatterns-에-MEDIA-URL-MEDIA-ROOT-패턴-추가"><a href="#2-디버그-모드일-경우-urlpatterns-에-MEDIA-URL-MEDIA-ROOT-패턴-추가" class="headerlink" title="2. 디버그 모드일 경우, urlpatterns 에 MEDIA_URL, MEDIA_ROOT 패턴 추가"></a>2. 디버그 모드일 경우, urlpatterns 에 MEDIA_URL, MEDIA_ROOT 패턴 추가</h3><pre><code>- 경로 : 프로젝트 &gt; urls.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"></span><br><span class="line">urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h3 id="3-라이브-상태일-때-serve-뷰-사용하여-연결"><a href="#3-라이브-상태일-때-serve-뷰-사용하여-연결" class="headerlink" title="3. 라이브 상태일 때, serve 뷰 사용하여 연결"></a>3. 라이브 상태일 때, serve 뷰 사용하여 연결</h3><pre><code>- 경로 : 프로젝트 &gt; urls.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    re_path(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">'document_root'</span>:settings.MEDIA_ROOT&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4-설정파일에서-DEBUG를-False로-변경"><a href="#4-설정파일에서-DEBUG를-False로-변경" class="headerlink" title="4. 설정파일에서 DEBUG를 False로 변경"></a>4. 설정파일에서 DEBUG를 False로 변경</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure><h3 id="5-이미지-제대로-출력되는지-확인"><a href="#5-이미지-제대로-출력되는지-확인" class="headerlink" title="5. 이미지 제대로 출력되는지 확인"></a>5. 이미지 제대로 출력되는지 확인</h3><hr><p>이 방법은 S3을 사용하지 않고 이미지 파일을 서빙하는 방법이다. 더 나은 방식은 Nginx 등 웹 서버에서 셋팅해주는 방식이다.</p>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/29/190529-django-media-serving/#disqus_thread</comments>
    </item>
    
    <item>
      <title>git을 이용한 협업</title>
      <link>https://chohyeonkeun.github.io/2019/05/28/190528-github-cowork/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/28/190528-github-cowork/</guid>
      <pubDate>Tue, 28 May 2019 14:11:10 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;PM과 팀원들이 깃허브를 통해 개발 협업을 진행 할 때, &lt;/li&gt;
&lt;li&gt;로컬저장소 develop 브런치와 원격저장소 develop 브런치 사이에서 push와 pull을 사용하여 협업을 진행하게 된다.&lt;/li&gt;
&lt;li&gt;아래와 같이 PM과 팀원 간 협업 절차를 간략하게 나타내보았다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>PM과 팀원들이 깃허브를 통해 개발 협업을 진행 할 때, </li><li>로컬저장소 develop 브런치와 원격저장소 develop 브런치 사이에서 push와 pull을 사용하여 협업을 진행하게 된다.</li><li>아래와 같이 PM과 팀원 간 협업 절차를 간략하게 나타내보았다.</li></ul><a id="more"></a><h3 id="PM-1-깃허브-organization-생성"><a href="#PM-1-깃허브-organization-생성" class="headerlink" title="PM 1) 깃허브 organization 생성"></a>PM 1) 깃허브 organization 생성</h3><p><img src="https://user-images.githubusercontent.com/48202867/58531385-13d68880-821d-11e9-8f4e-0f298e1e25f2.png" alt="Screenshot from 2019-05-29 14-16-48"></p><pre><code>- 여기서 New organization 클릭 &gt; Organization name : wps-blog &gt; Create organization</code></pre><h3 id="PM-2-팀원-초대"><a href="#PM-2-팀원-초대" class="headerlink" title="PM 2) 팀원 초대"></a>PM 2) 팀원 초대</h3><pre><code>- 함께 프로젝트 진행할 팀원 초대 및 권한 설정(read -&gt; write)</code></pre><h3 id="PM-3-깃허브-new-repository-생성"><a href="#PM-3-깃허브-new-repository-생성" class="headerlink" title="PM 3) 깃허브 new repository 생성"></a>PM 3) 깃허브 new repository 생성</h3><pre><code>blogproject</code></pre><h3 id="PM-4-깃허브-repository-경로-복사"><a href="#PM-4-깃허브-repository-경로-복사" class="headerlink" title="PM 4) 깃허브 repository 경로 복사"></a>PM 4) 깃허브 repository 경로 복사</h3><pre><code>https://github.com/wps-shk/blogproject.git</code></pre><h3 id="PM-5-생성한-repository에-업로드할-디렉토리-경로로-이동"><a href="#PM-5-생성한-repository에-업로드할-디렉토리-경로로-이동" class="headerlink" title="PM 5) 생성한 repository에 업로드할 디렉토리 경로로 이동"></a>PM 5) 생성한 repository에 업로드할 디렉토리 경로로 이동</h3><pre><code>$ cd blog_project(디렉토리 명)</code></pre><h3 id="PM-6-git-init"><a href="#PM-6-git-init" class="headerlink" title="PM 6) git init"></a>PM 6) git init</h3><pre><code>해당 디렉토리에 git 초기화</code></pre><h3 id="PM-7-git-flow-init"><a href="#PM-7-git-flow-init" class="headerlink" title="PM 7) git flow init"></a>PM 7) git flow init</h3><pre><code>- 대표 branch 모델인 git flow를 이용한 초기화(기본값으로 설정 시, 모두 enter)- git flow 다운로드 : https://github.com/nvie/gitflow</code></pre><h3 id="PM-8-git-remote-add-원격저장소-명-repository-경로"><a href="#PM-8-git-remote-add-원격저장소-명-repository-경로" class="headerlink" title="PM 8) git remote add [원격저장소 명] [repository 경로]"></a>PM 8) git remote add [원격저장소 명] [repository 경로]</h3><pre><code>- 생성한 repostiory 경로(원격 저장소)를 origin으로 명명ex) git remote add origin https://github.com/wps-shk/blogproject.git</code></pre><h3 id="PM-9-git-add-변경된-파일"><a href="#PM-9-git-add-변경된-파일" class="headerlink" title="PM 9) git add [변경된 파일]"></a>PM 9) git add [변경된 파일]</h3><pre><code>- 변경본 반영 리스트 작성    ex) git add -A (현재 디렉토리에서 변경한 모든 파일 추가)</code></pre><h3 id="PM-10-git-commit"><a href="#PM-10-git-commit" class="headerlink" title="PM 10) git commit"></a>PM 10) git commit</h3><pre><code>- 로컬 저장소에 변경 사항 반영    ex) git commit -m &apos;변경 내용 description&apos;</code></pre><h3 id="PM-11-git-push-원격저장소-명-develop"><a href="#PM-11-git-push-원격저장소-명-develop" class="headerlink" title="PM 11) git push [원격저장소 명] develop"></a>PM 11) git push [원격저장소 명] develop</h3><pre><code>- 원격저장소에 develop branch에 있는 내용 push    ex) git push origin develop</code></pre><h3 id="팀원-1-git-clone-원격저장소-경로"><a href="#팀원-1-git-clone-원격저장소-경로" class="headerlink" title="팀원 1) git clone [원격저장소 경로]"></a>팀원 1) git clone [원격저장소 경로]</h3><pre><code>- 원격저장소에 있는 파일 복사    ex) git clone https://github.com/wps-shk/blogproject.git  </code></pre><h3 id="PM-12-git-flow-feature-start-브런치-명"><a href="#PM-12-git-flow-feature-start-브런치-명" class="headerlink" title="PM 12) git flow feature start [브런치 명]"></a>PM 12) git flow feature start [브런치 명]</h3><pre><code>- git flow 명령어를 이용한 feature branch 생성    ex) git flow feature start models</code></pre><h3 id="PM-13-git-add-변경된-파일"><a href="#PM-13-git-add-변경된-파일" class="headerlink" title="PM 13) git add [변경된 파일]"></a>PM 13) git add [변경된 파일]</h3><pre><code>- 변경본 반영 리스트 작성    ex) git add -A</code></pre><h3 id="PM-14-git-commit"><a href="#PM-14-git-commit" class="headerlink" title="PM 14) git commit"></a>PM 14) git commit</h3><pre><code>- 로컬 저장소에 변경 사항 반영    ex) git commit -m &apos;변경 내용 description&apos;</code></pre><h3 id="PM-15-git-push-원격저장소-명-브런치-명"><a href="#PM-15-git-push-원격저장소-명-브런치-명" class="headerlink" title="PM 15) git push [원격저장소 명] [브런치 명]"></a>PM 15) git push [원격저장소 명] [브런치 명]</h3><pre><code>- 해당 브런치에 반영된 변경내용을 원격저장소에 push    ex) git push origin feature/model</code></pre><h3 id="PM-16-원격저장소-develop에-pull-request"><a href="#PM-16-원격저장소-develop에-pull-request" class="headerlink" title="PM 16) 원격저장소 develop에 pull request"></a>PM 16) 원격저장소 develop에 pull request</h3><pre><code>- 원격저장소에 push 이후, 깃허브에 pull request 진행    (compare: develop -&gt; base: develop)</code></pre><h3 id="팀원-2-팀원이-pull-request-승인"><a href="#팀원-2-팀원이-pull-request-승인" class="headerlink" title="팀원 2) 팀원이 pull request 승인"></a>팀원 2) 팀원이 pull request 승인</h3><pre><code>- 깃허브에서 pull request 승인</code></pre><h3 id="PM-17-git-flow-feature-finish-브런치-명"><a href="#PM-17-git-flow-feature-finish-브런치-명" class="headerlink" title="PM 17) git flow feature finish [브런치 명]"></a>PM 17) git flow feature finish [브런치 명]</h3><pre><code>- push 한 브런치 삭제    ex) git flow feature finish feature/model    -&gt; 자동으로 로컬저장소 develop 브런치에 merge되고 삭제</code></pre><h3 id="팀원-3-git-pull-원격저장소-주소"><a href="#팀원-3-git-pull-원격저장소-주소" class="headerlink" title="팀원 3) git pull [원격저장소 주소]"></a>팀원 3) git pull [원격저장소 주소]</h3><pre><code>- 팀원이 원격저장소의 develop 브런치 내용 pull로 fetch + merge 진행     ex) git pull https://github.com/wps-shk/blogproject.git</code></pre><h3 id="팀원-4-git-flow-feature-start-브런치-명"><a href="#팀원-4-git-flow-feature-start-브런치-명" class="headerlink" title="팀원 4) git flow feature start [브런치 명]"></a>팀원 4) git flow feature start [브런치 명]</h3><pre><code>- 로컬저장소에 feature 브런치 새로 생성    ex) git flow feature start views </code></pre><h3 id="팀원-5-git-add-변경된-파일"><a href="#팀원-5-git-add-변경된-파일" class="headerlink" title="팀원 5) git add [변경된 파일]"></a>팀원 5) git add [변경된 파일]</h3><pre><code>- 변경본 반영 리스트 작성    ex) git add -A (변경한 모든 파일 추가)</code></pre><h3 id="팀원-6-git-commit"><a href="#팀원-6-git-commit" class="headerlink" title="팀원 6) git commit"></a>팀원 6) git commit</h3><pre><code>- 로컬 저장소에 변경 사항 반영    ex) git commit -m &apos;변경 내용 description&apos;</code></pre><h3 id="팀원-7-git-push-원격저장소-명-push할-브런치"><a href="#팀원-7-git-push-원격저장소-명-push할-브런치" class="headerlink" title="팀원 7) git push [원격저장소 명] [push할 브런치]"></a>팀원 7) git push [원격저장소 명] [push할 브런치]</h3><pre><code>- 원격저장소 develop 브런치에 feature/views 브런치 push    ex) git push origin feature/views</code></pre><h3 id="팀원-8-원격저장소-develop에-pull-request-진행-및-승인"><a href="#팀원-8-원격저장소-develop에-pull-request-진행-및-승인" class="headerlink" title="팀원 8) 원격저장소 develop에 pull request 진행 및 승인"></a>팀원 8) 원격저장소 develop에 pull request 진행 및 승인</h3><pre><code>- PM에게 pull request 진행 및 승인    (compare: develop -&gt; base: develop)</code></pre><h3 id="팀원-9-git-flow-feature-finish-브런치-명"><a href="#팀원-9-git-flow-feature-finish-브런치-명" class="headerlink" title="팀원 9) git flow feature finish [브런치 명]"></a>팀원 9) git flow feature finish [브런치 명]</h3><pre><code>- push 진행한 feature/views 브런치 삭제 및 develop에 merge    ex) git flow feature finish views</code></pre><h3 id="PM-18-원격저장소-develop-브런치-pull"><a href="#PM-18-원격저장소-develop-브런치-pull" class="headerlink" title="PM 18) 원격저장소 develop 브런치 pull"></a>PM 18) 원격저장소 develop 브런치 pull</h3><pre><code>- 로컬저장소 develop 브런치에서 최근에 merge된 원격저장소 develop 브런치 pull    ex) git pull https://github.com/wps-shk/blogproject.git</code></pre><h3 id="앞서-설명한-절차-반복"><a href="#앞서-설명한-절차-반복" class="headerlink" title="앞서 설명한 절차 반복"></a>앞서 설명한 절차 반복</h3>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/28/190528-github-cowork/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CKEditor 이미지 파일 업로더 설정</title>
      <link>https://chohyeonkeun.github.io/2019/05/27/190527-django-ckeditor/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/27/190527-django-ckeditor/</guid>
      <pubDate>Mon, 27 May 2019 14:22:31 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;1-django-ckeditor-설치&quot;&gt;&lt;a href=&quot;#1-django-ckeditor-설치&quot; class=&quot;headerlink&quot; title=&quot;1. django-ckeditor 설치&quot;&gt;&lt;/a&gt;1. django-ckeditor 설치&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ pip install django-ckeditor
&lt;/code&gt;&lt;/pre&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="1-django-ckeditor-설치"><a href="#1-django-ckeditor-설치" class="headerlink" title="1. django-ckeditor 설치"></a>1. django-ckeditor 설치</h3><pre><code>$ pip install django-ckeditor</code></pre><a id="more"></a><h3 id="2-INSTALLED-APPS-항목에-ckeditor와-ckeditor-uploader-추가"><a href="#2-INSTALLED-APPS-항목에-ckeditor와-ckeditor-uploader-추가" class="headerlink" title="2. INSTALLED_APPS 항목에 ckeditor와 ckeditor_uploader 추가"></a>2. INSTALLED_APPS 항목에 ckeditor와 ckeditor_uploader 추가</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'ckeditor'</span>,</span><br><span class="line">    <span class="string">'ckeditor_uploader'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-설정파일에-MEDIA-ROOT-지정-S3-사용할-경우-불필요"><a href="#3-설정파일에-MEDIA-ROOT-지정-S3-사용할-경우-불필요" class="headerlink" title="3. 설정파일에 MEDIA_ROOT 지정 (S3 사용할 경우 불필요)"></a>3. 설정파일에 MEDIA_ROOT 지정 (S3 사용할 경우 불필요)</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py    MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;)</code></pre><h3 id="4-만약-media-root-하위-폴더에-에디터용-전용-경로를-설정하고-싶다면"><a href="#4-만약-media-root-하위-폴더에-에디터용-전용-경로를-설정하고-싶다면" class="headerlink" title="4. 만약 media_root 하위 폴더에 에디터용 전용 경로를 설정하고 싶다면,"></a>4. 만약 media_root 하위 폴더에 에디터용 전용 경로를 설정하고 싶다면,</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py    CKEDITOR_UPLOAD_PATH = &apos;wysiwyg/&apos;</code></pre><h3 id="5-에디터를-사용하는-유저별로-자신이-올린-파일들만-사용할-수-있게-하려면"><a href="#5-에디터를-사용하는-유저별로-자신이-올린-파일들만-사용할-수-있게-하려면" class="headerlink" title="5. 에디터를 사용하는 유저별로 자신이 올린 파일들만 사용할 수 있게 하려면,"></a>5. 에디터를 사용하는 유저별로 자신이 올린 파일들만 사용할 수 있게 하려면,</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py    CKEDITOR_RESTRICT_BY_USER = True</code></pre><h3 id="6-에디터를-설정할-필드를-모델에-생성"><a href="#6-에디터를-설정할-필드를-모델에-생성" class="headerlink" title="6. 에디터를 설정할 필드를 모델에 생성"></a>6. 에디터를 설정할 필드를 모델에 생성</h3><pre><code>- 경로 : 앱 &gt; models.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ckeditor_uploader.fields <span class="keyword">import</span> RichTextUploadingField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    content = RichTextUploadingField()</span><br></pre></td></tr></table></figure><h3 id="7-모델에-변경-사항-생겼으므로-마이그레이션-진행"><a href="#7-모델에-변경-사항-생겼으므로-마이그레이션-진행" class="headerlink" title="7. 모델에 변경 사항 생겼으므로 마이그레이션 진행"></a>7. 모델에 변경 사항 생겼으므로 마이그레이션 진행</h3><pre><code>$ python manage.py makemigrations [앱이름]$ python manage.py migrate [앱이름]</code></pre><h3 id="8-업로딩-처리를-위한-필수-뷰-등록"><a href="#8-업로딩-처리를-위한-필수-뷰-등록" class="headerlink" title="8. 업로딩 처리를 위한 필수 뷰 등록"></a>8. 업로딩 처리를 위한 필수 뷰 등록</h3><pre><code>- 경로 : 프로젝트 &gt; urls.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'ckeditor/'</span>, include(<span class="string">'ckeditor_uploader.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/27/190527-django-ckeditor/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WYSIWIG 적용 방법</title>
      <link>https://chohyeonkeun.github.io/2019/05/27/190527-django-wysiwig/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/27/190527-django-wysiwig/</guid>
      <pubDate>Mon, 27 May 2019 13:09:13 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;WYSIWIG란&quot;&gt;&lt;a href=&quot;#WYSIWIG란&quot; class=&quot;headerlink&quot; title=&quot;WYSIWIG란?&quot;&gt;&lt;/a&gt;WYSIWIG란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;What You See Is What You Get의 약어&lt;/li&gt;
&lt;li&gt;웹 브라우저에서 사용할 수 있는 HTML 편집기&lt;/li&gt;
&lt;li&gt;일반적으로 웹에서 긴 내용의 텍스트를 입력받을 때는 textareat태그를 사용하나,&lt;/li&gt;
&lt;li&gt;블로그, 게시판 등에서는 주로 HTML을 사용한 편집기를 사용한다.&lt;/li&gt;
&lt;li&gt;ckeditor, tinymce 등 JS를 이용한 플러그인 사용&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="WYSIWIG란"><a href="#WYSIWIG란" class="headerlink" title="WYSIWIG란?"></a>WYSIWIG란?</h2><ul><li>What You See Is What You Get의 약어</li><li>웹 브라우저에서 사용할 수 있는 HTML 편집기</li><li>일반적으로 웹에서 긴 내용의 텍스트를 입력받을 때는 textareat태그를 사용하나,</li><li>블로그, 게시판 등에서는 주로 HTML을 사용한 편집기를 사용한다.</li><li>ckeditor, tinymce 등 JS를 이용한 플러그인 사용</li></ul><a id="more"></a><h2 id="WYSIWIG-적용-순서"><a href="#WYSIWIG-적용-순서" class="headerlink" title="WYSIWIG 적용 순서"></a>WYSIWIG 적용 순서</h2><h3 id="1-django-ckeditor-모듈-다운받아-설치"><a href="#1-django-ckeditor-모듈-다운받아-설치" class="headerlink" title="1. django-ckeditor 모듈 다운받아 설치"></a>1. django-ckeditor 모듈 다운받아 설치</h3><pre><code>$ pip install django-ckeditor</code></pre><h3 id="2-INSTALLED-APPS에-ckeditor-추가"><a href="#2-INSTALLED-APPS에-ckeditor-추가" class="headerlink" title="2. INSTALLED_APPS에 ckeditor 추가"></a>2. INSTALLED_APPS에 ckeditor 추가</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'ckeditor'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-모델에-RichTextField-추가"><a href="#3-모델에-RichTextField-추가" class="headerlink" title="3. 모델에 RichTextField 추가"></a>3. 모델에 RichTextField 추가</h3><pre><code>- 경로 : 앱 &gt; models.py</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> ckeditor.fields <span class="keyword">import</span> RichTextField</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    content = RichTextField()</span><br></pre></td></tr></table></figure><h3 id="4-모델-변경사항-있으므로-마이그레이션-진행"><a href="#4-모델-변경사항-있으므로-마이그레이션-진행" class="headerlink" title="4. 모델 변경사항 있으므로, 마이그레이션 진행"></a>4. 모델 변경사항 있으므로, 마이그레이션 진행</h3><pre><code>$ python manage.py makemigrations [앱이름]$ python manage.py migrate [앱이름]</code></pre><h3 id="5-관리자페이지에서-해당-필드가-에디터-형태로-나타나는지-확인"><a href="#5-관리자페이지에서-해당-필드가-에디터-형태로-나타나는지-확인" class="headerlink" title="5. 관리자페이지에서 해당 필드가 에디터 형태로 나타나는지 확인"></a>5. 관리자페이지에서 해당 필드가 에디터 형태로 나타나는지 확인</h3><h3 id="6-프론트-페이지에서도-에디터를-나타나게-하도록-적절한-뷰-만들고-폼-출력"><a href="#6-프론트-페이지에서도-에디터를-나타나게-하도록-적절한-뷰-만들고-폼-출력" class="headerlink" title="6. 프론트 페이지에서도 에디터를 나타나게 하도록 적절한 뷰 만들고 폼 출력"></a>6. 프론트 페이지에서도 에디터를 나타나게 하도록 적절한 뷰 만들고 폼 출력</h3><pre><code>- 경로 : 앱 &gt; templates &gt; 앱 &gt; html 파일- 폼 출력할 때 필수로 {{form.media}} 사용- 관리자 개발도구에서 폼 안쪽 추가된 스크립트 확인 가능</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123;form.media&#125;&#125;</span><br><span class="line">    &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Write"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-선택-추후-S3-연동하기-위한-설정-필요"><a href="#7-선택-추후-S3-연동하기-위한-설정-필요" class="headerlink" title="7. (선택) 추후 S3 연동하기 위한 설정 필요"></a>7. (선택) 추후 S3 연동하기 위한 설정 필요</h3><pre><code>- 경로 : 프로젝트 &gt; settings.py    AWS_QUERYSTRING_AUTH = False</code></pre>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/27/190527-django-wysiwig/#disqus_thread</comments>
    </item>
    
    <item>
      <title>EC2에 장고 서버 셋팅</title>
      <link>https://chohyeonkeun.github.io/2019/05/26/190526-django-EC2-django-server/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/26/190526-django-EC2-django-server/</guid>
      <pubDate>Sun, 26 May 2019 12:31:40 GMT</pubDate>
      <description>
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;EC2에 SSH로 접속&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh -i ~/.ssh/[키 페어 파일 이름; django-wps.pem] ubuntu@[도메인 주소]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;장고를 위한 계정 추가&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo useradd -g www-data -b /home -m -s /bin/bash django&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ol><li><p>EC2에 SSH로 접속</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i ~/.ssh/[키 페어 파일 이름; django-wps.pem] ubuntu@[도메인 주소]</span><br></pre></td></tr></table></figure></li><li><p>장고를 위한 계정 추가</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo useradd -g www-data -b /home -m -s /bin/bash django</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="3"><li><p>소스 코드 업로드할 폴더 생성</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p /var/www/django</span><br></pre></td></tr></table></figure></li><li><p>소스코드 폴더의 소유자 변경</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R django:www-data /var/www/django</span><br></pre></td></tr></table></figure></li><li><p>파일 업로드를 위해 ubuntu 계정을 www-data 그룹에 추가</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -a -G www-data ubuntu</span><br></pre></td></tr></table></figure></li><li><p>소스 코드 폴더에 그룹 쓰기 권한 부여</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod -R g+w /var/www/django</span><br></pre></td></tr></table></figure></li><li><p>파이썬 관련 패키지 설치</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-dev python3-venv python3-pip</span><br></pre></td></tr></table></figure></li><li><p>소스 코드 폴더 밑에 파이썬 가상 환경 생성</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install virtualenv</span><br><span class="line">$ sudo python3 -m virtualenv /var/www/django/venv</span><br></pre></td></tr></table></figure></li><li><p>관리자 모드로 변경</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -s</span><br></pre></td></tr></table></figure></li><li><p>소스 코드 폴더에서 가상환경 활성화</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/www/django</span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure></li><li><p>가상환경에 장고 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install django</span><br></pre></td></tr></table></figure></li><li><p>장고 프로젝트 생성 및 settings.py 설정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startproject config .</span><br><span class="line">$ <span class="built_in">cd</span> config</span><br><span class="line">$ vi settings.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ALLOWED_HOST = [&apos;*&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></li><li><p>migrate 및 runserver 서버 실행하여 django 연결되었는지 확인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate</span><br><span class="line">$ python manage.py runserver 0:8000</span><br></pre></td></tr></table></figure></li><li><p>WSGI 모듈 중 하나인 uwsgi 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install uwsgi</span><br></pre></td></tr></table></figure></li><li><p>uwsgi 잘 동작하는지 확인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ uwsgi --http :8000 --home /var/www/django/venv/ --<span class="built_in">chdir</span> /var/www/django/ --module config.wsgi</span><br></pre></td></tr></table></figure></li><li><p>관련 폴더 생성 및 설정(run, logs 폴더 생성)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir run logs</span><br></pre></td></tr></table></figure></li><li><p>폴더 소유권 변경</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown django:www-data run</span><br><span class="line">$ sudo chown django:www-data logs</span><br></pre></td></tr></table></figure></li><li><p>ini 폴더 생성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir ini</span><br></pre></td></tr></table></figure></li><li><p>ini 폴더 안에 uwsgi.ini 파일 작성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim ini/uwsgi.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">uid = django</span><br><span class="line">base = /var/www/django</span><br><span class="line"></span><br><span class="line">home = %(base)/venv</span><br><span class="line">chdir = %(base)</span><br><span class="line">module = config.wsgi:application</span><br><span class="line">env = DJANGO_SETTINGS_MODULE=config.settings</span><br><span class="line"></span><br><span class="line">master = true</span><br><span class="line">processes = 5</span><br><span class="line"></span><br><span class="line">socket = %(base)/run/uwsgi.sock</span><br><span class="line">logto = %(base)/logs/uwsgi.log</span><br><span class="line">chown-socket = %(uid):www-data</span><br><span class="line">chmod-socket = 660</span><br><span class="line">vacuum = true</span><br><span class="line">~</span><br><span class="line">~</span><br></pre></td></tr></table></figure></li><li><p>uwsgi.service 파일 생성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/systemd/system/uwsgi.service</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=uWSGI Emperor service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/var/www/django/venv/bin/uwsgi --emperor /var/www/django/ini</span><br><span class="line">User=django</span><br><span class="line">Group=www-data</span><br><span class="line">Restart=on-failure</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=all</span><br><span class="line">StandardError=syslog</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">~</span><br><span class="line">~</span><br></pre></td></tr></table></figure></li><li><p>uwsgi.service 시작하고 시작프로그램으로 등록</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start uwsgi</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> uwsgi</span><br></pre></td></tr></table></figure></li><li><p>기존 스테틱 웹 서버에서 장고 애플리케이션 구동하기 위해 사이트 설정 파일 변경</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/sites-available/staticweb</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream django &#123;</span><br><span class="line">    server unix:/var/www/django/run/uwsgi.sock;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    access_log /var/www/django/logs/access.log;</span><br><span class="line">    error_log /var/www/django/logs/error.log;</span><br><span class="line">    server_name [도메인 주소];</span><br><span class="line"></span><br><span class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include  /etc/nginx/uwsgi_params;</span><br><span class="line">        uwsgi_pass  django;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>장고 소스코드가 있는 폴더의 소유자와 권한 변경</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R django:www-data /var/www/django</span><br><span class="line">$ sudo chmod -R g+w /var/www/django</span><br><span class="line"><span class="comment"># -R : Recursive 옵션; 하위폴더까지 계속 반복해서 적용</span></span><br></pre></td></tr></table></figure></li><li><p>소스코드 파일 수정되었으므로, nginx 재실행</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li><li><p>웹 브라우저 접속하여 사이트 구동여부 확인</p></li></ol>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/26/190526-django-EC2-django-server/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Email 로그인 기능 추가</title>
      <link>https://chohyeonkeun.github.io/2019/05/25/190525-django-Email-login/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/25/190525-django-Email-login/</guid>
      <pubDate>Sat, 25 May 2019 14:01:33 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;장고는 기본적으로 username으로 로그인하는 기능 제공&lt;/li&gt;
&lt;li&gt;username, email 둘 중 하나로 로그인 하도록 커스터마이징 필요&lt;/li&gt;
&lt;li&gt;커스텀 모델 백엔드를 추가하여 email, username 로그인 기능 추가 가능&lt;/li&gt;
&lt;li&gt;로그인 기능 제어하는 것은 AUTHENTICATION_BACKENDS에 설정된 모델 백엔드를 통해 이루어진다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>장고는 기본적으로 username으로 로그인하는 기능 제공</li><li>username, email 둘 중 하나로 로그인 하도록 커스터마이징 필요</li><li>커스텀 모델 백엔드를 추가하여 email, username 로그인 기능 추가 가능</li><li>로그인 기능 제어하는 것은 AUTHENTICATION_BACKENDS에 설정된 모델 백엔드를 통해 이루어진다.</li></ul><a id="more"></a><h2 id="Email-로그인-기능-추가-방법"><a href="#Email-로그인-기능-추가-방법" class="headerlink" title="Email 로그인 기능 추가 방법"></a>Email 로그인 기능 추가 방법</h2><ol><li><p>account 앱에 backends.py 파일 추가하고 코드 입력</p><ul><li>경로 : account &gt; backends.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line">       <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomUserBackend</span><span class="params">(ModelBackend)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request, username=None, password=None, **kwargs)</span>:</span></span><br><span class="line">user = super().authenticate(request, username, password, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"><span class="comment"># id 로그인 실패 상황</span></span><br><span class="line"><span class="comment"># e-mail 로그인 시도</span></span><br><span class="line">UserModel = get_user_model()</span><br><span class="line"><span class="comment"># 원래 id 로그인 처리를 할 때 username이 넘어왔을 경우</span></span><br><span class="line">email = username</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    email = kwargs.get(UserModel.EMAIL_FIELD, kwargs.get(<span class="string">'email'</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user = UserModel._default_manager.get(email=email)</span><br><span class="line"><span class="keyword">except</span> UserModel.DoesNotExist:</span><br><span class="line">    UserModel().set_password(password)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> user.check_password(password) <span class="keyword">and</span> self.user_can_authenticate(user):</span><br><span class="line"><span class="keyword">return</span> user</span><br></pre></td></tr></table></figure></li></ul></li><li><p>새로 만든 백엔드 클래스를 기본 인증 백엔드 클래스로 추가</p><ul><li>경로 : config &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = [</span><br><span class="line">    <span class="string">'account.backends.CustomUserBackend'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Additional"><a href="#Additional" class="headerlink" title="Additional"></a>Additional</h2><ul><li><p>유저 모델을 코드에서 참고하는 3가지 방법</p><ol><li>from django.contrib.auth.models import User</li><li>from django.contrib.auth import get_user_model</li><li>form django.conf import settings // settings.AUTH_USER_MODEL<ul><li>1번이 가장 간단하고 보편적인 방법이나 커스텀 유저모델에 대응 못한다는 단점이 있다.</li><li>2, 3번을 많이 사용하나, 문제 없는 코드를 위해 3번을 주로 사용한다.</li></ul></li></ol></li><li><p>백엔드에서는 아래와 같은 메서드를 사용하여 권한 체크</p><ul><li>has_perm : 사용자가 활성화 상태이고 권한이 있는지 체크</li><li>has_module_pers : 특정 앱의 사용권한이 있는지 체크</li><li>get_all_permissions : 해당 사용자가 가진 모든 권한 목록 반환</li><li>get_group_permissions : 해당 사용자가 속한 그룹의 권한 목록 반환</li><li>get_user_permissions : 해당 사용자가 가진 권한 목록 반환</li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/25/190525-django-Email-login/#disqus_thread</comments>
    </item>
    
    <item>
      <title>커스텀 유저 모델 만들기</title>
      <link>https://chohyeonkeun.github.io/2019/05/24/190524-django-custom-user/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/24/190524-django-custom-user/</guid>
      <pubDate>Fri, 24 May 2019 13:13:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-커스텀-유저-모델이란&quot;&gt;&lt;a href=&quot;#1-커스텀-유저-모델이란&quot; class=&quot;headerlink&quot; title=&quot;1. 커스텀 유저 모델이란?&quot;&gt;&lt;/a&gt;1. 커스텀 유저 모델이란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;기존에 있던 User 모델을 확장해서 내가 원하는 추가 필드를 만드는 것&lt;/li&gt;
&lt;li&gt;User 모델 추가 하기 위해 코어를 수정하게 되면, 호환성 문제 발생 가능(취후의 수단으로 사용할 것)&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-커스텀-유저-모델이란"><a href="#1-커스텀-유저-모델이란" class="headerlink" title="1. 커스텀 유저 모델이란?"></a>1. 커스텀 유저 모델이란?</h2><ul><li>기존에 있던 User 모델을 확장해서 내가 원하는 추가 필드를 만드는 것</li><li>User 모델 추가 하기 위해 코어를 수정하게 되면, 호환성 문제 발생 가능(취후의 수단으로 사용할 것)</li></ul><a id="more"></a><h2 id="2-커스텀-유저-모델-만드는-3가지-방법"><a href="#2-커스텀-유저-모델-만드는-3가지-방법" class="headerlink" title="2. 커스텀 유저 모델 만드는 3가지 방법"></a>2. 커스텀 유저 모델 만드는 3가지 방법</h2><ol><li>기존 유저 모델 확장하여 추가 정보만 입력</li><li>AbstractBaseUser 사용하여 기본 기능 제외한 모든 기능과 필드를 새로 생성</li><li>AbstractUser 사용하여 추가 필드를 포함한 유저 모델 생성</li></ol><hr><blockquote><h3 id="유저-모델-별-숙지사항"><a href="#유저-모델-별-숙지사항" class="headerlink" title="유저 모델 별 숙지사항"></a>유저 모델 별 숙지사항</h3><pre><code>- 3가지 방법 중, 가장 편리한 방법은 AbstractUser를 사용하는 방법이다.    - 주의해야 할 사항 : 기존 유저 정보를 사용 할 수 없으므로 프로젝트 생성 직후, 커스텀 유저 모델과 관리자 계정 생성 필요 - 기존 User 모델은 AbstractUser라는 모델을 상속받아 필수 필드들이 이미 구현되어 있는 상태</code></pre></blockquote><ol><li>AbstractUser 모델 상속<ul><li>AbstractUser 모델은 AbstractBaseUser라는 모델을 상속받아 구현된다.</li><li>Abstract : 모델 설정값에 Abstract 설정되어 있으면, 실제 모델로 사용 불가</li><li>제일 권장하는 방식 - 프로젝트 시작 시점에 고려(기존 데이터 유지 불가))</li></ul></li><li>AbstractBaseUser 모델 상속<ul><li>모든 필드 구조를 변경하고 싶을 때</li><li>퍼미션 기능 등 장고에서 사용하는 유저 기본 기능 전체를 수정하고 싶을 때</li></ul></li><li>기존 User 모델 상속받거나, 확장해서 사용<ul><li>User + AdditionalInfo(생일, 주소, 주민번호)</li><li>회원 수정 페이지 AdditionalInfoForm 추가 출력</li><li>사이트 운영 도중 확장 고려할 때 선택 가능 - 기존 User 데이터 그대로 존재 + 추가 테이블</li></ul></li></ol><h2 id="3-AbstractUser을-이용한-커스텀-모델-생성-방법"><a href="#3-AbstractUser을-이용한-커스텀-모델-생성-방법" class="headerlink" title="3. AbstractUser을 이용한 커스텀 모델 생성 방법"></a>3. AbstractUser을 이용한 커스텀 모델 생성 방법</h2><ol><li><p>장고 프로젝트에 accounts 앱 생성<br> <code>$ python manage.py startapp accounts</code></p></li><li><p>INSTALLED_APPS 에 accounts 앱 추가</p><ul><li>경로 : config &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    accounts,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>AbstractUser 상속받아 새로운 User 모델 작성</p><ul><li>경로 : accounts &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(AbstractUser)</span>:</span> <span class="comment"># 클래스 이름 다른 것으로 작성해도 무방하다.</span></span><br><span class="line">    message = models.TextField(blank=<span class="literal">True</span>)</span><br><span class="line">    profile = models.ImageField(upload_to=<span class="string">'user_images/profile/%Y/%m/%d'</span>, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>커스텀 모델 settings.py에 설정</p><ul><li>경로 : config &gt; settings.py<br>  <code>AUTH_USER_MODEL = &#39;accounts.User&#39;</code></li></ul></li><li><p>새로 만든 유저 모델 DB 생성 위한 명령 실행 및 관리자 계정 생성 이후, 서버 실행</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pillow  <span class="comment"># 이미지 필드 있으므로, Pillow 모듈 설치</span></span><br><span class="line">$ python manage.py makemigrations accounts</span><br><span class="line">$ python manage.py migrate</span><br><span class="line">$ python manage.py createsuperuser</span><br><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure></li><li><p>유저 모델 확장하여 새로 만들었으므로, admin.py 등록</p><ul><li>유저 모델 추가  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">admin.site.register(User)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>admin.py에 UserAdmin 클래스 등록(UserAdmin 클래스 : 유저모델의 옵션 클래스)</p><ul><li>관리자페이지에 조회되는 유저 모델을 기존 사용자 모델과 흡사하게 변경하기 위함  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.admin <span class="keyword">import</span> UserAdmin</span><br><span class="line"></span><br><span class="line">admin.site.register(User, UserAdmin)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>생성한 추가 필드를 관리자페이지에 나타나게 하기 위해 옵션 클래스 새로 만들어 등록</p><ul><li>경로 : accounts &gt; admin.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomUserAdmin</span><span class="params">(UserAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># fieldsets : 관리자 리스트 화면에서 출력될 폼 설정 부분</span></span><br><span class="line">    UserAdmin.fieldsets[<span class="number">1</span>][<span class="number">1</span>][<span class="string">'fields'</span>]+=(<span class="string">'profile'</span>,<span class="string">'message'</span>)</span><br><span class="line">    <span class="comment"># add_fieldsets : User 객체 추가 화면에 출력될 입력 폼 설정 부분</span></span><br><span class="line">    UserAdmin.add_fieldsets += (</span><br><span class="line">        ((<span class="string">'Additional Info'</span>),&#123;<span class="string">'fields'</span>:(<span class="string">'profile'</span>,<span class="string">'message'</span>)&#125;),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CustomUserAdmin을 옵션클래스로 UserAdmin 대신 추가</p><ul><li>경로 : accounts &gt; admin.py<br>  <code>admin.site.register(User, CustomUserAdmin)</code></li></ul></li></ol><h2 id="Additional"><a href="#Additional" class="headerlink" title="Additional"></a>Additional</h2><ul><li>기본 유저폼은 django.contrib.auth.forms에 만들어져 있고, UserAdmin에서 사용하는 사용자관리 관련 폼은 UserChangeForm, UserCreationForm 이다.</li><li>만약 별도의 폼을 만들어 설정하고 싶다면, 커스텀 폼 클래스 생성하여 form, add_form에 할당해주면 된다.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomUserAdmin</span><span class="params">(UserAdmin)</span>:</span></span><br><span class="line">    form = CustomUserChangeForm</span><br><span class="line">    add_form = CustomUserAddForm</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/24/190524-django-custom-user/#disqus_thread</comments>
    </item>
    
    <item>
      <title>EC2에 웹 서버 설정</title>
      <link>https://chohyeonkeun.github.io/2019/05/23/190523-django-EC2-webserver/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/23/190523-django-EC2-webserver/</guid>
      <pubDate>Thu, 23 May 2019 13:51:40 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;웹서버 프로그램은 대표적으로 Apache와 Nginx가 있다.&lt;/li&gt;
&lt;li&gt;장고 웹 서비스를 구축할 때는 Nginx를 더 많이 사용하는 추세이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;EC2-웹-서버-설정-방법&quot;&gt;&lt;a href=&quot;#EC2-웹-서버-설정-방법&quot; class=&quot;headerlink&quot; title=&quot;EC2 웹 서버 설정 방법&quot;&gt;&lt;/a&gt;EC2 웹 서버 설정 방법&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;EC2에 SSH로 접속 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh -i ~/.ssh/[키 페어 파일 이름; django-wps.pem] ubuntu@[퍼블릭 DNS 또는 IP]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>웹서버 프로그램은 대표적으로 Apache와 Nginx가 있다.</li><li>장고 웹 서비스를 구축할 때는 Nginx를 더 많이 사용하는 추세이다.</li></ul><h2 id="EC2-웹-서버-설정-방법"><a href="#EC2-웹-서버-설정-방법" class="headerlink" title="EC2 웹 서버 설정 방법"></a>EC2 웹 서버 설정 방법</h2><ol><li>EC2에 SSH로 접속 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i ~/.ssh/[키 페어 파일 이름; django-wps.pem] ubuntu@[퍼블릭 DNS 또는 IP]</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>패키지 최신 업데이트</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>Nginx 설치</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure></li><li><p>서버 잘 동작하고 있는지 상태 확인</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status nginx</span><br></pre></td></tr></table></figure></li><li><p>EC2 인스턴스 주소로 접속하여 웹 서버 잘 동작하는지 확인</p><ul><li>웹브라우저에 퍼블릭 DNS 주소 혹은 IP 주소 입력</li><li>Welcome to nginx! 라는 문구 표시되면 정상 동작중인 상태</li></ul></li><li><p>Nginx 사용하면 스태틱 웹 서버 생성하여 사용 가능</p><ul><li>Nginx 사용할 때는 한 서버 컴퓨터에서 여러 사이트를 운영할 수 있다.</li><li><p>사이트 별 설정파일 생성하여 수정필요</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/staticweb</span><br><span class="line">$ sudo vim /etc/nginx/sites-available/staticweb</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80; </span><br><span class="line">        listen [::]:80;</span><br><span class="line"></span><br><span class="line">        root /var/www/staticweb</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line">        server_name [퍼블릭 DNS 주소 혹은 IP 입력]</span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="7"><li><p>설정 파일이 올바른지 확인(문법적인 오류인지, 이 옵션이 정상 작동되는건지 확인)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -t</span><br></pre></td></tr></table></figure></li><li><p>해당 설정파일을 Nginx에 활성화</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/staticweb /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></li><li><p>/var/www 경로로 이동하여 staticweb 폴더 생성</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /var/www/staticweb</span><br></pre></td></tr></table></figure></li><li><p>브라우저 화면에 표시될 내용 작성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /var/www/staticweb/index.html</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        hello nginx!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Nginx 재실행</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><ul><li>설치를 마치면, EC2 인스턴스 재시작해도 자동으로 Nginx가 실행되게 등록되어 있다.(아래 명령어 참고)<ul><li>$ sudo systemctl stop nginx</li><li>$ sudo systemctl start nginx</li><li>$ sudo systemctl restart nginx</li><li>$ sudo systemctl status nginx</li></ul></li></ul></li></ol><ol start="12"><li><p>웹 브라우저에 퍼블릭 DNS 혹은 IP 주소 입력</p><ul><li>index.html 에 작성한 내용이 정상적으로 표시되는지 확인</li></ul></li><li><p>고정 IP 설정</p><ul><li>EC2 &gt; 네트워크 및 보안</li><li>탄력적 IP 선택</li><li>새 주소 할당 (새 주소 할당받고 인스턴스 선택안하면 과금될 수 있다.)</li><li>목록에 있는 IP 우측 클릭</li><li>주소 연결 &gt; 인스턴스 선택 &gt; 연결 </li><li>IP 목록에서 Name 입력</li><li>IP 목록에 인스턴스 설정 확인</li><li>EC2 인스턴스 정보에서 탄력적 IP 표시는지 확인</li></ul></li><li><p>Route 53 이용하여 도메인 연결</p><ul><li>도메인 레코드 생성</li><li>레코드 이름 설정 ex) staticweb.sample.wpsshool.site</li><li>탄력적 IP 입력</li><li>생성</li></ul></li><li><p>도메인 이름 변경되었으므로, 사이트 설정파일 수정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/sites-available/staticweb</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">server_name [고정 IP 설정한 도메인 이름 입력]</span><br></pre></td></tr></table></figure></li><li><p>Nginx 재실행</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li><li><p>웹 브라우저에 도메인 주소 입력하여 정상 작동하는지 확인</p><ul><li>도메인 연결 잘 되었는지 확인<ul><li><a href="https://www.site24x7.com/ping-test.html" target="_blank" rel="noopener">https://www.site24x7.com/ping-test.html</a> 접속</li><li>도메인 주소 입력</li><li>연결 상태 확인</li></ul></li></ul></li></ol><hr><h3 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h3><ul><li>설정 파일 수정했다면 테스트해야 하고, 설정파일이 올바르다면 nginx 재실행해야 설정 파일 반영된다.</li><li>웹서버 구동시킬 때는 필요한 최소한의 권한만 부여한 계정을 생성하여 해당 계정의 권한으로 구동한다.</li><li>도메인 설정 필요가 있어서 고정 IP를 설정한다.(도메인 설정 필요가 없을 경우, 고정 IP 설정 불필요)</li><li>도메인 elastic ID 사용은 무료이나, 발급받고 아무 행위도 하지 않으면 과금될 수 있다.</li><li>새 주소 할당받고 인스턴스 선택안하면 과금될 수 있다.</li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/23/190523-django-EC2-webserver/#disqus_thread</comments>
    </item>
    
    <item>
      <title>EC2 인스턴스 만들기</title>
      <link>https://chohyeonkeun.github.io/2019/05/22/190522-django-EC2/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/22/190522-django-EC2/</guid>
      <pubDate>Wed, 22 May 2019 14:07:11 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;EC2-Elastic-Cloud-Computing의-약어로-아마존의-대표적인-서버-인스턴스-서버&quot;&gt;&lt;a href=&quot;#EC2-Elastic-Cloud-Computing의-약어로-아마존의-대표적인-서버-인스턴스-서버&quot; class=&quot;headerlink&quot; title=&quot;EC2 :  Elastic Cloud Computing의 약어로 아마존의 대표적인 서버 인스턴스 서버&quot;&gt;&lt;/a&gt;EC2 :  Elastic Cloud Computing의 약어로 아마존의 대표적인 서버 인스턴스 서버&lt;/h3&gt;&lt;h4 id=&quot;1-서비스에서-컴퓨팅-gt-EC2-선택&quot;&gt;&lt;a href=&quot;#1-서비스에서-컴퓨팅-gt-EC2-선택&quot; class=&quot;headerlink&quot; title=&quot;1. 서비스에서 컴퓨팅 -&amp;gt; EC2 선택&quot;&gt;&lt;/a&gt;1. 서비스에서 컴퓨팅 -&amp;gt; EC2 선택&lt;/h4&gt;&lt;h4 id=&quot;2-EC2-화면이-나타나면-화면-중앙에-있는-인스턴스-시작-버튼-클릭&quot;&gt;&lt;a href=&quot;#2-EC2-화면이-나타나면-화면-중앙에-있는-인스턴스-시작-버튼-클릭&quot; class=&quot;headerlink&quot; title=&quot;2. EC2 화면이 나타나면 화면 중앙에 있는 [인스턴스 시작] 버튼 클릭&quot;&gt;&lt;/a&gt;2. EC2 화면이 나타나면 화면 중앙에 있는 [인스턴스 시작] 버튼 클릭&lt;/h4&gt;&lt;h4 id=&quot;3-EC2는-다양한-운영체제-사용-가능-가장-보편적인-웹-서버-운영체제인-리눅스-중에서-Ubuntu-Server-18-04-64Bit-선택-버튼-클릭&quot;&gt;&lt;a href=&quot;#3-EC2는-다양한-운영체제-사용-가능-가장-보편적인-웹-서버-운영체제인-리눅스-중에서-Ubuntu-Server-18-04-64Bit-선택-버튼-클릭&quot; class=&quot;headerlink&quot; title=&quot;3. EC2는 다양한 운영체제 사용 가능. 가장 보편적인 웹 서버 운영체제인 리눅스 중에서 Ubuntu Server 18.04 64Bit [선택] 버튼 클릭&quot;&gt;&lt;/a&gt;3. EC2는 다양한 운영체제 사용 가능. 가장 보편적인 웹 서버 운영체제인 리눅스 중에서 Ubuntu Server 18.04 64Bit [선택] 버튼 클릭&lt;/h4&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="EC2-Elastic-Cloud-Computing의-약어로-아마존의-대표적인-서버-인스턴스-서버"><a href="#EC2-Elastic-Cloud-Computing의-약어로-아마존의-대표적인-서버-인스턴스-서버" class="headerlink" title="EC2 :  Elastic Cloud Computing의 약어로 아마존의 대표적인 서버 인스턴스 서버"></a>EC2 :  Elastic Cloud Computing의 약어로 아마존의 대표적인 서버 인스턴스 서버</h3><h4 id="1-서비스에서-컴퓨팅-gt-EC2-선택"><a href="#1-서비스에서-컴퓨팅-gt-EC2-선택" class="headerlink" title="1. 서비스에서 컴퓨팅 -&gt; EC2 선택"></a>1. 서비스에서 컴퓨팅 -&gt; EC2 선택</h4><h4 id="2-EC2-화면이-나타나면-화면-중앙에-있는-인스턴스-시작-버튼-클릭"><a href="#2-EC2-화면이-나타나면-화면-중앙에-있는-인스턴스-시작-버튼-클릭" class="headerlink" title="2. EC2 화면이 나타나면 화면 중앙에 있는 [인스턴스 시작] 버튼 클릭"></a>2. EC2 화면이 나타나면 화면 중앙에 있는 [인스턴스 시작] 버튼 클릭</h4><h4 id="3-EC2는-다양한-운영체제-사용-가능-가장-보편적인-웹-서버-운영체제인-리눅스-중에서-Ubuntu-Server-18-04-64Bit-선택-버튼-클릭"><a href="#3-EC2는-다양한-운영체제-사용-가능-가장-보편적인-웹-서버-운영체제인-리눅스-중에서-Ubuntu-Server-18-04-64Bit-선택-버튼-클릭" class="headerlink" title="3. EC2는 다양한 운영체제 사용 가능. 가장 보편적인 웹 서버 운영체제인 리눅스 중에서 Ubuntu Server 18.04 64Bit [선택] 버튼 클릭"></a>3. EC2는 다양한 운영체제 사용 가능. 가장 보편적인 웹 서버 운영체제인 리눅스 중에서 Ubuntu Server 18.04 64Bit [선택] 버튼 클릭</h4><a id="more"></a><h4 id="4-인스턴스-유형-선택-가능-프리티어-유형-중에-t2-micro-선택하고-다음-인스턴스-세부-정보-구성-버튼-클릭"><a href="#4-인스턴스-유형-선택-가능-프리티어-유형-중에-t2-micro-선택하고-다음-인스턴스-세부-정보-구성-버튼-클릭" class="headerlink" title="4. 인스턴스 유형 선택 가능. 프리티어 유형 중에 t2.micro 선택하고 [다음:인스턴스 세부 정보 구성] 버튼 클릭"></a>4. 인스턴스 유형 선택 가능. 프리티어 유형 중에 t2.micro 선택하고 [다음:인스턴스 세부 정보 구성] 버튼 클릭</h4><ul><li>아마존의 대표적인 인스턴스 유형은 T 제품군이다. 다른 등급에 비해 기본 성능은 낮지만 갑자기 성능을 높여야 하는 경우 버스팅 기능을 이용해서 순간 성능을 높인다.</li></ul><h4 id="5-인스턴스-세부-정보-구성-화면에서는-변경하는-것-없이-다음-스토리지-추가-버튼-클릭"><a href="#5-인스턴스-세부-정보-구성-화면에서는-변경하는-것-없이-다음-스토리지-추가-버튼-클릭" class="headerlink" title="5. 인스턴스 세부 정보 구성 화면에서는 변경하는 것 없이 [다음:스토리지 추가] 버튼 클릭"></a>5. 인스턴스 세부 정보 구성 화면에서는 변경하는 것 없이 [다음:스토리지 추가] 버튼 클릭</h4><h4 id="6-스토리지에서는-서버의-저장-공간-생성-20Gib로-용량-선택하고-볼륨-유형은-범용-SSD-선택-다음-태그-추가-버튼-클릭"><a href="#6-스토리지에서는-서버의-저장-공간-생성-20Gib로-용량-선택하고-볼륨-유형은-범용-SSD-선택-다음-태그-추가-버튼-클릭" class="headerlink" title="6. 스토리지에서는 서버의 저장 공간 생성. 20Gib로 용량 선택하고 볼륨 유형은 범용 SSD 선택. [다음:태그 추가] 버튼 클릭"></a>6. 스토리지에서는 서버의 저장 공간 생성. 20Gib로 용량 선택하고 볼륨 유형은 범용 SSD 선택. [다음:태그 추가] 버튼 클릭</h4><h4 id="7-태그-추가-화면에서도-변경-없이-다음-보안-그룹-생성-버튼-클릭"><a href="#7-태그-추가-화면에서도-변경-없이-다음-보안-그룹-생성-버튼-클릭" class="headerlink" title="7. 태그 추가 화면에서도 변경 없이 [다음: 보안 그룹 생성] 버튼 클릭"></a>7. 태그 추가 화면에서도 변경 없이 [다음: 보안 그룹 생성] 버튼 클릭</h4><p><img src="https://user-images.githubusercontent.com/48202867/58615916-481e7780-82f7-11e9-8aea-273f79880ca3.png" alt="security"></p><h4 id="8-보안-그룹-구성에서는-새-보안-그룹-생성-을-선택하고-SSH와-HTTP를-추가-검토-및-시작-버튼-클릭"><a href="#8-보안-그룹-구성에서는-새-보안-그룹-생성-을-선택하고-SSH와-HTTP를-추가-검토-및-시작-버튼-클릭" class="headerlink" title="8. 보안 그룹 구성에서는 [새 보안 그룹 생성]을 선택하고 SSH와 HTTP를 추가. [검토 및 시작] 버튼 클릭"></a>8. 보안 그룹 구성에서는 [새 보안 그룹 생성]을 선택하고 SSH와 HTTP를 추가. [검토 및 시작] 버튼 클릭</h4><h4 id="9-인스턴스-시작-검토-화면에서-요약-내용-확인하고-시작하기-버튼-클릭"><a href="#9-인스턴스-시작-검토-화면에서-요약-내용-확인하고-시작하기-버튼-클릭" class="headerlink" title="9. 인스턴스 시작 검토 화면에서 요약 내용 확인하고 [시작하기] 버튼 클릭"></a>9. 인스턴스 시작 검토 화면에서 요약 내용 확인하고 [시작하기] 버튼 클릭</h4><h4 id="10-새로운-인스턴스를-추가하면-인스턴스에-접속하기-위해-필요한-키-페어를-생성하거나-선택-새-키-페어-생성-선택하고-키-페어-이름-입력한-후-키-페어-다운로드-버튼-클릭-그럼-키-페어-파일이-다운로드-되고-이-파일은-다시-다운-받을-수-없으니-잘-보관한다"><a href="#10-새로운-인스턴스를-추가하면-인스턴스에-접속하기-위해-필요한-키-페어를-생성하거나-선택-새-키-페어-생성-선택하고-키-페어-이름-입력한-후-키-페어-다운로드-버튼-클릭-그럼-키-페어-파일이-다운로드-되고-이-파일은-다시-다운-받을-수-없으니-잘-보관한다" class="headerlink" title="10. 새로운 인스턴스를 추가하면 인스턴스에 접속하기 위해 필요한 키 페어를 생성하거나 선택. [새 키 페어 생성] 선택하고 키 페어 이름 입력한 후 [키 페어 다운로드] 버튼 클릭. 그럼 키 페어 파일이 다운로드 되고, 이 파일은 다시 다운 받을 수 없으니 잘 보관한다."></a>10. 새로운 인스턴스를 추가하면 인스턴스에 접속하기 위해 필요한 키 페어를 생성하거나 선택. [새 키 페어 생성] 선택하고 키 페어 이름 입력한 후 [키 페어 다운로드] 버튼 클릭. 그럼 키 페어 파일이 다운로드 되고, 이 파일은 다시 다운 받을 수 없으니 잘 보관한다.</h4><h4 id="11-키-페어-파일을-다운로드-gt-인스턴스-시작-버튼-활성화-gt-버튼-클릭"><a href="#11-키-페어-파일을-다운로드-gt-인스턴스-시작-버튼-활성화-gt-버튼-클릭" class="headerlink" title="11. 키 페어 파일을 다운로드 &gt; [인스턴스 시작] 버튼 활성화 &gt; 버튼 클릭"></a>11. 키 페어 파일을 다운로드 &gt; [인스턴스 시작] 버튼 활성화 &gt; 버튼 클릭</h4><h4 id="12-인스턴스-생성-gt-인스턴스-보기-버튼-클릭"><a href="#12-인스턴스-생성-gt-인스턴스-보기-버튼-클릭" class="headerlink" title="12. 인스턴스 생성 &gt; [인스턴스 보기] 버튼 클릭"></a>12. 인스턴스 생성 &gt; [인스턴스 보기] 버튼 클릭</h4><h4 id="13-인스턴스-목록에서-방금-생성한-인스턴스의-이름-부분에-있는-연필-아이콘-클릭하여-이름-설정"><a href="#13-인스턴스-목록에서-방금-생성한-인스턴스의-이름-부분에-있는-연필-아이콘-클릭하여-이름-설정" class="headerlink" title="13. 인스턴스 목록에서 방금 생성한 인스턴스의 이름 부분에 있는 연필 아이콘 클릭하여 이름 설정"></a>13. 인스턴스 목록에서 방금 생성한 인스턴스의 이름 부분에 있는 연필 아이콘 클릭하여 이름 설정</h4><h4 id="14-이름이-설정된-것을-확인하고-해당-인스턴스의-퍼블릭-DNS-확인-이제-이-인스턴스에-SSH로-접속하여-서버-셋팅-진행"><a href="#14-이름이-설정된-것을-확인하고-해당-인스턴스의-퍼블릭-DNS-확인-이제-이-인스턴스에-SSH로-접속하여-서버-셋팅-진행" class="headerlink" title="14. 이름이 설정된 것을 확인하고 해당 인스턴스의 퍼블릭 DNS 확인. 이제 이 인스턴스에 SSH로 접속하여 서버 셋팅 진행"></a>14. 이름이 설정된 것을 확인하고 해당 인스턴스의 퍼블릭 DNS 확인. 이제 이 인스턴스에 SSH로 접속하여 서버 셋팅 진행</h4><h4 id="15-터미널을-열고-다음-명령어를-입력하여-키-페어-파일의-권한-변경-맥이나-우분투에서-pem-파일을-사용하려면-사용권한이-400이어야-함"><a href="#15-터미널을-열고-다음-명령어를-입력하여-키-페어-파일의-권한-변경-맥이나-우분투에서-pem-파일을-사용하려면-사용권한이-400이어야-함" class="headerlink" title="15. 터미널을 열고 다음 명령어를 입력하여 키 페어 파일의 권한 변경. 맥이나 우분투에서 pem 파일을 사용하려면 사용권한이 400이어야 함"></a>15. 터미널을 열고 다음 명령어를 입력하여 키 페어 파일의 권한 변경. 맥이나 우분투에서 pem 파일을 사용하려면 사용권한이 400이어야 함</h4><p><code>$ chmod 400 [키 페어 파일 이름]</code></p><h4 id="16-키-페어-파일은-보통-홈-폴더-하위에-잇는-SSH-폴더에-보관하기-위해-파일을-이동시킨다"><a href="#16-키-페어-파일은-보통-홈-폴더-하위에-잇는-SSH-폴더에-보관하기-위해-파일을-이동시킨다" class="headerlink" title="16. 키 페어 파일은 보통 홈 폴더 하위에 잇는 .SSH 폴더에 보관하기 위해 파일을 이동시킨다."></a>16. 키 페어 파일은 보통 홈 폴더 하위에 잇는 .SSH 폴더에 보관하기 위해 파일을 이동시킨다.</h4><p><code>$ mv [키 페어 파일이름] ~/.ssh/</code></p><h4 id="17-ssh-명령을-사용해-서버-접속"><a href="#17-ssh-명령을-사용해-서버-접속" class="headerlink" title="17. ssh 명령을 사용해 서버 접속"></a>17. ssh 명령을 사용해 서버 접속</h4><p><code>$ ssh -i ~/.ssh/[키 페어 파일 이름] ubuntu@[EC2의 퍼블릭 DNS]</code></p><h4 id="18-서버에-접속되면-ubuntu-쉘이-나타난다"><a href="#18-서버에-접속되면-ubuntu-쉘이-나타난다" class="headerlink" title="18. 서버에 접속되면 ubuntu 쉘이 나타난다."></a>18. 서버에 접속되면 ubuntu 쉘이 나타난다.</h4>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/22/190522-django-EC2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>django extensions 설치 방법</title>
      <link>https://chohyeonkeun.github.io/2019/05/21/190521-django-extensions/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/21/190521-django-extensions/</guid>
      <pubDate>Tue, 21 May 2019 13:38:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-명령어를-이용해-모듈-설치&quot;&gt;&lt;a href=&quot;#1-명령어를-이용해-모듈-설치&quot; class=&quot;headerlink&quot; title=&quot;1. 명령어를 이용해 모듈 설치&quot;&gt;&lt;/a&gt;1. 명령어를 이용해 모듈 설치&lt;/h2&gt;&lt;p&gt;&lt;code&gt;$ pip install django-extensions&lt;/code&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-명령어를-이용해-모듈-설치"><a href="#1-명령어를-이용해-모듈-설치" class="headerlink" title="1. 명령어를 이용해 모듈 설치"></a>1. 명령어를 이용해 모듈 설치</h2><p><code>$ pip install django-extensions</code><br><a id="more"></a></p><h2 id="2-settings-py에-INSTALLED-APPS와-GRAPH-MODELS-추가"><a href="#2-settings-py에-INSTALLED-APPS와-GRAPH-MODELS-추가" class="headerlink" title="2. settings.py에 INSTALLED_APPS와 GRAPH_MODELS 추가"></a>2. settings.py에 INSTALLED_APPS와 GRAPH_MODELS 추가</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">'django_extensions'</span>,</span><br><span class="line">]</span><br><span class="line">GRAPH_MODELS = &#123;</span><br><span class="line">    <span class="string">'all_applications'</span> : <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'group_models'</span> : <span class="literal">True</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-그래프-출력-기능을-사용하기-위해서-추가-모듈-설치"><a href="#3-그래프-출력-기능을-사용하기-위해서-추가-모듈-설치" class="headerlink" title="3. 그래프 출력 기능을 사용하기 위해서 추가 모듈 설치"></a>3. 그래프 출력 기능을 사용하기 위해서 추가 모듈 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* Mac</span><br><span class="line">$ xcode-select --install</span><br><span class="line">$ brew install graphviz</span><br><span class="line">$ pip install --install-option=<span class="string">"--include-path=/usr/local/include/"</span> --install-option=<span class="string">"--library-path=/usr/local/lib/"</span> pygraphviz</span><br><span class="line"></span><br><span class="line">* Ubuntu</span><br><span class="line">$ pip install pygraphviz</span><br><span class="line">$ sudo apt-get install python-dev graphviz libgraphviz-dev pkg-config</span><br></pre></td></tr></table></figure><h2 id="4-설치-후-그래프-생성-명령-입력"><a href="#4-설치-후-그래프-생성-명령-입력" class="headerlink" title="4. 설치 후 그래프 생성 명령 입력"></a>4. 설치 후 그래프 생성 명령 입력</h2><ul><li><p>전체 모델에 대한 그래프 출력<br>  <code>$ python manage.py graph_models -a -g -o model_graph.png</code></p></li><li><p>특정 앱에 대한 그래프 출력<br>  <code>$ python manage.py graph_models board -o models.png</code></p></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/21/190521-django-extensions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>django debug tool bar 설치 방법</title>
      <link>https://chohyeonkeun.github.io/2019/05/20/190520-django-debug-tool-bar/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/20/190520-django-debug-tool-bar/</guid>
      <pubDate>Mon, 20 May 2019 14:11:24 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-debug-tool-bar-module-설치&quot;&gt;&lt;a href=&quot;#1-debug-tool-bar-module-설치&quot; class=&quot;headerlink&quot; title=&quot;1. debug tool bar module 설치&quot;&gt;&lt;/a&gt;1. debug tool bar module 설치&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pip install django-debug-toolbar&lt;/code&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-debug-tool-bar-module-설치"><a href="#1-debug-tool-bar-module-설치" class="headerlink" title="1. debug tool bar module 설치"></a>1. debug tool bar module 설치</h2><p><code>pip install django-debug-toolbar</code><br><a id="more"></a></p><h2 id="2-settings-py에-INSTALLED-APPS와-MIDDLEWARE에-관련-항목-추가"><a href="#2-settings-py에-INSTALLED-APPS와-MIDDLEWARE에-관련-항목-추가" class="headerlink" title="2. settings.py에 INSTALLED_APPS와 MIDDLEWARE에 관련 항목 추가"></a>2. settings.py에 INSTALLED_APPS와 MIDDLEWARE에 관련 항목 추가</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'debug_toolbar'</span>,</span><br><span class="line">]</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'debug_toolbar.middleware.DebugToolbarMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-settings-py에-패널-설정값과-INTERNAL-IPS-값-추가"><a href="#3-settings-py에-패널-설정값과-INTERNAL-IPS-값-추가" class="headerlink" title="3. settings.py에 패널 설정값과 INTERNAL_IPS 값 추가"></a>3. settings.py에 패널 설정값과 INTERNAL_IPS 값 추가</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line">INTERNAL_IPS = [<span class="string">'127.0.0.1'</span>]</span><br><span class="line">DEBUG_TOOLBAR_PANELS = [</span><br><span class="line">    <span class="string">'debug_toolbar.panels.versions.VersionsPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.timer.TimerPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.settings.SettingsPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.headers.HeadersPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.request.RequestPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.sql.SQLPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.staticfiles.StaticFilesPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.templates.TemplatesPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.cache.CachePanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.signals.SignalsPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.logging.LoggingPanel'</span>,</span><br><span class="line">    <span class="string">'debug_toolbar.panels.redirects.RedirectsPanel'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-Root-urls-py-파일에-내용-추가"><a href="#4-Root-urls-py-파일에-내용-추가" class="headerlink" title="4. Root urls.py 파일에 내용 추가"></a>4. Root urls.py 파일에 내용 추가</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="keyword">import</span> debug_toolbar</span><br><span class="line">    urlpatterns += [</span><br><span class="line">        path(<span class="string">'debug/'</span>, include(debug_toolbar.urls)),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="5-관련-스태틱-파일-업로드를-위해-명령-실행"><a href="#5-관련-스태틱-파일-업로드를-위해-명령-실행" class="headerlink" title="5. 관련 스태틱 파일 업로드를 위해 명령 실행"></a>5. 관련 스태틱 파일 업로드를 위해 명령 실행</h2><p><code>$ python manage.py collectstatic</code></p><h2 id="6-관리자-페이지-접속하여-해당-모듈-잘-동작하는지-확인"><a href="#6-관리자-페이지-접속하여-해당-모듈-잘-동작하는지-확인" class="headerlink" title="6. 관리자 페이지 접속하여 해당 모듈 잘 동작하는지 확인"></a>6. 관리자 페이지 접속하여 해당 모듈 잘 동작하는지 확인</h2>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/20/190520-django-debug-tool-bar/#disqus_thread</comments>
    </item>
    
    <item>
      <title>로그인 기능 적용</title>
      <link>https://chohyeonkeun.github.io/2019/05/19/190519-django-login-method/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/19/190519-django-login-method/</guid>
      <pubDate>Sun, 19 May 2019 13:34:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;방법1-login-required-클래스-사용&quot;&gt;&lt;a href=&quot;#방법1-login-required-클래스-사용&quot; class=&quot;headerlink&quot; title=&quot;방법1. login_required 클래스 사용&quot;&gt;&lt;/a&gt;방법1. login_required 클래스 사용&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;login_required 클래스를 사용하여 로그인이 필요한 부분에 @login_required 데코레이터를 사용한다.&lt;ul&gt;
&lt;li&gt;경로 : (앱 이름) &amp;gt; views.py  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# login_required 클래스 호출&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.contrib.auth.decorators &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; login_required&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# login_required 데코레이터 사용&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@login_required&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="방법1-login-required-클래스-사용"><a href="#방법1-login-required-클래스-사용" class="headerlink" title="방법1. login_required 클래스 사용"></a>방법1. login_required 클래스 사용</h2><ul><li>login_required 클래스를 사용하여 로그인이 필요한 부분에 @login_required 데코레이터를 사용한다.<ul><li>경로 : (앱 이름) &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># login_required 클래스 호출</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># login_required 데코레이터 사용</span></span><br><span class="line"><span class="meta">@login_required</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><a id="more"></a><ul><li>로그인 분기가 필요한 html 부분에 user.is_authenticated 함수를 사용한다.<ul><li>경로 : layout &gt; base.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if user.is_authenticated %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'account_logout' %&#125;"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'account_login' %&#125;"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &#123;% block extra_script %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="방법2-로그인-페이지-구현-및-LoginRequiredMixin-클래스-사용"><a href="#방법2-로그인-페이지-구현-및-LoginRequiredMixin-클래스-사용" class="headerlink" title="방법2. 로그인 페이지 구현 및 LoginRequiredMixin 클래스 사용"></a>방법2. 로그인 페이지 구현 및 LoginRequiredMixin 클래스 사용</h2><ul><li><p>로그인 페이지 html을 작성한다.</p><ul><li>경로 : accounts(앱 이름) &gt; templates &gt; accounts &gt; signin.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-primary"</span>&gt;</span>Please enter your login information.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Signin"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-primary"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>accounts 앱에서 로그인/로그아웃/회원가입 경로를 설정한다.</p><ul><li>경로 : accounts(앱 이름) &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'signin/'</span>, LoginView.as_view(template_name=<span class="string">'accounts/signin.html'</span>), name=<span class="string">'signin'</span>),</span><br><span class="line">path(<span class="string">'signout/'</span>, LogoutView.as_view(template_name=<span class="string">'accounts/signout.html'</span>), name=<span class="string">'signout'</span>),</span><br><span class="line">path(<span class="string">'signup/'</span>, signup, name=<span class="string">'signup'</span>),</span><br></pre></td></tr></table></figure></li></ul></li><li><p>LoginRequiredMixin 클래스를 상속받아 첫 페이지에 로그인 페이지로 이동되도록 한다.</p><ul><li>경로 : photo(앱 이름) &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.mixins <span class="keyword">import</span> LoginRequiredMixin</span><br><span class="line"><span class="comment"># --&gt; 로그인을 했는지 안했는지 확인해주고 로그인 안했으면, 로그인 페이지로 이동시켜줌(경로 설정 필요)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoList</span><span class="params">(LoginRequiredMixin, ListView)</span>:</span></span><br><span class="line">    model = Photo</span><br><span class="line">    template_name = <span class="string">'photo/photo_list.html'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>로그인 페이지 url 경로를 설정해준다.</p><ul><li>경로 : config(프로젝트명) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse_lazy</span><br><span class="line">LOGIN_URL = reverse_lazy(<span class="string">'accounts:signin'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/19/190519-django-login-method/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ajax 이용한 댓글 기능 구현</title>
      <link>https://chohyeonkeun.github.io/2019/05/18/190518-django-comment-with-ajax/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/18/190518-django-comment-with-ajax/</guid>
      <pubDate>Sat, 18 May 2019 14:24:05 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;댓글-생성하기&quot;&gt;&lt;a href=&quot;#댓글-생성하기&quot; class=&quot;headerlink&quot; title=&quot;댓글 생성하기&quot;&gt;&lt;/a&gt;댓글 생성하기&lt;/h2&gt;&lt;h2 id=&quot;1-상세-글-조회-페이지에-댓글-목록-추가&quot;&gt;&lt;a href=&quot;#1-상세-글-조회-페이지에-댓글-목록-추가&quot; class=&quot;headerlink&quot; title=&quot;1. 상세 글 조회 페이지에 댓글 목록 추가&quot;&gt;&lt;/a&gt;1. 상세 글 조회 페이지에 댓글 목록 추가&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;원하는 위치에 댓글 목록 부분을 작성한다.&lt;/li&gt;
&lt;li&gt;경로 : board &amp;gt; templates &amp;gt; board &amp;gt; document_detail.html  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;docs_comment_list_area&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;% include &#39;board/comment_list.html&#39; %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="댓글-생성하기"><a href="#댓글-생성하기" class="headerlink" title="댓글 생성하기"></a>댓글 생성하기</h2><h2 id="1-상세-글-조회-페이지에-댓글-목록-추가"><a href="#1-상세-글-조회-페이지에-댓글-목록-추가" class="headerlink" title="1. 상세 글 조회 페이지에 댓글 목록 추가"></a>1. 상세 글 조회 페이지에 댓글 목록 추가</h2><ul><li>원하는 위치에 댓글 목록 부분을 작성한다.</li><li>경로 : board &gt; templates &gt; board &gt; document_detail.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"docs_comment_list_area"</span>&gt;</span></span><br><span class="line">    &#123;% include 'board/comment_list.html' %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="2-댓글-목록-부분-HTML-코드-작성"><a href="#2-댓글-목록-부분-HTML-코드-작성" class="headerlink" title="2. 댓글 목록 부분 HTML 코드 작성"></a>2. 댓글 목록 부분 HTML 코드 작성</h2><ul><li>댓글 목록을 어떻게 구성할 것인지 정의한다. </li><li><p>경로 : board &gt; templates &gt; board </p><ul><li><p>comment_list.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span> <span class="attr">id</span>=<span class="string">"comment_list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"7"</span> <span class="attr">class</span>=<span class="string">"align-left"</span>&gt;</span>댓글 목록<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        &#123;% for comment in comments %&#125;</span><br><span class="line">        &#123;% include 'board/comment/comment_single.html' %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>comment &gt; comment_single.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"comment_row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"comment_text"</span>&gt;</span>&#123;&#123;comment.text&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;comment.author.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;comment.created&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>-</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board:comment_update' comment.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning btn-sm btn_comment_update"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board:comment_delete' comment.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm btn_comment_delete"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-Ajax-요청-기능-구현"><a href="#3-Ajax-요청-기능-구현" class="headerlink" title="3. Ajax 요청 기능 구현"></a>3. Ajax 요청 기능 구현</h2><ul><li>Ajax를 이용하여 댓글 수정을 요청하는 부분을 작성한다.</li><li>경로 : board &gt; templates &gt; board &gt; document_detail.html  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#comment_form'</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// alert('댓글쓰기 완료');</span></span><br><span class="line">        <span class="comment">// 댓글 남기기</span></span><br><span class="line">        $(<span class="string">'input[name="is_ajax"]'</span>).val(<span class="string">"1"</span>);</span><br><span class="line">        url = $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>);</span><br><span class="line">        params = $(<span class="keyword">this</span>).serialize();</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:url,</span><br><span class="line">            method:<span class="string">"POST"</span>,</span><br><span class="line">            data:params</span><br><span class="line">        &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 댓글 입력창 내용 비우기</span></span><br><span class="line">            $(<span class="string">'#id_text'</span>).val(<span class="string">""</span>);</span><br><span class="line">            $(<span class="string">'#comment_list tbody'</span>).prepend(data.html); <span class="comment">// tbody 시작 지점에 요소 끼워넣기</span></span><br><span class="line">            <span class="comment">// is_ajax 값 초기화</span></span><br><span class="line">            $(<span class="string">'input[name="is_ajax"]'</span>).val(<span class="string">""</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Ajax-요청에-따른-작업-진행-내용-명시"><a href="#4-Ajax-요청에-따른-작업-진행-내용-명시" class="headerlink" title="4. Ajax 요청에 따른 작업 진행 내용 명시"></a>4. Ajax 요청에 따른 작업 진행 내용 명시</h2><ul><li>Ajax 요청을 받아 데이터베이스에서 수행할 작업을 명시한다.</li><li>경로 : board &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template.loader <span class="keyword">import</span> render_to_string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment_create</span><span class="params">(request, document_id)</span>:</span></span><br><span class="line">    <span class="comment"># is_ajax : ajax 기능에 의해 호출된 것인지 구분하기 위한 값</span></span><br><span class="line">    is_ajax = request.POST.get(<span class="string">'is_ajax'</span>)</span><br><span class="line"></span><br><span class="line">    document = get_object_or_404(Document, pk=document_id)</span><br><span class="line">    comment_form = CommentForm(request.POST)</span><br><span class="line">    comment_form.instance.author_id = request.user.id</span><br><span class="line">    comment_form.instance.document_id = document_id</span><br><span class="line">    <span class="keyword">if</span> comment_form.is_valid():</span><br><span class="line">        comment = comment_form.save()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 만약 ajax에 의해 호출되었다면 redirection 없이 Json 형태로 응답</span></span><br><span class="line">    <span class="keyword">if</span> is_ajax:</span><br><span class="line">        <span class="comment"># 데이터 만들어서 던져주기</span></span><br><span class="line">        html = render_to_string(<span class="string">'board/comment/comment_single.html'</span>,&#123;<span class="string">'comment'</span>:comment&#125;)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'html'</span>:html&#125;)</span><br><span class="line">    <span class="keyword">return</span> redirect(reverse(<span class="string">'board:detail'</span>, args=[document_id]))</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="댓글-수정하기"><a href="#댓글-수정하기" class="headerlink" title="댓글 수정하기"></a>댓글 수정하기</h2><h2 id="1-댓글에-‘update’-버튼-추가"><a href="#1-댓글에-‘update’-버튼-추가" class="headerlink" title="1. 댓글에 ‘update’ 버튼 추가"></a>1. 댓글에 ‘update’ 버튼 추가</h2><ul><li>update 버튼을 클릭하면 수정 페이지로 이동하는 코드를 작성한다.</li><li>경로 : board &gt; templates &gt; board <ul><li>comment &gt; comment_single.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"comment_row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"comment_text"</span>&gt;</span>&#123;&#123;comment.text&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;comment.author.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;comment.created&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>-</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board:comment_update' comment.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning btn-sm btn_comment_update"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board:comment_delete' comment.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm btn_comment_delete"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-수정-페이지-코드-작성"><a href="#2-수정-페이지-코드-작성" class="headerlink" title="2. 수정 페이지 코드 작성"></a>2. 수정 페이지 코드 작성</h2><ul><li>‘update’ 버튼을 클릭했을 때, 조회되는 페이지 코드를 작성한다.</li><li>경로 : board &gt; templates &gt; board &gt; comment &gt; comment_update.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Update"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-warning"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Ajax-요청-기능-구현-1"><a href="#3-Ajax-요청-기능-구현-1" class="headerlink" title="3. Ajax 요청 기능 구현"></a>3. Ajax 요청 기능 구현</h2><ul><li>Ajax를 이용하여 댓글 수정을 요청하는 부분을 작성한다.</li><li>경로 : board &gt; templates &gt; board &gt; document_detail.html  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.btn_comment_update'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    url = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>)+<span class="string">'?is_ajax=1'</span>;</span><br><span class="line">    comment = $(<span class="keyword">this</span>).parent().siblings(<span class="string">'.comment_text'</span>); <span class="comment">// 원래 댓글을 찾음</span></span><br><span class="line">    input = <span class="string">"&lt;input type='text' class='update_text' value='"</span>+comment.text()+<span class="string">"'&gt;"</span>;</span><br><span class="line">    comment.html(input);</span><br><span class="line">    $(<span class="string">'.update_text'</span>).keypress(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.keyCode==<span class="number">13</span>) &#123;</span><br><span class="line">            text = $(<span class="keyword">this</span>).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url:url,</span><br><span class="line">                data:&#123;</span><br><span class="line">                    text:text</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data.works) &#123;</span><br><span class="line">                    comment.text(text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    text = prompt(<span class="string">'수정될 댓글 내용을 입력하세요.'</span>, comment.text()); <span class="comment">// 원래 댓글을 프롬프트로 보여줌</span></span><br><span class="line">    <span class="keyword">if</span> (text==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 입력 취소면 함수 종료</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:url,</span><br><span class="line">        data:&#123;</span><br><span class="line">            text:text</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data.works) &#123;</span><br><span class="line">            comment.text(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Ajax-요청에-따른-작업-진행-내용-명시-1"><a href="#4-Ajax-요청에-따른-작업-진행-내용-명시-1" class="headerlink" title="4. Ajax 요청에 따른 작업 진행 내용 명시"></a>4. Ajax 요청에 따른 작업 진행 내용 명시</h2><ul><li>Ajax 요청을 받아 데이터베이스에서 수행할 작업을 명시한다.</li><li>경로 : board &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment_update</span><span class="params">(request, comment_id)</span>:</span></span><br><span class="line">is_ajax, data = (request.GET.get(<span class="string">'is_ajax'</span>), request.GET) <span class="keyword">if</span> <span class="string">'is_ajax'</span> <span class="keyword">in</span> request.GET <span class="keyword">else</span> (request.POST.get(<span class="string">'is_ajax'</span>, <span class="literal">False</span>), request.POST)</span><br><span class="line"></span><br><span class="line">comment = get_object_or_404(Comment, pk=comment_id)</span><br><span class="line">document = get_object_or_404(Document, pk=comment.document.id)</span><br><span class="line"><span class="keyword">if</span> request.user != comment.author:</span><br><span class="line">    messages.warning(request, <span class="string">"권한 없음"</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(document)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_ajax:</span><br><span class="line">    form = CommentForm(data, instance=comment)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'works'</span>:<span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">    form = CommentForm(request.POST, request.FILES, instance=comment)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(document)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    form = CommentForm(instance=comment)</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'board/comment/comment_update.html'</span>, &#123;<span class="string">'form'</span>:form&#125;)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="댓글-삭제하기"><a href="#댓글-삭제하기" class="headerlink" title="댓글 삭제하기"></a>댓글 삭제하기</h2><h2 id="1-댓글에-‘delete’-버튼-추가"><a href="#1-댓글에-‘delete’-버튼-추가" class="headerlink" title="1. 댓글에 ‘delete’ 버튼 추가"></a>1. 댓글에 ‘delete’ 버튼 추가</h2><ul><li>update 버튼을 클릭하면 삭제 페이지로 이동하는 코드를 작성한다.</li><li>경로 : board &gt; templates &gt; board </li></ul><h2 id="2-삭제-페이지-코드-작성"><a href="#2-삭제-페이지-코드-작성" class="headerlink" title="2. 삭제 페이지 코드 작성"></a>2. 삭제 페이지 코드 작성</h2><ul><li>‘update’ 버튼을 클릭했을 때, 조회되는 페이지 코드를 작성한다.</li><li>경로 : board &gt; templates &gt; board &gt; comment &gt; comment_delete.html  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">'base.html'</span> %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="comment">// 'delete' 버튼 클릭 시, 이동하는 화면에 대한 코드 작성</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Ajax-요청-기능-구현-2"><a href="#3-Ajax-요청-기능-구현-2" class="headerlink" title="3. Ajax 요청 기능 구현"></a>3. Ajax 요청 기능 구현</h2><ul><li>Ajax를 이용하여 댓글 삭제를 요청하는 부분을 작성한다.</li><li>경로 : board &gt; templates &gt; board &gt; document_delete.html  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.btn_comment_delete'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> input = confirm(<span class="string">'댓글을 삭제하시겠습니까?'</span>);</span><br><span class="line">    <span class="keyword">if</span> (input==<span class="literal">true</span>) &#123;</span><br><span class="line">        alert(<span class="string">'댓글을 삭제하였습니다.'</span>);</span><br><span class="line">        comment = $(<span class="keyword">this</span>).parents(<span class="string">'tr'</span>); <span class="comment">// 버튼을 감싸고 있는 tr 찾기</span></span><br><span class="line">        url = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>)+<span class="string">"?is_ajax=1"</span>; <span class="comment">// ajax 호출임을 구분할 수 있게 값 추가</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:url</span><br><span class="line">        &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data.works) &#123;</span><br><span class="line">                comment.remove(); <span class="comment">// 해당 객체 지우기</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Ajax-요청에-따른-작업-진행-내용-명시-2"><a href="#4-Ajax-요청에-따른-작업-진행-내용-명시-2" class="headerlink" title="4. Ajax 요청에 따른 작업 진행 내용 명시"></a>4. Ajax 요청에 따른 작업 진행 내용 명시</h2><ul><li>Ajax 요청을 받아 데이터베이스에서 수행할 작업을 명시한다.</li><li>경로 : board &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment_delete</span><span class="params">(request, comment_id)</span>:</span></span><br><span class="line">    is_ajax = request.GET.get(<span class="string">'is_ajax'</span>) <span class="keyword">if</span> <span class="string">'is_ajax'</span> <span class="keyword">in</span> request.GET <span class="keyword">else</span> request.POST.get(<span class="string">'is_ajax'</span>,<span class="literal">False</span>)</span><br><span class="line">    comment = get_object_or_404(Comment, pk=comment_id)</span><br><span class="line">    document = get_object_or_404(Document, pk=comment.document.id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.user != comment.author <span class="keyword">and</span> <span class="keyword">not</span> request.user.is_staff <span class="keyword">and</span> request.user != document.author:</span><br><span class="line">        messages.warning(request, <span class="string">"권한 없음"</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(document)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_ajax:</span><br><span class="line">        comment.delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">"works"</span>:<span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        comment.delete()</span><br><span class="line">        <span class="keyword">return</span> redirect(document)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'board/comment/comment_delete.html'</span>, &#123;<span class="string">'object'</span>: comment&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/18/190518-django-comment-with-ajax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>개발환경에서 이미지 파일 업로드하는 방법</title>
      <link>https://chohyeonkeun.github.io/2019/05/17/190517-django-image-upload-localsite/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/17/190517-django-image-upload-localsite/</guid>
      <pubDate>Fri, 17 May 2019 14:47:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-미디어-경로-설정&quot;&gt;&lt;a href=&quot;#1-미디어-경로-설정&quot; class=&quot;headerlink&quot; title=&quot;1. 미디어 경로 설정&quot;&gt;&lt;/a&gt;1. 미디어 경로 설정&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;프로젝트 설정에서 media url 과 media root를 설정하고 urlpatterns에 그 경로를 지정한다.&lt;/li&gt;
&lt;li&gt;경로 : config(프로젝트 명) &amp;gt; settings.py  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MEDIA_URL = &lt;span class=&quot;string&quot;&gt;&#39;/media/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# MEDIA_URL로 사이트 url 설정&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MEDIA_ROOT = os.path.join(BASE_DIR, &lt;span class=&quot;string&quot;&gt;&#39;media&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 장고에 media라는 폴더 이름 설정&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-미디어-경로-설정"><a href="#1-미디어-경로-설정" class="headerlink" title="1. 미디어 경로 설정"></a>1. 미디어 경로 설정</h2><ul><li>프로젝트 설정에서 media url 과 media root를 설정하고 urlpatterns에 그 경로를 지정한다.</li><li>경로 : config(프로젝트 명) &gt; settings.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line"><span class="comment"># MEDIA_URL로 사이트 url 설정</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>)</span><br><span class="line"><span class="comment"># 장고에 media라는 폴더 이름 설정</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>경로 : config(프로젝트 명) &gt; urls.py)  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br><span class="line"><span class="comment"># settings.py에서 설정한 media 경로와 연동</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-앱-모델에서-이미지-필드-설정"><a href="#2-앱-모델에서-이미지-필드-설정" class="headerlink" title="2. 앱 모델에서 이미지 필드 설정"></a>2. 앱 모델에서 이미지 필드 설정</h2><ul><li>이미지 필드를 사용하여 모델을 설정한다. (upload_to로 디렉토리 경로 설정)</li><li>경로 : board(앱 이름) &gt; models.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image = models.ImageField(upload_to=<span class="string">'board_images/%Y/%m/%d'</span>)</span><br><span class="line"><span class="comment"># media 디렉토리 &gt; board_images &gt; 2019 &gt; 05 &gt; 17 &gt; 이미지 파일명</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-form-enctype-설정"><a href="#3-form-enctype-설정" class="headerlink" title="3. form enctype 설정"></a>3. form enctype 설정</h2><ul><li>템플릿 html form에서 유저가 파일 업로드할 수 있도록 enctype을 설정한다.  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;&#123;form.as_table&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Write"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/17/190517-django-image-upload-localsite/#disqus_thread</comments>
    </item>
    
    <item>
      <title>게시판 댓글 기능 적용</title>
      <link>https://chohyeonkeun.github.io/2019/05/16/190516-django-board-comment-function/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/16/190516-django-board-comment-function/</guid>
      <pubDate>Thu, 16 May 2019 14:18:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;ex) 게시판 프로젝트(board_project)&lt;/p&gt;
&lt;h2 id=&quot;1-특정-페이지에서-댓글-템플릿-연동&quot;&gt;&lt;a href=&quot;#1-특정-페이지에서-댓글-템플릿-연동&quot; class=&quot;headerlink&quot; title=&quot;1. 특정 페이지에서 댓글 템플릿 연동&quot;&gt;&lt;/a&gt;1. 특정 페이지에서 댓글 템플릿 연동&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;댓글 목록의 template 따로 생성 (댓글 부분 페이지네이션 필요하기 때문)&lt;/li&gt;
&lt;li&gt;경로 : templates &amp;gt; board &amp;gt; comment_list.html  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;table table-striped&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;thead&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;colspan&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;align-left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;댓글 목록&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;thead&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;% for comment in comments %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;comment.text&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;comment.author.username&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;comment.created&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;% endfor %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>ex) 게시판 프로젝트(board_project)</p><h2 id="1-특정-페이지에서-댓글-템플릿-연동"><a href="#1-특정-페이지에서-댓글-템플릿-연동" class="headerlink" title="1. 특정 페이지에서 댓글 템플릿 연동"></a>1. 특정 페이지에서 댓글 템플릿 연동</h2><ul><li>댓글 목록의 template 따로 생성 (댓글 부분 페이지네이션 필요하기 때문)</li><li>경로 : templates &gt; board &gt; comment_list.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"align-left"</span>&gt;</span>댓글 목록<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    &#123;% for comment in comments %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;comment.text&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;comment.author.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;comment.created&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="2-게시판-상세-페이지에서-댓글-목록-삽입-부분-작성"><a href="#2-게시판-상세-페이지에서-댓글-목록-삽입-부분-작성" class="headerlink" title="2. 게시판 상세 페이지에서 댓글 목록 삽입 부분 작성"></a>2. 게시판 상세 페이지에서 댓글 목록 삽입 부분 작성</h2><ul><li>경로 : templates &gt; board &gt; document_detail.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;object.title&#125;&#125;  &#123;&#123;object.text&#125;&#125;  &#123;&#123;object.image.url&#125;&#125;  &#123;&#123;object.author.username&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'board:comment_create' object.id %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123;comment_form.as_p&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Comment"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-primary"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 댓글 목록이 삽입될 부분 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"docs_comment_list_area"</span>&gt;</span></span><br><span class="line">    &#123;% include 'board/comment_list.html' %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-댓글-생성-수정-삭제-함수-구현"><a href="#3-댓글-생성-수정-삭제-함수-구현" class="headerlink" title="3. 댓글 생성/수정/삭제 함수 구현"></a>3. 댓글 생성/수정/삭제 함수 구현</h2><ul><li><p>경로 : board_project &gt; board &gt; views.py</p><ul><li><p>댓글 생성(comment_create)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment_create</span><span class="params">(request, document_id)</span>:</span></span><br><span class="line">    document = get_object_or_404(Document, pk=document_id)</span><br><span class="line">    comment_form = CommentForm(request.POST)</span><br><span class="line">    comment_form.instance.author_id = request.user.id</span><br><span class="line">    comment_form.instance.document_id = document_id</span><br><span class="line">    <span class="keyword">if</span> comment_form.is_valid():</span><br><span class="line">        comment = comment_form.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># return redirect(reverse('board:detail', args=[document_id]))    </span></span><br><span class="line">    <span class="keyword">return</span> redirect(document)</span><br></pre></td></tr></table></figure></li><li><p>댓글 수정(comment_update)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment_update</span><span class="params">(request, comment_id)</span>:</span></span><br><span class="line">    comment = get_object_or_404(Comment, pk=comment_id)</span><br><span class="line">    document = get_object_or_404(Document, pk=comment.document.id)</span><br><span class="line">    <span class="keyword">if</span> request.user != comment.author:</span><br><span class="line">        messages.warning(request, <span class="string">"권한 없음"</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(document)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        form = CommentForm(request.POST, request.FILES, instance=comment)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> redirect(document)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = CommentForm(instance=comment)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'board/comment/comment_update.html'</span>, &#123;<span class="string">'form'</span>:form&#125;)</span><br></pre></td></tr></table></figure></li><li><p>댓글 삭제(comment_delete)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment_delete</span><span class="params">(request, comment_id)</span>:</span></span><br><span class="line">    comment = get_object_or_404(Comment, pk=comment_id)</span><br><span class="line">    document = get_object_or_404(Document, pk=comment.document.id)</span><br><span class="line">    <span class="keyword">if</span> request.user != comment.author <span class="keyword">and</span> <span class="keyword">not</span> request.user.is_staff <span class="keyword">and</span> request.user != document.author:</span><br><span class="line">        messages.warning(request, <span class="string">"권한 없음"</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(document)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        comment.delete()</span><br><span class="line">        <span class="keyword">return</span> redirect(document)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'board/comment/comment_delete.html'</span>, &#123;<span class="string">'object'</span>:comment&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-댓글-생성-수정-삭제-페이지-url-경로-설정"><a href="#4-댓글-생성-수정-삭제-페이지-url-경로-설정" class="headerlink" title="4. 댓글 생성/수정/삭제 페이지 url 경로 설정"></a>4. 댓글 생성/수정/삭제 페이지 url 경로 설정</h2><ul><li>경로 : board_project &gt; board &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">'comment/create/&lt;int:document_id&gt;'</span>, comment_create, name=<span class="string">'comment_create'</span>),</span><br><span class="line">path(<span class="string">'comment/update/&lt;int:comment_id&gt;'</span>, comment_update, name=<span class="string">'comment_update'</span>),</span><br><span class="line">path(<span class="string">'comment/delete/&lt;int:comment_id&gt;'</span>, comment_delete, name=<span class="string">'comment_delete'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-댓글-수정-삭제-템플릿-파일-생성-및-작성"><a href="#5-댓글-수정-삭제-템플릿-파일-생성-및-작성" class="headerlink" title="5. 댓글 수정/삭제 템플릿 파일 생성 및 작성"></a>5. 댓글 수정/삭제 템플릿 파일 생성 및 작성</h2><ul><li><p>경로 : templates &gt; board &gt; comment</p><ul><li><p>comment_delete.html 생성 (댓글 삭제 페이지)</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        &#123;% extends 'base.html' %&#125;</span><br><span class="line">        &#123;% block content %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Update"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-warning"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        &#123;% endblock %&#125;1) messages 클래스 호출</span><br><span class="line">    - from django.contrib import messages</span><br><span class="line">2) request한 유저와 comment 작성자 동일 인물 아닐 시, 메시지 경고</span><br><span class="line">    - if request.user != comment.author:</span><br><span class="line">        messages.warning(request, "권한 없음")</span><br></pre></td></tr></table></figure></li><li><p>comment_update.h1) messages 클래스 호출</p></li><li>from django.contrib import messages<br>2) request한 유저와 comment 작성자 동일 인물 아닐 시, 메시지 경고</li><li>if request.user != comment.author:<br>  messages.warning(request, “권한 없음”)이지))  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span>Do you want to delete &#123;&#123;object&#125;&#125;?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Delete Confirm"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-danger"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="6-관리자-사이트에-댓글-조회-및-수정-기능-적용"><a href="#6-관리자-사이트에-댓글-조회-및-수정-기능-적용" class="headerlink" title="6. 관리자 사이트에 댓글 조회 및 수정 기능 적용"></a>6. 관리자 사이트에 댓글 조회 및 수정 기능 적용</h2><ul><li>관리자페이지 커스터마이징</li><li>경로 : board &gt; admin.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentInline</span><span class="params">(admin.TabularInline)</span>:</span></span><br><span class="line">    model = Comment</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocumentOption</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'author'</span>, <span class="string">'title'</span>, <span class="string">'text'</span>, <span class="string">'slug'</span>, <span class="string">'created'</span>, <span class="string">'updated'</span>]</span><br><span class="line">    prepopulated_fields = &#123;<span class="string">'slug'</span>:(<span class="string">'title'</span>,)&#125;</span><br><span class="line">    inlines = [CommentInline]  <span class="comment"># 추가</span></span><br><span class="line">    </span><br><span class="line">admin.site.regiser(Document, DocumentOption)</span><br><span class="line">admin.site.register(Comment)</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/16/190516-django-board-comment-function/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SNS 네이버 로그인 기능 학습</title>
      <link>https://chohyeonkeun.github.io/2019/05/15/190515-django-SNS-LOGIN/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/15/190515-django-SNS-LOGIN/</guid>
      <pubDate>Wed, 15 May 2019 13:41:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;django-allauth-기능-사용&quot;&gt;&lt;a href=&quot;#django-allauth-기능-사용&quot; class=&quot;headerlink&quot; title=&quot;django allauth 기능 사용&quot;&gt;&lt;/a&gt;django allauth 기능 사용&lt;/h2&gt;&lt;h2 id=&quot;1-django-allauth-설치&quot;&gt;&lt;a href=&quot;#1-django-allauth-설치&quot; class=&quot;headerlink&quot; title=&quot;1. django-allauth 설치&quot;&gt;&lt;/a&gt;1. django-allauth 설치&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install django-allauth&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-settings-py-수정&quot;&gt;&lt;a href=&quot;#2-settings-py-수정&quot; class=&quot;headerlink&quot; title=&quot;2. settings.py 수정&quot;&gt;&lt;/a&gt;2. settings.py 수정&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;아이디, 이메일, 소셜 로그인 가능하도록 설정  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AUTHENTICATION_BACKENDS = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.auth.backends.ModelBackend&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;allauth.account.auth_backends.AuthenticationBackend&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INSTALLED_APP = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.sites&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 소셜 로그인을 관리하기 위해 기본으로 생기는 앱들&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;allauth&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;allauth.account&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;allauth.socialaccount&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;allauth.socialaccount.providers.naver&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SITE_ID = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 로그인 후에 이동할 경로 추가&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOGIN_REDIRECT_URL = &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="django-allauth-기능-사용"><a href="#django-allauth-기능-사용" class="headerlink" title="django allauth 기능 사용"></a>django allauth 기능 사용</h2><h2 id="1-django-allauth-설치"><a href="#1-django-allauth-설치" class="headerlink" title="1. django-allauth 설치"></a>1. django-allauth 설치</h2><ul><li><code>pip install django-allauth</code></li></ul><h2 id="2-settings-py-수정"><a href="#2-settings-py-수정" class="headerlink" title="2. settings.py 수정"></a>2. settings.py 수정</h2><ul><li>아이디, 이메일, 소셜 로그인 가능하도록 설정  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">'django.contrib.auth.backends.ModelBackend'</span>,</span><br><span class="line">    <span class="string">'allauth.account.auth_backends.AuthenticationBackend'</span>, </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSTALLED_APP = [</span><br><span class="line">    <span class="string">'django.contrib.sites'</span>,</span><br><span class="line">    <span class="comment"># 소셜 로그인을 관리하기 위해 기본으로 생기는 앱들</span></span><br><span class="line">    <span class="string">'allauth'</span>,</span><br><span class="line">    <span class="string">'allauth.account'</span>,</span><br><span class="line">    <span class="string">'allauth.socialaccount'</span>,</span><br><span class="line">    <span class="string">'allauth.socialaccount.providers.naver'</span>,</span><br><span class="line"></span><br><span class="line">SITE_ID = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 로그인 후에 이동할 경로 추가</span></span><br><span class="line">LOGIN_REDIRECT_URL = <span class="string">'/'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="3-url-경로-지정"><a href="#3-url-경로-지정" class="headerlink" title="3. url 경로 지정"></a>3. url 경로 지정</h2><ul><li>경로 : config &gt; urls.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'accounts/'</span>, include(<span class="string">'allauth.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-migrate-실행"><a href="#4-migrate-실행" class="headerlink" title="4. migrate 실행"></a>4. migrate 실행</h2><p><code>$ python manage.py migrate</code></p><h2 id="5-네이버-애플리케이션-등록"><a href="#5-네이버-애플리케이션-등록" class="headerlink" title="5. 네이버 애플리케이션 등록"></a>5. 네이버 애플리케이션 등록</h2><ul><li>경로 : django allauth 사이트 &gt; Providers &gt; Naver &gt; <a href="https://developers.naver.com/appinfo" target="_blank" rel="noopener">https://developers.naver.com/appinfo</a><ul><li>애플리케이션 등록</li><li>애플리케이션 이름 작성</li><li>사용 API는 ‘네이버 아이디로 로그인’ 선택</li><li>필수 항목에 회원이름과 이메일만 체크 (나머지는 추가 항목으로 넣을 수 있다.)</li><li>환경은 PC 웹 선택하고 아래와 같이 URL 입력</li><li>서비스 URL : <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> 입력</li><li>Callback URL : <a href="http://127.0.0.1:8000/accounts/naver/login/callback" target="_blank" rel="noopener">http://127.0.0.1:8000/accounts/naver/login/callback</a> </li><li>django-allauth 문서 홈페이지에서 providers 탭의 네이버 항목에 있다.</li></ul></li></ul><h2 id="6-서버-실행하여-관리자-사이트-접속"><a href="#6-서버-실행하여-관리자-사이트-접속" class="headerlink" title="6. 서버 실행하여 관리자 사이트 접속"></a>6. 서버 실행하여 관리자 사이트 접속</h2><ul><li>Social application 추가<ul><li>제공자 : Naver</li><li>이름 : 네이버 로그인</li><li>클라이언트 아이디 : 네이버 API 등록 시 발급되는 Client ID</li><li>비밀 키 : 네이버 API 등록 시 발급되는 Client Secret</li><li>sites : example.com 선택</li></ul></li></ul><h2 id="7-http-127-0-0-1-8000-accounts-login-접속하여-naver-누르고-로그인"><a href="#7-http-127-0-0-1-8000-accounts-login-접속하여-naver-누르고-로그인" class="headerlink" title="7. http://127.0.0.1:8000/accounts/login 접속하여 naver 누르고 로그인"></a>7. <a href="http://127.0.0.1:8000/accounts/login" target="_blank" rel="noopener">http://127.0.0.1:8000/accounts/login</a> 접속하여 naver 누르고 로그인</h2><ul><li>admin으로 접속되어 있다면 로그아웃</li><li>base.html에 로그인/로그아웃 URL 추가  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--// base.html //--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> user.is_authenticated %&#125;</span><br><span class="line">&lt;!--// </span><br><span class="line">django-allauth 문서 홈페이지/Views 탭에서 로그인, 로그아웃 URL 이름 확인</span><br><span class="line">//--&gt;</span><br><span class="line">&lt;a href="&#123;% url 'account_logout' %&#125;"&gt;Logout&lt;/a&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">&lt;a href="&#123;% url 'account_login' %&#125;"&gt;Login&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-뷰-페이지에서-소셜-회원가입-함수-작성"><a href="#8-뷰-페이지에서-소셜-회원가입-함수-작성" class="headerlink" title="8. 뷰 페이지에서 소셜 회원가입 함수 작성"></a>8. 뷰 페이지에서 소셜 회원가입 함수 작성</h2><ul><li>경로 : bard &gt; views.py  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> allauth.account.signals <span class="keyword">import</span> user_signed_up</span><br><span class="line"><span class="keyword">from</span> allauth.socialaccount.models <span class="keyword">import</span> SocialAccount</span><br><span class="line"><span class="comment"># 시그널이 발생했을 때 실행될 함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naver_signup</span><span class="params">(request, user, **kwargs)</span>:</span></span><br><span class="line">    social_user = SocialAccount.objects.filter(user=user)</span><br><span class="line">    <span class="keyword">if</span> social_user.exists():</span><br><span class="line">        user.last_name = social_user[<span class="number">0</span>].extra_data[<span class="string">'name'</span>]</span><br><span class="line">        user.save()</span><br><span class="line"><span class="comment"># 시그널과 해당 함수를 connect</span></span><br><span class="line"><span class="comment"># 시그널 연결 방법 2가지 : receiver 쓰는 방법, connect 쓰는 방법</span></span><br><span class="line">user_signed_up.connect(naver_signup)</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/15/190515-django-SNS-LOGIN/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Pagination 구현 방법</title>
      <link>https://chohyeonkeun.github.io/2019/05/14/190514-django-pagination/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/14/190514-django-pagination/</guid>
      <pubDate>Tue, 14 May 2019 14:31:48 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;게시판-board-프로젝트를-예로-들어보자&quot;&gt;&lt;a href=&quot;#게시판-board-프로젝트를-예로-들어보자&quot; class=&quot;headerlink&quot; title=&quot;게시판(board) 프로젝트를 예로 들어보자.&quot;&gt;&lt;/a&gt;게시판(board) 프로젝트를 예로 들어보자.&lt;/h2&gt;&lt;h2 id=&quot;1-뷰에서-페이지-설정&quot;&gt;&lt;a href=&quot;#1-뷰에서-페이지-설정&quot; class=&quot;headerlink&quot; title=&quot;1. 뷰에서 페이지 설정&quot;&gt;&lt;/a&gt;1. 뷰에서 페이지 설정&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;경로 : board_project &amp;gt; board &amp;gt; views.py&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="게시판-board-프로젝트를-예로-들어보자"><a href="#게시판-board-프로젝트를-예로-들어보자" class="headerlink" title="게시판(board) 프로젝트를 예로 들어보자."></a>게시판(board) 프로젝트를 예로 들어보자.</h2><h2 id="1-뷰에서-페이지-설정"><a href="#1-뷰에서-페이지-설정" class="headerlink" title="1. 뷰에서 페이지 설정"></a>1. 뷰에서 페이지 설정</h2><ul><li>경로 : board_project &gt; board &gt; views.py<br><br><a id="more"></a>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># all 전체를 가져온다.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">document_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    documents = Document.objects.all() </span><br><span class="line">    page = int(request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># page가 없다면, default값 1로 설정  </span></span><br><span class="line">    <span class="comment"># --&gt; 127.0.0.1:8000/ 검색 시, 127.0.0.1:8000/?page=1 로 url 변환</span></span><br><span class="line">    paginated_by = <span class="number">3</span>  </span><br><span class="line">    <span class="comment"># paginated_by : 페이지당 갯수</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Documents 객체 전체 갯수</span></span><br><span class="line">    total_count = len(documents)</span><br><span class="line">    <span class="comment"># 전체 페이지 계산</span></span><br><span class="line">    total_page = math.ceil(total_count/paginated_by)</span><br><span class="line">    <span class="comment"># 페이지 1부터 끝까지 범위 설정</span></span><br><span class="line">    page_range = range(<span class="number">1</span>, total_page+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 첫 페이지 인덱스와 마지막 페이지 인덱스 설정</span></span><br><span class="line">    start_index = paginated_by * (page<span class="number">-1</span>)</span><br><span class="line">    end_index = paginated_by * page</span><br><span class="line">    documents = documents[start_index:end_index]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'board/document_list.html'</span>, &#123;<span class="string">'object_list'</span>:documents, <span class="string">'total_page'</span>:total_page, <span class="string">'page_range'</span>:page_range&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-템플릿에서-페이지-디자인-설정"><a href="#2-템플릿에서-페이지-디자인-설정" class="headerlink" title="2. 템플릿에서 페이지 디자인 설정"></a>2. 템플릿에서 페이지 디자인 설정</h2><ul><li>경로 : board_project &gt; board &gt; templates &gt; board &gt; document_list.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">        &#123;% for page in page_range %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board:list' %&#125;?page=&#123;&#123;page&#125;&#125; "</span>&gt;</span>&#123;&#123;page&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><br></p>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/14/190514-django-pagination/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Pythonanywhere 이용한 배포</title>
      <link>https://chohyeonkeun.github.io/2019/05/13/190513-django-pythonanywhere/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/13/190513-django-pythonanywhere/</guid>
      <pubDate>Mon, 13 May 2019 14:39:11 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-Github-업로드&quot;&gt;&lt;a href=&quot;#1-Github-업로드&quot; class=&quot;headerlink&quot; title=&quot;1. Github 업로드&quot;&gt;&lt;/a&gt;1. Github 업로드&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Github - new repository 생성&lt;/li&gt;
&lt;li&gt;해당 repo 주소 복사&lt;/li&gt;
&lt;li&gt;경로 : 프로젝트 디렉토리 위치&lt;ul&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git add -A .   &lt;em&gt;(git add 하기 전에 .gitignore 폴더 생성하여 git에 올리지 않을 항목 입력)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;git commit -m ‘message’&lt;/li&gt;
&lt;li&gt;git remote add origin ‘repo 주소’ &lt;em&gt;(해당 repo주소를 ‘origin’으로 설정)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;git push -u origin master&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-Github-업로드"><a href="#1-Github-업로드" class="headerlink" title="1. Github 업로드"></a>1. Github 업로드</h2><ul><li>Github - new repository 생성</li><li>해당 repo 주소 복사</li><li>경로 : 프로젝트 디렉토리 위치<ul><li>git init</li><li>git add -A .   <em>(git add 하기 전에 .gitignore 폴더 생성하여 git에 올리지 않을 항목 입력)</em></li><li>git commit -m ‘message’</li><li>git remote add origin ‘repo 주소’ <em>(해당 repo주소를 ‘origin’으로 설정)</em></li><li>git push -u origin master</li></ul></li></ul><a id="more"></a><h2 id="2-Pythonanywhere-가입-및-배포"><a href="#2-Pythonanywhere-가입-및-배포" class="headerlink" title="2. Pythonanywhere 가입 및 배포"></a>2. Pythonanywhere 가입 및 배포</h2><ul><li>파이썬 애니웨어 &gt; sign-up &amp; login</li><li>파이썬 애니웨어 &gt; ‘bash’<ul><li>git clone ‘repo 주소’</li><li>cd ‘프로젝트 디렉토리’</li><li>virtualenv –python=python3.6 venv</li><li>source venv/bin/activate</li><li>pip install django</li><li>pip install -r requirements.txt</li></ul></li><li><p>Pycharm &gt; 프로젝트 &gt; settings.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">ALLOWED_HOST = [<span class="string">'.pythonanywhere.com'</span>,<span class="string">'localhost'</span>,<span class="string">'127.0.0.1'</span>]</span><br></pre></td></tr></table></figure></li><li><p>파이썬 애니웨어 &gt; ‘bash’</p><ul><li>python manage.py migrate</li><li>python manage.py createsuperuser</li></ul></li><li><p>파이썬 애니웨어 &gt; ‘web’</p><ul><li>‘Add a new web app’ 클릭</li><li>‘Manual configuration’ 클릭</li><li>‘Python 3.x’ 클릭</li><li><p>‘code’ &gt; ‘WSGI Configuration file’<br></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">path = <span class="string">'/home/(아이디)/(프로젝트 폴더명)/'</span></span><br><span class="line"><span class="keyword">if</span> path <span class="keyword">not</span> <span class="keyword">in</span> sys.path:</span><br><span class="line">    sys.path.append(path)</span><br><span class="line"></span><br><span class="line">os.environ.[<span class="string">'DJANGO_SETTINGS_MODULE'</span>] = <span class="string">'config.settings'</span></span><br><span class="line"><span class="keyword">from</span> django.core.wsgi <span class="keyword">import</span> get_wsgi_application</span><br><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.handlers <span class="keyword">import</span> StaticFilesHandler</span><br><span class="line"></span><br><span class="line">application = StaticFilesHandler(get_wsgi_application())</span><br></pre></td></tr></table></figure></li><li><p>‘Virtualenv’ 경로 지정 <em>(‘bash’에서 ‘pwd’ 입력하여 나온 경로 붙여넣기)</em><br>  ex) /home/pstman7/wps_blog/venv</p></li><li><p>‘Reload (아이디).pythonanaywhere.com’ 클릭</p></li><li>‘(아이디).pythonanywhere.com’ 접속 </li></ul></li><li>장고 프로젝트 &gt; settings.py<ul><li>STATIC_ROOT = os.path.join(BASE_DIR, ‘staticfiles’)</li></ul></li><li>파이썬 애니웨어 &gt; ‘bash’<ul><li>python manage.py collectstatic</li></ul></li><li>파이썬 애니웨어 &gt; ‘web’<ul><li>Static files:<ul><li>URL –&gt; ‘/static/‘ 설정</li><li>Directory –&gt; ‘/home/[아이디]/[프로젝트 명]/staticfiles’ 설정  </li></ul></li></ul></li></ul><p><br></p>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/13/190513-django-pythonanywhere/#disqus_thread</comments>
    </item>
    
    <item>
      <title>disqus 연동한 댓글 기능 적용</title>
      <link>https://chohyeonkeun.github.io/2019/05/12/190512-django-disqus/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/12/190512-django-disqus/</guid>
      <pubDate>Sun, 12 May 2019 13:15:06 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-disqus-com-접속&quot;&gt;&lt;a href=&quot;#1-disqus-com-접속&quot; class=&quot;headerlink&quot; title=&quot;1. disqus.com 접속&quot;&gt;&lt;/a&gt;1. disqus.com 접속&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;회원가입 및 로그인&lt;/li&gt;
&lt;li&gt;‘I want to install isqus in my site’ 클릭&lt;/li&gt;
&lt;li&gt;Basic &amp;gt; ‘subscribe now’ 클릭&lt;/li&gt;
&lt;li&gt;플랫폼 선택(보이지 않는다면, ‘I don’t see~’ 클릭)&lt;/li&gt;
&lt;li&gt;최하단 ‘Configure’ 클릭&lt;/li&gt;
&lt;li&gt;변경할 것이 특별히 없다면 최하단 ‘Complete Setup’ 클릭&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-disqus-com-접속"><a href="#1-disqus-com-접속" class="headerlink" title="1. disqus.com 접속"></a>1. disqus.com 접속</h2><ul><li>회원가입 및 로그인</li><li>‘I want to install isqus in my site’ 클릭</li><li>Basic &gt; ‘subscribe now’ 클릭</li><li>플랫폼 선택(보이지 않는다면, ‘I don’t see~’ 클릭)</li><li>최하단 ‘Configure’ 클릭</li><li>변경할 것이 특별히 없다면 최하단 ‘Complete Setup’ 클릭</li></ul><p><br><br><a id="more"></a></p><h2 id="2-django-프로젝트에-disqus-연동"><a href="#2-django-프로젝트에-disqus-연동" class="headerlink" title="2. django 프로젝트에 disqus 연동"></a>2. django 프로젝트에 disqus 연동</h2><ul><li><code>$ pip install django-disqus</code></li><li><p>프로젝트 settings.py 수정</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'disqus'</span>, <span class="comment"># 데이터베이스 저장 불필요</span></span><br><span class="line">    <span class="string">'django.contrib.sites'</span> <span class="comment"># 데이터베이스 저장 필요 --&gt; migrate 필요</span></span><br><span class="line">]</span><br><span class="line">DISQUS_WEBSITE_SHORTNAME = <span class="string">'설정한 사이트 이름'</span></span><br><span class="line">SITE_ID = <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>DB 변경사항 저장 </p><ul><li><code>$ python manage.py migrate</code></li></ul></li></ul><p><br></p><h2 id="3-원하는-위치에-disqus-적용"><a href="#3-원하는-위치에-disqus-적용" class="headerlink" title="3. 원하는 위치에 disqus 적용"></a>3. 원하는 위치에 disqus 적용</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load disqus_tags %&#125;  <span class="comment">&lt;!-- disqus 태그 기능 사용 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% disqus_show_comments %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/12/190512-django-disqus/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Signal 학습</title>
      <link>https://chohyeonkeun.github.io/2019/05/11/190511-django-Signal/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/11/190511-django-Signal/</guid>
      <pubDate>Sat, 11 May 2019 14:50:49 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Signal이란&quot;&gt;&lt;a href=&quot;#Signal이란&quot; class=&quot;headerlink&quot; title=&quot;Signal이란?&quot;&gt;&lt;/a&gt;Signal이란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;특정 액션이 발생하면 그 후에 발생하는 이벤트 (django를 포함한 여러 프레임워크에 존재)&lt;/li&gt;
&lt;li&gt;저장하기 전/후, 삭제하기 전/후 등 특정 signal이 웹 어플리케이션에 전달&lt;/li&gt;
&lt;li&gt;예로, 회원가입 후 ‘축하합니다’ 메일 보낼 때 signal이 사용된다. &lt;/li&gt;
&lt;li&gt;Signal 종류&lt;ul&gt;
&lt;li&gt;pre_save : 저장 전, 실행&lt;/li&gt;
&lt;li&gt;post_save : 저장 후, 실행&lt;/li&gt;
&lt;li&gt;pre_delete : 삭제 전, 실행&lt;/li&gt;
&lt;li&gt;post_save : 삭제 후, 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Signal이란"><a href="#Signal이란" class="headerlink" title="Signal이란?"></a>Signal이란?</h2><ul><li>특정 액션이 발생하면 그 후에 발생하는 이벤트 (django를 포함한 여러 프레임워크에 존재)</li><li>저장하기 전/후, 삭제하기 전/후 등 특정 signal이 웹 어플리케이션에 전달</li><li>예로, 회원가입 후 ‘축하합니다’ 메일 보낼 때 signal이 사용된다. </li><li>Signal 종류<ul><li>pre_save : 저장 전, 실행</li><li>post_save : 저장 후, 실행</li><li>pre_delete : 삭제 전, 실행</li><li>post_save : 삭제 후, 실행</li></ul></li></ul><p><br><br><a id="more"></a></p><h2 id="post-delete-구현해보기"><a href="#post-delete-구현해보기" class="headerlink" title="post_delete 구현해보기"></a>post_delete 구현해보기</h2><ul><li><p>이전에 학습했던 dstagram 프로젝트를 예시로 들어보자.</p><ul><li><p>특정 포스트 삭제 후, s3에 저장된 데이터 삭제 </p><blockquote><p>경로 : dstagram_project &gt; photo &gt; views.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_delete</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(post_delete, sender=Photo) </span></span><br><span class="line"><span class="comment"># 어떤 종류의 시그널이 발생했고, 어디서 보냈는지를 명시</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_delete</span><span class="params">(sender, instance, **kwargs)</span>:</span>  </span><br><span class="line"><span class="comment"># 메서드 이름은 자유이며, sender와 **kwargs를 매개변수로 받아온다.</span></span><br><span class="line"><span class="comment"># instance : 현재 저장된 바로 그 instance</span></span><br><span class="line"><span class="comment"># kwargs는 signal 종류마다 그 내용이 다르다.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># s3 연결한 다음에 object 사진 지울 것</span></span><br><span class="line">    session = boto3.Session(</span><br><span class="line">aws_access_key_id = settings.AWS_ACCESS_KEY_ID,</span><br><span class="line">aws_secret_access_key = settings.AWS_SECRET_ACCESS_KEY,</span><br><span class="line">region_name = settings.AWS_REGION</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    s3 = session.resource(<span class="string">'s3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># s3.Object는 s3에 업로드된 파일 객체를 얻어오는 클래스</span></span><br><span class="line">    <span class="comment"># arg1 = 버킷 이름</span></span><br><span class="line">    <span class="comment"># arg2 = 파일 경로 - Key (버킷 실제 경로는 media/ 에 있으므로 "media/" 추가)</span></span><br><span class="line">    image = s3.Object(settings.AWS_STORAGE_BUCKET_NAME, <span class="string">"media/"</span> + str(instance.image))</span><br><span class="line">    image.delete()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>조금 더 간단한 방법을 사용하자면 아래와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_delete</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(post_delete, sender=Photo)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_delete</span><span class="params">(sender, instance, **kwargs)</span>:</span>  <span class="comment"># 메서드 이름은 상관없다. **kwargs만 붙여라</span></span><br><span class="line">    <span class="comment"># s3 연결한 다음에 object의 사진 지울 것</span></span><br><span class="line">    <span class="comment"># instance 는 그 포스트의 메모리 주소</span></span><br><span class="line">    storage = instance.image.storage</span><br><span class="line">    <span class="comment"># s3에 저장된 데이터들은 path로 찾을 수 없고, key 로 찾아야 한다.</span></span><br><span class="line">    <span class="keyword">if</span> storage.exists(str(instance.image)):  <span class="comment"># media storage가 "media/" 붙여서 만들어준다.</span></span><br><span class="line">        storage.delete(str(instance.image))</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/11/190511-django-Signal/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ajax 기초 학습</title>
      <link>https://chohyeonkeun.github.io/2019/05/10/190510-django-Ajax/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/10/190510-django-Ajax/</guid>
      <pubDate>Fri, 10 May 2019 12:30:57 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-Ajax-정의&quot;&gt;&lt;a href=&quot;#1-Ajax-정의&quot; class=&quot;headerlink&quot; title=&quot;1. Ajax 정의&quot;&gt;&lt;/a&gt;1. Ajax 정의&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Ajax(Asynchronous JavaScript and XML)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript를 사용한 비동기 통신, 클라이언트와 서버 간에 XML 데이터를 주고받는 기술&lt;/li&gt;
&lt;li&gt;JavaScript 라이브러리&lt;/li&gt;
&lt;li&gt;빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-Ajax-정의"><a href="#1-Ajax-정의" class="headerlink" title="1. Ajax 정의"></a>1. Ajax 정의</h2><p><code>Ajax(Asynchronous JavaScript and XML)</code></p><ul><li>JavaScript를 사용한 비동기 통신, 클라이언트와 서버 간에 XML 데이터를 주고받는 기술</li><li>JavaScript 라이브러리</li><li>빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법 </li></ul><p><br><br><a id="more"></a> </p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ol><li>웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신(웹 페이지 속도 향상)</li><li>웹 페이지가 로드된 후에 서버로 데이터 요청</li><li>웹 페이지가 로드된 후에 서버로부터 데이터 전송</li><li>백그라운드 영역에서 서버로 데이터 전송</li><li>기존 웹에서는 불가능했던 다양한 UI 가능</li></ol><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ol><li>클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식 사용<br>–&gt; 서버 푸시 방식의 서비스 제작 불가 </li><li>binary 데이터를 보내거나 받을 수 없다.</li><li>Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수 없다.</li><li>클라이언트 PC로 Ajax 요청을 보낼 수 없다.</li></ol><h2 id="2-Ajax-project-생성"><a href="#2-Ajax-project-생성" class="headerlink" title="2. Ajax project 생성"></a>2. Ajax project 생성</h2><blockquote><p>Ajax 사용법에 대해 예제를 통해서 간단히 알아보자.</p></blockquote><p><strong>1. 디렉토리 생성 (디렉토리명: ajax_project)</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ajax_project</span><br></pre></td></tr></table></figure></p><p><strong>2. 해당 디렉토리에서 가상환경 생성</strong></p><ul><li>가상환경에서 python을 원하는 버젼으로 설정하여 생성한다. (여기서는 python3.6으로 설정)  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv --python=python3.6 venv</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. django 설치</strong></p><ul><li>pip install을 사용하여 django를 설치한다. (여기서는 버젼 2.1로 설치)  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install django==2.1</span><br></pre></td></tr></table></figure></li></ul><p><strong>4. 프로젝트 생성 (프로젝트명: config)</strong></p><ul><li>현재 디렉토리에 config 프로젝트 생성  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startproject config .</span><br></pre></td></tr></table></figure></li></ul><p><strong>5. 프로젝트 뷰 생성 및 간략 작성</strong></p><ul><li><p>데이터를 입력받는 뷰와 데이터를 받아주는 뷰를 작성한다.</p><blockquote><p>경로: config &gt; views.py</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터를 입력받는 뷰, 사용자의 입력을 받는 뷰</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터를 받아주는 뷰, 처리후 응답을 하는 뷰</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>6. 뷰를 연결할 url 생성</strong></p><blockquote><p>경로: config &gt; urls.py</p></blockquote><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> index, get_data</span><br></pre></td></tr></table></figure></code></pre><p><strong>7. 프로젝트 하위 폴더에 데이터를 요청하는 템플릿 엔진 생성</strong></p><ul><li><p>해당 HTML에서 데이터를 요청한다.</p><blockquote><p>경로: config &gt; layout(생성) &gt; index.html(생성)</p></blockquote>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX 연습<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    test</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>링크 버튼<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        Username : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Email : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Content : <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"send_form"</span> <span class="attr">value</span>=<span class="string">"Send"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        csrf_token = "&#123;&#123;csrf_token&#125;&#125;"</span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">            HTML : 레이아웃, 컨텐츠</span></span><br><span class="line"><span class="undefined">            CSS : 꾸미기</span></span><br><span class="line"><span class="undefined">            JavaScript : 동작</span></span><br><span class="line"><span class="undefined">            1. 언제 : 페이지가 로드가 끝났을 떄? 사용자가 어떤 액션을 취했을 때냐?</span></span><br><span class="line"><span class="undefined">                event - 마우스 클릭 or 키보드 입력 or 스크롤</span></span><br><span class="line"><span class="undefined">            2. 무엇을 : 어떤 요소를? 브라우저 객체를?</span></span><br><span class="line"><span class="undefined">            3. 어떻게 : 삭제? 추가? 변경? 숨기기? 보이기?</span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="undefined">        $(function() &#123;</span></span><br><span class="line"><span class="undefined">            // 페이지 로드가 끝났을 때 추가하는 부분(대부분 이 안에 추가된다.)</span></span><br><span class="line"><span class="undefined">            $('a').click(function() &#123;</span></span><br><span class="line"><span class="undefined">                alert('a 태그를 클릭하셨습니다.');</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            $('a').mouseover(function() &#123;</span></span><br><span class="line"><span class="undefined">                console.log('마우스 오버');</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            $('#send_form').submit(function(e) &#123;</span></span><br><span class="line"><span class="undefined">                // 원래의 동작 금지(ex. 링크 클릭하면 주소 이동 금지)</span></span><br><span class="line"><span class="undefined">                e.preventDefault();      </span></span><br><span class="line"><span class="undefined">                data = $(this).serialize </span></span><br><span class="line"><span class="undefined">                // $(this) : 해당 이벤트 발생된 주체</span></span><br><span class="line"><span class="undefined">                // serialize : 데이트 전송 편하도록 직렬화</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                // ajax로 데이터 전송</span></span><br><span class="line"><span class="undefined">                $.ajax(&#123;            </span></span><br><span class="line"><span class="undefined">                    url: "&#123;% url 'get_data' %&#125;", // ajax로 데이터 교환할 페이지 주소</span></span><br><span class="line"><span class="undefined">                    method: "POST",</span></span><br><span class="line"><span class="undefined">                    data: data</span></span><br><span class="line"><span class="undefined">                &#125;).done(function() &#123;</span></span><br><span class="line"><span class="undefined">                    alert(data.message);</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">                return false;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">        데이터를 전송하는 페이지(HTML), 데이터를 전송받는 페이지(django view)</span></span><br><span class="line"><span class="undefined">        HTML - 회원가입, 좋아요 데이터 전송 </span></span><br><span class="line"><span class="undefined">        -&gt; 장고측 뷰가 데이터를 받아 모델 처리, 로직 처리</span></span><br><span class="line"><span class="undefined">        -&gt; 모델처리가 완료되면 메시지, 혹은 처리 결과 데이터를 다시 HTML로 전송</span></span><br><span class="line"><span class="undefined">        -&gt; HTML은 응답받은 데이터를 가지고 화면에 정보 출력</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            url: "클라이언트가 요청 보낼 서버의 URL 주소",</span></span><br><span class="line"><span class="undefined">            method:"POST",          // HTTP 요청 방식(GET, POST)</span></span><br><span class="line"><span class="undefined">            type: "json",           // 서버에서 보내줄 데이터의 타입(default값으로 json으로 되어있다.)</span></span><br><span class="line"><span class="undefined">            data: &#123;name: "홍길동"&#125;   // HTTP 요청과 함께 서버로 보낼 데이터</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;).done(function(data) &#123;    // HTTP 요청 성공 시, 요청한 데이터가 done() 메소드로 전달</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;).fail(function(xhr, data) &#123;     // HTTP 요청 실패 시, 오류와 상태에 관한 정보가 fail() 메소드로 전달</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;).always(function(xhr, data) &#123;   // HTTP 요청의 성공여부와는 상관없이 언제나 always()메소드 실행</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>8. 프로젝트 뷰 상세 작성</strong></p><ul><li><p>프로젝트(config)의 뷰에서 데이터를 전송 받는다.</p><blockquote><p>경로: config &gt; views.py</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터를 입력받는 뷰, 사용자의 입력을 받는 뷰</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터를 받아주는 뷰, 처리후 응답을 하는 뷰</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(request.POST)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    class A:</span></span><br><span class="line"><span class="string">        type = 'b'</span></span><br><span class="line"><span class="string">        weight = 180</span></span><br><span class="line"><span class="string">    a = A()</span></span><br><span class="line"><span class="string">    a를 Json으로 보내려면, JsonResponse를 이용해 텍스트형식으로 변환 </span></span><br><span class="line"><span class="string">    a -&gt; &#123;'type':'b', 'weight':180&#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 처리부</span></span><br><span class="line">    username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">    email = request.POST.get(<span class="string">'email'</span>)</span><br><span class="line">    content = request.POST.get(<span class="string">'content'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'message'</span>:<span class="string">"email sent to"</span>+email&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/10/190510-django-Ajax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 도메인 연결 방법_2</title>
      <link>https://chohyeonkeun.github.io/2019/05/09/190509-django-AWS-2/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/09/190509-django-AWS-2/</guid>
      <pubDate>Thu, 09 May 2019 11:25:17 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;9-AWS-gt-네트워킹-및-콘텐츠-전송-gt-Route-53&quot;&gt;&lt;a href=&quot;#9-AWS-gt-네트워킹-및-콘텐츠-전송-gt-Route-53&quot; class=&quot;headerlink&quot; title=&quot;9. AWS &amp;gt; 네트워킹 및 콘텐츠 전송 &amp;gt; Route 53&quot;&gt;&lt;/a&gt;9. AWS &amp;gt; 네트워킹 및 콘텐츠 전송 &amp;gt; Route 53&lt;/h2&gt;&lt;p&gt;보유한 도메인의 네임서버를 설정해주는 작업을 수행할 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 관리 시작&lt;/li&gt;
&lt;li&gt;호스팅 영역 생성 &amp;gt; 도메인 이름 입력 &amp;gt; 생성&lt;/li&gt;
&lt;li&gt;해당 도메인 선택 &amp;gt; TTL 설정(ex. 1분)&lt;/li&gt;
&lt;li&gt;NS 유형의 value 복사하여 도메인 웹호스팅 사이트(가비아)에 네임서버로 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;10-HTTP로-연결-https는-개인키-공용키-구입-필요&quot;&gt;&lt;a href=&quot;#10-HTTP로-연결-https는-개인키-공용키-구입-필요&quot; class=&quot;headerlink&quot; title=&quot;10. HTTP로 연결 (https는 개인키, 공용키 구입 필요)&quot;&gt;&lt;/a&gt;10. HTTP로 연결 (https는 개인키, 공용키 구입 필요)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;경로 : dstagram_project &amp;gt; config &amp;gt; settings.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;AWS_S3_SECURE_URLS = False&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="9-AWS-gt-네트워킹-및-콘텐츠-전송-gt-Route-53"><a href="#9-AWS-gt-네트워킹-및-콘텐츠-전송-gt-Route-53" class="headerlink" title="9. AWS &gt; 네트워킹 및 콘텐츠 전송 &gt; Route 53"></a>9. AWS &gt; 네트워킹 및 콘텐츠 전송 &gt; Route 53</h2><p>보유한 도메인의 네임서버를 설정해주는 작업을 수행할 것이다.</p><ul><li>DNS 관리 시작</li><li>호스팅 영역 생성 &gt; 도메인 이름 입력 &gt; 생성</li><li>해당 도메인 선택 &gt; TTL 설정(ex. 1분)</li><li>NS 유형의 value 복사하여 도메인 웹호스팅 사이트(가비아)에 네임서버로 설정</li></ul><h2 id="10-HTTP로-연결-https는-개인키-공용키-구입-필요"><a href="#10-HTTP로-연결-https는-개인키-공용키-구입-필요" class="headerlink" title="10. HTTP로 연결 (https는 개인키, 공용키 구입 필요)"></a>10. HTTP로 연결 (https는 개인키, 공용키 구입 필요)</h2><blockquote><p>경로 : dstagram_project &gt; config &gt; settings.py</p></blockquote><p><code>AWS_S3_SECURE_URLS = False</code></p><p><br><br><a id="more"></a></p><h2 id="11-RDS-gt-파라미터-그룹-생성"><a href="#11-RDS-gt-파라미터-그룹-생성" class="headerlink" title="11. RDS &gt; 파라미터 그룹 생성"></a>11. RDS &gt; 파라미터 그룹 생성</h2><blockquote><p>경로 : AWS &gt; 데이터베이스 &gt; RDS</p></blockquote><ul><li>파라미터 그룹 접속</li><li>파라미터 그룹 생성</li><li>파라미터 그룹 패밀리 선택(ex. postgres9.6)</li><li>그룹 이름 및 설명 입력(ex. chk-postgres / in wps)</li><li>생성</li><li>생성한 그룹(chk-postgres)에 접속</li><li>파라미터에 encoding 검색</li><li>Values 를 UTF-8로 수정</li></ul><h2 id="12-RDS-gt-데이터베이스-생성"><a href="#12-RDS-gt-데이터베이스-생성" class="headerlink" title="12. RDS &gt; 데이터베이스 생성"></a>12. RDS &gt; 데이터베이스 생성</h2><blockquote><p>경로 : AWS &gt; 데이터베이스 &gt; RDS</p></blockquote><ul><li>데이터베이스 생성</li><li>postgreSQL 선택(과금되고 싶지 않다면, ‘RDS 프리 티어에 적용되는 옵션만 사용’ 클릭)</li><li>DB 엔진 버젼 선택 (ex. PostgreSQL 9.6.12-R1)</li><li>DB 인스턴스 클래스 선택 (ex. db.t2.micro - 1 vCPU, 1GiB RAM)</li><li>‘설정’ 항목<ul><li>DB 인스턴스 식별자 입력 (ex. wps10-dstagram)</li><li>DB 파라미터 그룹 선택 (ex. chk-postgres)</li></ul></li><li>백업 period 선택 (ex. 0days)</li></ul><h2 id="13-RDS-gt-보안-그룹-접속"><a href="#13-RDS-gt-보안-그룹-접속" class="headerlink" title="13. RDS &gt; 보안 그룹 접속"></a>13. RDS &gt; 보안 그룹 접속</h2><blockquote><p>경로 : RDS &gt; wps10-dstagram &gt; Details &gt; Security groups</p></blockquote><p>어느 곳에서든 데이터베이스를 연동하고 싶다면, 하단 인바운드에서 편집</p><ul><li>유형 선택 (PostgresSQL)</li><li>소스 선택 (위치 무관)</li><li>저장</li></ul><h2 id="14-프로젝트-settings-py에서-데이터베이스-수정"><a href="#14-프로젝트-settings-py에서-데이터베이스-수정" class="headerlink" title="14. 프로젝트 settings.py에서 데이터베이스 수정"></a>14. 프로젝트 settings.py에서 데이터베이스 수정</h2><blockquote><p>경로 : dstagram_project &gt; config &gt; settings.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'dstagram'</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'admin_wps'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'비밀번호 입력'</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'해당 DB 인스턴스 식별자 &gt; 엔드포인트 복사 &gt; 붙여넣기'</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'5432'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-데이터베이스-초기화"><a href="#15-데이터베이스-초기화" class="headerlink" title="15. 데이터베이스 초기화"></a>15. 데이터베이스 초기화</h2><blockquote><p>경로 : dstagram_project 디렉토리</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="16-관리자-생성"><a href="#16-관리자-생성" class="headerlink" title="16. 관리자 생성"></a>16. 관리자 생성</h2><blockquote><p>경로 : dstagram_project 디렉토리</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py createsuperuser</span><br></pre></td></tr></table></figure><ul><li>관리자 이름, 이메일주소, 비밀번호 입력</li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/09/190509-django-AWS-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 도메인 연결 방법_1</title>
      <link>https://chohyeonkeun.github.io/2019/05/08/190508-django-AWS-1/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/08/190508-django-AWS-1/</guid>
      <pubDate>Wed, 08 May 2019 11:55:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-AWS-gt-서비스-gt-스토리지-gt-S3-접속&quot;&gt;&lt;a href=&quot;#1-AWS-gt-서비스-gt-스토리지-gt-S3-접속&quot; class=&quot;headerlink&quot; title=&quot;1. AWS &amp;gt; 서비스 &amp;gt; 스토리지 &amp;gt; S3 접속&quot;&gt;&lt;/a&gt;1. AWS &amp;gt; 서비스 &amp;gt; 스토리지 &amp;gt; S3 접속&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;버킷 생성&lt;ul&gt;
&lt;li&gt;버킷 이름 설정 (ex. media.wpsschool.site)&lt;/li&gt;
&lt;li&gt;지역 &amp;gt; ‘아시아 태평양(서울)’ 설정&lt;/li&gt;
&lt;li&gt;‘이 버킷의 퍼블릭 액세스 설정’ 4개 항목 체크 해제&lt;/li&gt;
&lt;li&gt;‘시스템 권한 관리’ 액세스 권한 부여&lt;/li&gt;
&lt;li&gt;버킷 만들기&lt;/li&gt;
&lt;li&gt;속성 &amp;gt; 정적 웹 사이트 호스팅 &amp;gt; ‘이 버킷을 사용하여 웹 사이트를 호스팅합니다.’ &amp;gt; 인덱스 문서, 오류문서 작성 &amp;gt; 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-AWS-gt-서비스-gt-스토리지-gt-S3-접속"><a href="#1-AWS-gt-서비스-gt-스토리지-gt-S3-접속" class="headerlink" title="1. AWS &gt; 서비스 &gt; 스토리지 &gt; S3 접속"></a>1. AWS &gt; 서비스 &gt; 스토리지 &gt; S3 접속</h2><ul><li>버킷 생성<ul><li>버킷 이름 설정 (ex. media.wpsschool.site)</li><li>지역 &gt; ‘아시아 태평양(서울)’ 설정</li><li>‘이 버킷의 퍼블릭 액세스 설정’ 4개 항목 체크 해제</li><li>‘시스템 권한 관리’ 액세스 권한 부여</li><li>버킷 만들기</li><li>속성 &gt; 정적 웹 사이트 호스팅 &gt; ‘이 버킷을 사용하여 웹 사이트를 호스팅합니다.’ &gt; 인덱스 문서, 오류문서 작성 &gt; 저장</li></ul></li></ul><p><br><br><a id="more"></a></p><h2 id="2-보안-자격-증명-및-규정-준수-gt-IAM-접속"><a href="#2-보안-자격-증명-및-규정-준수-gt-IAM-접속" class="headerlink" title="2. 보안, 자격 증명 및 규정 준수 &gt; IAM 접속"></a>2. 보안, 자격 증명 및 규정 준수 &gt; IAM 접속</h2><ul><li>사용자 클릭<ul><li>사용자 이름 입력(ex. wps10-s3)</li><li>액세스 유형의 프로그래밍 방식 액세스 선택</li><li>그룹에 사용자 추가 &gt; 그룹 생성<ul><li>그룹 이름 입력</li><li>AlexaForBusinessFullAccess 선택</li><li>그룹 생성</li><li>.csv로 파일 받기(Access key ID, Secret access key 확인하기 위함)<br>–&gt; 잃어버리면 다시는 확인할 수 없으니, 주의할 것</li></ul></li></ul></li></ul><h2 id="3-AWS-이용하기-위한-모듈-설치"><a href="#3-AWS-이용하기-위한-모듈-설치" class="headerlink" title="3. AWS 이용하기 위한 모듈 설치"></a>3. AWS 이용하기 위한 모듈 설치</h2><ul><li>pip install boto3</li><li>pip install django-storages</li></ul><h2 id="4-S3-버킷에-static-파일-생성-및-연동"><a href="#4-S3-버킷에-static-파일-생성-및-연동" class="headerlink" title="4. S3 버킷에 static 파일 생성 및 연동"></a>4. S3 버킷에 static 파일 생성 및 연동</h2><p><code>python manage.py collectstatic</code></p><h2 id="5-프로젝트-gt-settings-수정"><a href="#5-프로젝트-gt-settings-수정" class="headerlink" title="5. 프로젝트 &gt; settings 수정"></a>5. 프로젝트 &gt; settings 수정</h2><blockquote><p>경로 : dstagram_project[루트 디렉토리] &gt; config[프로젝트 이름] &gt; settings.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">AWS_ACCESS_KEY_ID = <span class="string">'ACCESS KEY ID 입력'</span></span><br><span class="line">AWS_SECRET_ACCESS_KEY = <span class="string">'SECRET ACCESS KEY 입력'</span></span><br><span class="line">AWS_REGION = <span class="string">'ap-northeast-2'</span></span><br><span class="line">AWS_STORAGE_BUCKET_NAME = <span class="string">'버킷 이름'</span></span><br><span class="line">AWS_S3_CUSTOM_DOMAIN = <span class="string">'s3.%s.amazonaws.com/%s'</span> % (AWS_REGION, AWS_STORAGE_BUCKET_NAME)</span><br><span class="line"><span class="comment"># Route 53 연결 시, AWS_S3_CUSTOM_DOMAIN 수정</span></span><br><span class="line"><span class="comment"># AWS_S3_CUSTOM_DOMAIN = '%s' AWS_STORAGE_BUCKET_NAME</span></span><br><span class="line">AWS_S3_OBJECT_PARAMETERS = &#123;</span><br><span class="line">    <span class="string">'CacheControl'</span> : <span class="string">'max-age=86400'</span>,</span><br><span class="line">&#125;</span><br><span class="line">AWS_DEFAULT_ACL = <span class="string">'public-read'</span></span><br><span class="line">AWS_LOCATION = <span class="string">'static'</span></span><br><span class="line">AWS_S3_SECURE_URLS = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'http://%s/%s/'</span> % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)</span><br><span class="line">STATICFILES_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line"></span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">'config.asset_storage.MediaStorage'</span></span><br></pre></td></tr></table></figure><h2 id="6-프로젝트-gt-asset-storage-py-생성"><a href="#6-프로젝트-gt-asset-storage-py-생성" class="headerlink" title="6. 프로젝트 &gt; asset_storage.py 생성"></a>6. 프로젝트 &gt; asset_storage.py 생성</h2><blockquote><p>경로 : dstagram_project &gt; config &gt; asset_storage.py 생성</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> storages.backends.s3boto3 <span class="keyword">import</span> S3Boto3Storage</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MediaStorage</span><span class="params">(S3Boto3Storage)</span>:</span></span><br><span class="line">    location = <span class="string">'media'</span></span><br><span class="line">    file_overwrite = <span class="literal">False</span></span><br><span class="line">    bucket_name = <span class="string">'버킷 이름'</span></span><br><span class="line"></span><br><span class="line">    region_name = <span class="string">'ap-northeast-2'</span></span><br><span class="line">    custom_domain = <span class="string">'s3.%s.amazonaws.com/%s'</span> % (region_name, bucket_name)</span><br><span class="line">    <span class="comment"># Route 53 연결 시, custom_domain 을 bucket_name으로 설정</span></span><br><span class="line">    <span class="comment"># custom_domain = bucket_name</span></span><br></pre></td></tr></table></figure><h2 id="7-프로젝트의-url-py-수정"><a href="#7-프로젝트의-url-py-수정" class="headerlink" title="7. 프로젝트의 url.py 수정"></a>7. 프로젝트의 url.py 수정</h2><blockquote><p>경로 : dstagram_project &gt; config &gt; urls.py</p></blockquote><p><code>urlpattern += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</code> 주석처리</p><h2 id="8-S3-버킷에-media-파일-생성-및-연동"><a href="#8-S3-버킷에-media-파일-생성-및-연동" class="headerlink" title="8. S3 버킷에 media 파일 생성 및 연동"></a>8. S3 버킷에 media 파일 생성 및 연동</h2><ul><li>S3 버킷 생성 이전, 이미 생성한 media 파일들을 업로드하기 위한 코드 입력<blockquote><p>경로 : dstagram_project &gt; s3_upload.py 생성</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3 <span class="comment"># s3에 파일을 업로드 하는 용도</span></span><br><span class="line"><span class="keyword">import</span> os <span class="comment"># 현재 업로드할 파일 탐색</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_files</span><span class="params">(search_path, target_path)</span>:</span></span><br><span class="line">       session = boto3.Session(</span><br><span class="line">           aws_access_key_id=<span class="string">'ACCESS KEY ID 입력'</span>,  </span><br><span class="line">           aws_secret_access_key=<span class="string">'SECRET ACCESS KEY 입력'</span>,</span><br><span class="line">           region_name=<span class="string">'ap-northeast-2'</span></span><br><span class="line">       )</span><br><span class="line"> </span><br><span class="line">       s3 = session.resource(<span class="string">'s3'</span>)</span><br><span class="line">       bucket = s3.Bucket(<span class="string">'wpsschool'</span>)</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">for</span> current_dir, subdir, files <span class="keyword">in</span> os.walk(search_path):</span><br><span class="line">           <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">               full_path = os.path.join(current_dir, file)</span><br><span class="line">               <span class="keyword">with</span> open(full_path, <span class="string">'rb'</span>) <span class="keyword">as</span> data: <span class="comment"># rb - binary 형태</span></span><br><span class="line">                   bucket.put_object(Key=target_path+<span class="string">"/"</span>+(full_path.replace(<span class="string">"\\"</span>,<span class="string">"/"</span>))[len(search_path)+<span class="number">1</span>:],Body=data, ACL=<span class="string">'public-read'</span>)</span><br><span class="line">               <span class="comment"># Key는 media 하위에 올릴 것이다.(s3에 올라가는 폴더) 윈도우에서는 하위 경로를 \\로 표시하므로, /로 바꿔준다.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">       upload_files(<span class="string">'./media'</span>, <span class="string">'media'</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/08/190508-django-AWS-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>북마크 프로젝트_배포(heroku)</title>
      <link>https://chohyeonkeun.github.io/2019/05/07/190507-django-bookmark-project-3/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/07/190507-django-bookmark-project-3/</guid>
      <pubDate>Tue, 07 May 2019 08:28:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-heroku-다운로드-및-설치&quot;&gt;&lt;a href=&quot;#1-heroku-다운로드-및-설치&quot; class=&quot;headerlink&quot; title=&quot;1. heroku 다운로드 및 설치&quot;&gt;&lt;/a&gt;1. heroku 다운로드 및 설치&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;macOS : &lt;code&gt;brew tap heroku/brew &amp;amp;&amp;amp; brew install heroku&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ubuntu 16+ : &lt;code&gt;sudo snap install -classic heroku&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows : &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli#download-and-install&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://devcenter.heroku.com/articles/heroku-cli#download-and-install&lt;/a&gt; 에서 다운로드 및 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-추가-모듈-설치&quot;&gt;&lt;a href=&quot;#2-추가-모듈-설치&quot; class=&quot;headerlink&quot; title=&quot;2. 추가 모듈 설치&quot;&gt;&lt;/a&gt;2. 추가 모듈 설치&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;경로 : bookmark_project &amp;gt; &lt;code&gt;pip3 install [모듈명]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;dj-database-url : 데이터베이스 관련 옵션을 변수로 쉽게 접근할 수 있게 해주는 유틸리티&lt;/li&gt;
&lt;li&gt;gunicorn : wsgi용 미들웨어 –&amp;gt; 웹서버와 장고 사리의 다리 역할&lt;/li&gt;
&lt;li&gt;whitenoise : static 파일 서빙용 미들웨어&lt;/li&gt;
&lt;li&gt;psycopg2-binary : postgreSQL용 드라이버&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-heroku-다운로드-및-설치"><a href="#1-heroku-다운로드-및-설치" class="headerlink" title="1. heroku 다운로드 및 설치"></a>1. heroku 다운로드 및 설치</h2><ul><li>macOS : <code>brew tap heroku/brew &amp;&amp; brew install heroku</code></li><li>Ubuntu 16+ : <code>sudo snap install -classic heroku</code></li><li>Windows : <a href="https://devcenter.heroku.com/articles/heroku-cli#download-and-install" target="_blank" rel="noopener">https://devcenter.heroku.com/articles/heroku-cli#download-and-install</a> 에서 다운로드 및 설치</li></ul><h2 id="2-추가-모듈-설치"><a href="#2-추가-모듈-설치" class="headerlink" title="2. 추가 모듈 설치"></a>2. 추가 모듈 설치</h2><blockquote><p>경로 : bookmark_project &gt; <code>pip3 install [모듈명]</code></p></blockquote><ul><li>dj-database-url : 데이터베이스 관련 옵션을 변수로 쉽게 접근할 수 있게 해주는 유틸리티</li><li>gunicorn : wsgi용 미들웨어 –&gt; 웹서버와 장고 사리의 다리 역할</li><li>whitenoise : static 파일 서빙용 미들웨어</li><li>psycopg2-binary : postgreSQL용 드라이버</li></ul><p><br><br><a id="more"></a></p><h2 id="3-requirements-txt-파일-생성"><a href="#3-requirements-txt-파일-생성" class="headerlink" title="3. requirements.txt 파일 생성"></a>3. requirements.txt 파일 생성</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h2 id="4-모듈-설정"><a href="#4-모듈-설정" class="headerlink" title="4. 모듈 설정"></a>4. 모듈 설정</h2><blockquote><p>경로 : bookmark_project &gt; config &gt; settings.py </p></blockquote><ul><li>DEBUG = False </li><li>ALLOWED_HOSTS = [‘*’] </li><li>MIDDLEWARE = [ …, ‘whitenoise.middleware.WhiteNoiseMiddleware’, ]</li><li>import dj_database_url<br>DATABASES[‘default’].update(dj_database_url.config(conn_max_age=500)</li><li>STATIC_URL = ‘/static/‘</li><li>STATIC_ROOT = os.path.join(BASE_DIR, ‘staticsfiles’)</li></ul><h2 id="5-Procfile-텍스트-파일-생성-및-코드-작성"><a href="#5-Procfile-텍스트-파일-생성-및-코드-작성" class="headerlink" title="5. Procfile 텍스트 파일 생성 및 코드 작성"></a>5. Procfile 텍스트 파일 생성 및 코드 작성</h2><blockquote><p>경로 : bookmark_project &gt; Procfile</p></blockquote><ul><li>wsgi로 gunicorn 설정<br><code>web: gunicorn config.wsgi</code></li></ul><h2 id="6-runtime-txt-파일-생성-및-코드-작성"><a href="#6-runtime-txt-파일-생성-및-코드-작성" class="headerlink" title="6. runtime.txt 파일 생성 및 코드 작성"></a>6. runtime.txt 파일 생성 및 코드 작성</h2><blockquote><p>경로 : bookmark_project &gt; runtime.txt</p></blockquote><ul><li>app을 어떤 파이썬 버젼으로 작동시킬지 runtime을 정해준다.<br><code>python-3.7.0</code></li></ul><h2 id="7-heroku-로그인"><a href="#7-heroku-로그인" class="headerlink" title="7. heroku 로그인"></a>7. heroku 로그인</h2><p><code>heroku login</code> (bookmark_project 디렉토리 위치)</p><h2 id="8-git-연동"><a href="#8-git-연동" class="headerlink" title="8. git 연동"></a>8. git 연동</h2><ul><li>.gitignore 파일 생성 (bookmark_project 디렉토리 위치)</li><li><p>.gitignore 파일 내 코드 작성 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.pyc</span><br><span class="line">*~</span><br><span class="line">/venv</span><br><span class="line">db.sqlite3</span><br><span class="line">.DS_Store</span><br></pre></td></tr></table></figure></li><li><p><code>git init &gt; git add -A . &gt; git commit -m &#39;deploy using heroku&#39;</code> (bookmark_project 디렉토리 위치)</p></li></ul><h2 id="9-heroku-app-생성"><a href="#9-heroku-app-생성" class="headerlink" title="9. heroku app 생성"></a>9. heroku app 생성</h2><p><code>heroku create chk-bookmark</code> (bookmark_project 디렉토리 위치) </p><h2 id="10-heroku에-업로드"><a href="#10-heroku에-업로드" class="headerlink" title="10. heroku에 업로드"></a>10. heroku에 업로드</h2><p><code>git push heroku master</code> (bookmark_project 디렉토리 위치) </p><h2 id="11-DB-초기화"><a href="#11-DB-초기화" class="headerlink" title="11. DB 초기화"></a>11. DB 초기화</h2><p><code>heroku run python3 manage.py migrate</code> (bookmark_project 디렉토리 위치) </p><h2 id="12-관리자-비번-만들기"><a href="#12-관리자-비번-만들기" class="headerlink" title="12. 관리자 비번 만들기"></a>12. 관리자 비번 만들기</h2><p><code>heroku run python3 manage.py createsuperuser</code> (bookmark_project 디렉토리 위치) </p><h2 id="13-heroku를-통한-사이트-확인"><a href="#13-heroku를-통한-사이트-확인" class="headerlink" title="13. heroku를 통한 사이트 확인"></a>13. heroku를 통한 사이트 확인</h2><p><code>heroku open</code> (bookmark_project 디렉토리 위치) </p>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/07/190507-django-bookmark-project-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>북마크 프로젝트_템플릿 생성</title>
      <link>https://chohyeonkeun.github.io/2019/05/06/190506-django-bookmark-project-2/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/06/190506-django-bookmark-project-2/</guid>
      <pubDate>Mon, 06 May 2019 11:55:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-template-파일-생성하기&quot;&gt;&lt;a href=&quot;#1-template-파일-생성하기&quot; class=&quot;headerlink&quot; title=&quot;1. template 파일 생성하기&quot;&gt;&lt;/a&gt;1. template 파일 생성하기&lt;/h2&gt;&lt;p&gt;views.py에서 정의한 클래스형 뷰에 따라, 연동할 템플릿 파일들을 생성한다.&lt;br&gt;단, 템플릿 파일 이름은 앞서 작성한 template 이름의 접미사와 일치하도록 아래와 같이 생성해준다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;경로 : bookmark_project &amp;gt; bookmark &amp;gt; templates &amp;gt; bookmark&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bookmark_create.html&lt;/li&gt;
&lt;li&gt;bookmark_delete.html&lt;/li&gt;
&lt;li&gt;bookmark_detail.html&lt;/li&gt;
&lt;li&gt;bookmark_list.html&lt;/li&gt;
&lt;li&gt;bookmark_update.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-template-파일-생성하기"><a href="#1-template-파일-생성하기" class="headerlink" title="1. template 파일 생성하기"></a>1. template 파일 생성하기</h2><p>views.py에서 정의한 클래스형 뷰에 따라, 연동할 템플릿 파일들을 생성한다.<br>단, 템플릿 파일 이름은 앞서 작성한 template 이름의 접미사와 일치하도록 아래와 같이 생성해준다.</p><blockquote><p>경로 : bookmark_project &gt; bookmark &gt; templates &gt; bookmark</p></blockquote><ul><li>bookmark_create.html</li><li>bookmark_delete.html</li><li>bookmark_detail.html</li><li>bookmark_list.html</li><li>bookmark_update.html</li></ul><p><br><br><a id="more"></a></p><h2 id="2-Bootstrap-설치-및-적용하기"><a href="#2-Bootstrap-설치-및-적용하기" class="headerlink" title="2. Bootstrap 설치 및 적용하기"></a>2. Bootstrap 설치 및 적용하기</h2><p>CSS를 보다 쉽고 간편하게 적용하고 싶다면,<br>HTML 프레임워크인 Bootstrap을 적용해보자.</p><ol><li>getbootstrap.com 접속</li><li>메인페이지에서 Get started 클릭</li><li>CSS 부분의 코드와 JS 부분의 코드 복사</li><li>CSS 부분의 코드는 적용할 html 코드에서  이전 줄에 붙여넣기</li><li>JS 부분의 코드는 적용할 html 코드에서  이전 줄에 붙여넣기</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.3.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-base-html-생성하기"><a href="#3-base-html-생성하기" class="headerlink" title="3. base.html 생성하기"></a>3. base.html 생성하기</h2><p>HEADER, FOOTER와 같이 모든 html 파일에 공통적으로 적용되는 html 파일을 생성해준다.</p><ul><li>base.html 생성 및 코드 작성</li><li>경로 : bookmark_project &gt; layout &gt; base.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> &#123;% block title %&#125; &#123;% endblock %&#125; <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% block extra_css %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-expand-lg navbar-light bg-light"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggler"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbarTogglerDemo01"</span> <span class="attr">aria-controls</span>=<span class="string">"navbarTogglerDemo01"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-label</span>=<span class="string">"Toggle navigation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"navbar-toggler-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"navbarTogglerDemo01"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"font-size:18px; font-weight:bold"</span>&gt;</span>조누스의 걸음마 블로그<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar-nav mr-auto mt-2 mt-lg-0"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item active"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link disabled"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">aria-disabled</span>=<span class="string">"true"</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% block extra_script %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.3.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-각-template-html파일에-base-html-적용하기"><a href="#4-각-template-html파일에-base-html-적용하기" class="headerlink" title="4. 각 template html파일에 base.html 적용하기"></a>4. 각 template html파일에 base.html 적용하기</h2><p>base.html을 적용하고 싶은 모든 template html 파일에 아래와 같이 코드를 작성한다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line"><span class="comment">&lt;!--파일 제목 작성 --&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="comment">&lt;!--코드 구현 --&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-template-html파일-코드-작성하기"><a href="#5-template-html파일-코드-작성하기" class="headerlink" title="5. template html파일 코드 작성하기"></a>5. template html파일 코드 작성하기</h2><p><strong>1. BookmarkCreate(CreateView) 클래스에서 연동한 bookmark_create.html 파일 코드</strong></p><ul><li>경로 : bookmark_project &gt; bookmark &gt; templates &gt; bookmark &gt; bookmark_create.html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">Bookmark Create</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12 col-xl-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            &#123;% csrf_token %&#125;  <span class="comment">&lt;!-- 보안관련해서 써주는 것 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> = <span class="string">"margin-top: 20px"</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>사이트 이름과 URL을 정확히 입력해주세요!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Create"</span> <span class="attr">style</span>=<span class="string">"width:200px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. BookmarkUpdate(UpdateView) 클래스에서 연동한 bookmark_update.html 파일 코드</strong></p><ul><li>경로 : bookmark_project &gt; bookmark &gt; templates &gt; bookmark &gt; bookmark_update.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">Bookmark Update</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123;form.as_p&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Create"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><strong>3. BookmarkDelete(DeleteView) 클래스에서 연동한 bookmark_delete.html 파일 코드</strong></p><ul><li>경로 : bookmark_project &gt; bookmark &gt; templates &gt; bookmark &gt; bookmark_delete.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">Bookmark Delete</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12 col-md-8 col-xl-12"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Delete Ok"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><strong>4. BookmarkDetail(DetailView) 클래스에서 연동한 bookmark_detail.html 파일 코드</strong></p><ul><li>경로 : bookmark_project &gt; bookmark &gt; templates &gt; bookmark &gt; bookmark_detail.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">Bookmark Detail</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span> <span class="attr">style</span>=<span class="string">"width: 18rem; margin-top: 50px;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span>&#123;&#123;object.site_name&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h6</span> <span class="attr">class</span>=<span class="string">"card-subtitle mb-2 text-muted"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;object.ur&#125;&#125;"</span>&gt;</span>&#123;&#123;object.url&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span>&#123;&#123;object.contents&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'bookmark:update' object.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"card-link btn btn-outline-warning"</span>&gt;</span>수정<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'bookmark:delete' object.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"card-link btn btn-outline-danger"</span>&gt;</span>삭제<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><strong>5. BookmarkList(ListView) 클래스에서 연동한 bookmark_list.html 파일 코드</strong></p><ul><li>경로 : bookmark_project &gt; bookmark &gt; templates &gt; bookmark &gt; bookmark_list.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">Bookmark List</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12 col-xl-8 col-md-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin: 20px 0 20px 0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'bookmark:create' %&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Add Bookmark<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;# bookmark 목록 출력하기 #&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span> <span class="attr">style</span>=<span class="string">"text-align:middle;"</span>&gt;</span>순<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>사이트명<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>링크<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>수정<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>삭제<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                &#123;% for object in object_list %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"vertical-align: middle;"</span>&gt;</span> &#123;&#123;object.id&#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"vertical-align: middle;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'bookmark:detail' object.id %&#125;"</span>&gt;</span>&#123;&#123;object.site_name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;object.url&#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"card-link btn btn-link"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'bookmark:update' object.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"card-link btn btn-warning"</span>&gt;</span>Modify<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'bookmark:delete' object.id %&#125;"</span> <span class="attr">class</span>=<span class="string">"card-link btn btn-danger"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="comment">&lt;!-- object.id 쓰는 이유 : bookmark/urls.py 에서 detail/&lt;converter&gt; 부분 받아오겠다라는 의미 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--//</span></span><br><span class="line"><span class="comment">C - 객체 생성</span></span><br><span class="line"><span class="comment">R - 단일 객체 -&gt; object</span></span><br><span class="line"><span class="comment">U - 단일 객체 -&gt; object</span></span><br><span class="line"><span class="comment">D - 단일 객체 -&gt; object</span></span><br><span class="line"><span class="comment">L - 복수 객체 -&gt; object_list</span></span><br><span class="line"><span class="comment">//--&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/06/190506-django-bookmark-project-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>북마크 프로젝트_앱 생성</title>
      <link>https://chohyeonkeun.github.io/2019/05/05/190505-django-bookmark-project-1/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/05/190505-django-bookmark-project-1/</guid>
      <pubDate>Sun, 05 May 2019 10:11:03 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-project-생성&quot;&gt;&lt;a href=&quot;#1-project-생성&quot; class=&quot;headerlink&quot; title=&quot;1. project 생성&quot;&gt;&lt;/a&gt;1. project 생성&lt;/h2&gt;&lt;p&gt;원래 프로젝트 이름만 작성하면, 프로젝트 폴더 안에 프로젝트 폴더가 생기게 되는데&lt;br&gt;[프로젝트 이름] 뒤에 ‘.’을 작성하면 현재 디렉토리에 ‘config’라는 폴더를 바로 생성해준다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ django-admin startproject config .        &lt;span class=&quot;comment&quot;&gt;# bookmark_project 디렉토리 위치에서 실행&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-app-생성&quot;&gt;&lt;a href=&quot;#2-app-생성&quot; class=&quot;headerlink&quot; title=&quot;2. app 생성&quot;&gt;&lt;/a&gt;2. app 생성&lt;/h2&gt;&lt;p&gt;‘bookmark’ 이름으로 앱을 생성해준다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ python3 manage.py bookmark                &lt;span class=&quot;comment&quot;&gt;# bookmark_project 디렉토리 위치에서 실행&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-project-생성"><a href="#1-project-생성" class="headerlink" title="1. project 생성"></a>1. project 생성</h2><p>원래 프로젝트 이름만 작성하면, 프로젝트 폴더 안에 프로젝트 폴더가 생기게 되는데<br>[프로젝트 이름] 뒤에 ‘.’을 작성하면 현재 디렉토리에 ‘config’라는 폴더를 바로 생성해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startproject config .        <span class="comment"># bookmark_project 디렉토리 위치에서 실행</span></span><br></pre></td></tr></table></figure><h2 id="2-app-생성"><a href="#2-app-생성" class="headerlink" title="2. app 생성"></a>2. app 생성</h2><p>‘bookmark’ 이름으로 앱을 생성해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py bookmark                <span class="comment"># bookmark_project 디렉토리 위치에서 실행</span></span><br></pre></td></tr></table></figure><p><br><br><a id="more"></a></p><h2 id="3-project에-app-추가"><a href="#3-project에-app-추가" class="headerlink" title="3. project에 app 추가"></a>3. project에 app 추가</h2><p>config 프로젝트에 bookmark 앱을 추가한다는 의미로 생각하면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bookmark_project &gt; config &gt; settings.py</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'bookmark'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-project의-url-경로-설정"><a href="#4-project의-url-경로-설정" class="headerlink" title="4. project의 url 경로 설정"></a>4. project의 url 경로 설정</h2><p>path를 사용하여 어떤 이름으로 url을 설정할지 결정해준다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'bookmark.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="5-app의-model-정의"><a href="#5-app의-model-정의" class="headerlink" title="5. app의 model 정의"></a>5. app의 model 정의</h2><p>앱에서 사용할 모델을 정의해주고, DB에 어떤 필드(field)를 구현할지 작성한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bookmark</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    site_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    url = models.URLField()</span><br><span class="line">    contents = models.TextField(blank=<span class="literal">True</span>)</span><br><span class="line">    create = models.DateTimeField(auto_now_add=<span class="literal">True</span>)    <span class="comment"># auto_now_add : 처음 저장될 때의 시간을 자동으로 처리</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 관리자 페이지 목록에 표시될 내용 작성</span></span><br><span class="line">    <span class="comment"># DB 저장 불필요 -&gt; migration, migrate 불필요</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Site name : "</span> + self.site_name + <span class="string">" (URL : "</span> + self.url + <span class="string">")"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 메타 클래스는 옵션 클래스 --&gt; 상속을 받은 속성값의 변경이 필요할 때 사용*</span></span><br><span class="line">    <span class="comment"># DB 저장 필요 -&gt; migration, migrate 필요</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line"><span class="comment"># 정렬 : (필드이름) -&gt; 필드값 오름차순, (-필드이름) -&gt; 필드값 내림차순*</span></span><br><span class="line">ordering = [<span class="string">'-id'</span>]</span><br></pre></td></tr></table></figure><h2 id="6-제네릭뷰-상속받는-클래스-생성하기"><a href="#6-제네릭뷰-상속받는-클래스-생성하기" class="headerlink" title="6. 제네릭뷰 상속받는 클래스 생성하기"></a>6. 제네릭뷰 상속받는 클래스 생성하기</h2><p>앞서 models.py에서 데이터를 저장할 필드 및 제약조건 등을 설정해주었고,<br>생성된 model을 이용하여 views.py에서 사용자들에게 보여지는 페이지를 구성한다. </p><ul><li>경로: bookmark_project &gt; bookmark &gt; views.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookmarkList</span><span class="params">(ListView)</span>:</span>                   <span class="comment"># 클래스형 뷰 작명은 자유 </span></span><br><span class="line">    model = Bookmark</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookmarkCreate</span><span class="params">(CreateView)</span>:</span></span><br><span class="line">    model = Bookmark</span><br><span class="line">    fields = [<span class="string">'site_name'</span>, <span class="string">'url'</span>, <span class="string">'contents'</span>]   <span class="comment"># 'site_name', 'url', 'contents' 3개의 필드를 입력받게 한다.</span></span><br><span class="line">    template_name_suffix = <span class="string">'_create'</span>            <span class="comment"># 접미사가 _create인 템플릿 html파일을 연동시켜준다.</span></span><br><span class="line">    success_url = <span class="string">'/'</span>                           <span class="comment"># 해당 템플릿 html 파일이 실행되고나서 메인 페이지로 이동한다.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookmarkUpdate</span><span class="params">(UpdateView)</span>:</span></span><br><span class="line">    model = Bookmark</span><br><span class="line">    fields = [<span class="string">'site_name'</span>, <span class="string">'url'</span>, <span class="string">'contents'</span>]</span><br><span class="line">    template_name_suffix = <span class="string">'_update'</span></span><br><span class="line">    success_url = <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookmarkDelete</span><span class="params">(DeleteView)</span>:</span></span><br><span class="line">    model = Bookmark</span><br><span class="line">    template_name_suffix = <span class="string">'_delete'</span></span><br><span class="line">    success_url = <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookmarkDetail</span><span class="params">(DetailView)</span>:</span></span><br><span class="line">    model = Bookmark</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/05/190505-django-bookmark-project-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 튜터리얼 학습</title>
      <link>https://chohyeonkeun.github.io/2019/05/04/190504-django-Base-Procedure/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/04/190504-django-Base-Procedure/</guid>
      <pubDate>Sat, 04 May 2019 09:34:10 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;1-장고-프로젝트-진행할-디렉토리-생성&quot;&gt;&lt;a href=&quot;#1-장고-프로젝트-진행할-디렉토리-생성&quot; class=&quot;headerlink&quot; title=&quot;1. 장고 프로젝트 진행할 디렉토리 생성&quot;&gt;&lt;/a&gt;1. 장고 프로젝트 진행할 디렉토리 생성&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;장고 프로젝트를 진행할 디렉토리를 생성해준다. (원하는 경로에 디렉토리 생성)&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir django_project                         &lt;span class=&quot;comment&quot;&gt;# django_project 디렉토리 생성&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-가상환경-설치-및-활성화&quot;&gt;&lt;a href=&quot;#2-가상환경-설치-및-활성화&quot; class=&quot;headerlink&quot; title=&quot;2. 가상환경 설치 및 활성화&quot;&gt;&lt;/a&gt;2. 가상환경 설치 및 활성화&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;가상환경이 설치되어 있지 않다면 pip install을 사용하자. &lt;/li&gt;
&lt;li&gt;혹시 모르니, pip version 확인하여 최신버전으로 업그레이드를 해보자. (bookmark_project 디렉토리 위치에서 실행)&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pip --version                               &lt;span class=&quot;comment&quot;&gt;# pip version 확인&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pip install --upgrade pip                   &lt;span class=&quot;comment&quot;&gt;# pip 업그레이드&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pip install virtualenv                      &lt;span class=&quot;comment&quot;&gt;# virtualenv 설치&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ virtualenv --python=python3.6 venv          &lt;span class=&quot;comment&quot;&gt;# virtualenv를 &#39;venv&#39;라는 이름으로 설치하고, python3.6으로 python 버젼 설정 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; venv/bin/activate                    &lt;span class=&quot;comment&quot;&gt;# virtualenv(venv) 활성화&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="1-장고-프로젝트-진행할-디렉토리-생성"><a href="#1-장고-프로젝트-진행할-디렉토리-생성" class="headerlink" title="1. 장고 프로젝트 진행할 디렉토리 생성"></a>1. 장고 프로젝트 진행할 디렉토리 생성</h2><ul><li>장고 프로젝트를 진행할 디렉토리를 생성해준다. (원하는 경로에 디렉토리 생성)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir django_project                         <span class="comment"># django_project 디렉토리 생성</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-가상환경-설치-및-활성화"><a href="#2-가상환경-설치-및-활성화" class="headerlink" title="2. 가상환경 설치 및 활성화"></a>2. 가상환경 설치 및 활성화</h2><ul><li>가상환경이 설치되어 있지 않다면 pip install을 사용하자. </li><li>혹시 모르니, pip version 확인하여 최신버전으로 업그레이드를 해보자. (bookmark_project 디렉토리 위치에서 실행)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pip --version                               <span class="comment"># pip version 확인</span></span><br><span class="line">$ pip install --upgrade pip                   <span class="comment"># pip 업그레이드</span></span><br><span class="line">$ pip install virtualenv                      <span class="comment"># virtualenv 설치</span></span><br><span class="line">$ virtualenv --python=python3.6 venv          <span class="comment"># virtualenv를 'venv'라는 이름으로 설치하고, python3.6으로 python 버젼 설정 </span></span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate                    <span class="comment"># virtualenv(venv) 활성화</span></span><br></pre></td></tr></table></figure></li></ul><p><br><br><a id="more"></a></p><h2 id="3-django-설치-및-확인"><a href="#3-django-설치-및-확인" class="headerlink" title="3. django 설치 및 확인"></a>3. django 설치 및 확인</h2><ul><li>먼저 장고를 설치하기 위해 pip install을 사용하자. (bookmark_project 디렉토리 위치에서 실행)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install django==2.1                     <span class="comment"># django 2.1 version 설치</span></span><br><span class="line">$ python -m django --version                  <span class="comment"># django version 확인</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-django-project-생성"><a href="#4-django-project-생성" class="headerlink" title="4. django project 생성"></a>4. django project 생성</h2><ul><li>django를 활용하여 수행할 프로젝트를 생성한다. (bookmark_project 디렉토리 위치에서 실행)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startproject config .          <span class="comment"># 'config' 프로젝트 생성</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-django-서버-동작하는지-확인"><a href="#5-django-서버-동작하는지-확인" class="headerlink" title="5. django 서버 동작하는지 확인"></a>5. django 서버 동작하는지 확인</h2><ul><li>서버가 잘 동작하는지 확인해준다. (bookmark_project 디렉토리 위치에서 실행)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver (port번호)       <span class="comment"># port default값 : 8000</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="6-django-project의-app-생성-및-관련-코드-작성"><a href="#6-django-project의-app-생성-및-관련-코드-작성" class="headerlink" title="6. django project의 app 생성 및 관련 코드 작성"></a>6. django project의 app 생성 및 관련 코드 작성</h2><ul><li><p>django 프로젝트(config)에서 기능을 담은 앱(photo) 생성 (bookmark_project 디렉토리 위치에서 실행)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py startapp photo            <span class="comment"># photo라는 app을 생성한다.</span></span><br></pre></td></tr></table></figure></li><li><p>polls &gt; models.py : 데이터베이스에 저장될 field 정의 (데이터 유형에 적절한 field 정의)</p></li><li>polls &gt; views.py : 실제 화면에 구현되는 코드 작성 (클래스형 뷰, 함수형 뷰 등)</li><li>polls &gt; urls.py : 기능별 사이트 url 정의 (path로 경로 설정)</li><li>polls &gt; templates &gt; photo &gt; (CRUDL).html : 화면에서 보여질 내용들을 views.py가 template을 이용하여 html 코드로 구현 </li></ul><h2 id="7-app을-project에-포함"><a href="#7-app을-project에-포함" class="headerlink" title="7. app을 project에 포함"></a>7. app을 project에 포함</h2><ul><li>앱 관련 코드 작성 이후, 해당 앱을 프로젝트에 포함시켜준다.<br>config &gt; settings.py &gt; ‘INSTALLED_APPS’ 설정에 ‘photo’ 추가</li></ul><h2 id="8-모델-변경사항-migration으로-저장"><a href="#8-모델-변경사항-migration으로-저장" class="headerlink" title="8. 모델 변경사항 migration으로 저장"></a>8. 모델 변경사항 migration으로 저장</h2><ul><li>모델을 변경시킨 사실과 이 변경사항을 migration으로 저장시키고 싶다는 것을 django에게 알림<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; python manage.py makemigrations           <span class="comment"># bookmark_project 디렉토리 위치에서 실행</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="9-데이터베이스에-모델과-관련된-테이블-생성"><a href="#9-데이터베이스에-모델과-관련된-테이블-생성" class="headerlink" title="9. 데이터베이스에 모델과 관련된 테이블 생성"></a>9. 데이터베이스에 모델과 관련된 테이블 생성</h2><ul><li>이 과정을 통해 모델에서의 변경 사항들과 데이터베이스의 스키마 동기화가 이루어진다. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate                  <span class="comment"># bookmark_project 디렉토리 위치에서 실행</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="10-superuser-생성"><a href="#10-superuser-생성" class="headerlink" title="10. superuser 생성"></a>10. superuser 생성</h2><ul><li>관리자(개발자) 페이지의 superuser를 생성한다. (bookmark_project 디렉토리 위치에서 실행)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser            <span class="comment"># 여기에선 Username = admin 으로 설정</span></span><br><span class="line">python manage.py changepassword admin       <span class="comment"># superuser 비밀번호 변경</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/04/190504-django-Base-Procedure/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Page 기능 학습</title>
      <link>https://chohyeonkeun.github.io/2019/05/03/190503-django-page-function/</link>
      <guid>https://chohyeonkeun.github.io/2019/05/03/190503-django-page-function/</guid>
      <pubDate>Fri, 03 May 2019 08:00:21 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;함수형-뷰에서-paginator-없이-page-기능-구현&quot;&gt;&lt;a href=&quot;#함수형-뷰에서-paginator-없이-page-기능-구현&quot; class=&quot;headerlink&quot; title=&quot;함수형 뷰에서 paginator 없이 page 기능 구현&quot;&gt;&lt;/a&gt;함수형 뷰에서 paginator 없이 page 기능 구현&lt;/h2&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;경로-board-project-gt-board-gt-views-py&quot;&gt;&lt;a href=&quot;#경로-board-project-gt-board-gt-views-py&quot; class=&quot;headerlink&quot; title=&quot;- 경로 : board_project &amp;gt; board &amp;gt; views.py&quot;&gt;&lt;/a&gt;- 경로 : board_project &amp;gt; board &amp;gt; views.py&lt;/h3&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><h2 id="함수형-뷰에서-paginator-없이-page-기능-구현"><a href="#함수형-뷰에서-paginator-없이-page-기능-구현" class="headerlink" title="함수형 뷰에서 paginator 없이 page 기능 구현"></a>함수형 뷰에서 paginator 없이 page 기능 구현</h2></blockquote><h3 id="경로-board-project-gt-board-gt-views-py"><a href="#경로-board-project-gt-board-gt-views-py" class="headerlink" title="- 경로 : board_project &gt; board &gt; views.py"></a>- 경로 : board_project &gt; board &gt; views.py</h3><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">document_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    page = int(request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># page가 없다면, default값 1로 설정 --&gt; 127.0.0.1:8000/?page=1</span></span><br><span class="line">    paginated_by = <span class="number">3</span></span><br><span class="line">    <span class="comment"># 한 페이지당 갯수 3으로 설정</span></span><br><span class="line">    documents = Document.objects.all()</span><br><span class="line">    total_count = len(documents)</span><br><span class="line">    total_page = math.ceil(total_count/paginated_by)</span><br><span class="line">    page_range = range(<span class="number">1</span>, total_page+<span class="number">1</span>)</span><br><span class="line">    start_index = paginated_by * (page<span class="number">-1</span>)</span><br><span class="line">    end_index = paginated_by * page</span><br><span class="line">    documents = documents[start_index:end_index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'board/document_list.html'</span>,&#123;<span class="string">'object_list'</span>:documents, <span class="string">'total_page'</span>:total_page, <span class="string">'page_range'</span>:page_range&#125;)</span><br></pre></td></tr></table></figure><h3 id="경로-board-project-gt-board-gt-templates-gt-board-gt-document-list-html"><a href="#경로-board-project-gt-board-gt-templates-gt-board-gt-document-list-html" class="headerlink" title="- 경로 : board_project &gt; board &gt; templates &gt; board &gt; document_list.html"></a>- 경로 : board_project &gt; board &gt; templates &gt; board &gt; document_list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>User<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Date<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    &#123;% for object in object_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board:detail' object.id %&#125;"</span>&gt;</span>&#123;&#123;object.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.author.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.updated&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination justify-content-center"</span>&gt;</span></span><br><span class="line">        &#123;% for page in page_range %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'board:list' %&#125;?page=&#123;&#123;page&#125;&#125;"</span>&gt;</span>&#123;&#123;page&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><h2 id="클래스형-뷰에서-paginator로-page-기능-구현"><a href="#클래스형-뷰에서-paginator로-page-기능-구현" class="headerlink" title="클래스형 뷰에서 paginator로 page 기능 구현"></a>클래스형 뷰에서 paginator로 page 기능 구현</h2></blockquote><h3 id="경로-wps-blog-gt-post-gt-views-py"><a href="#경로-wps-blog-gt-post-gt-views-py" class="headerlink" title="- 경로 : wps_blog &gt; post &gt; views.py"></a>- 경로 : wps_blog &gt; post &gt; views.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic.list <span class="keyword">import</span> ListView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostList</span><span class="params">(ListView)</span>:</span></span><br><span class="line">    model = Post</span><br><span class="line">    <span class="comment"># 클래스형 뷰 중, 리스트 뷰를 사용한다면 paginate_by에 숫자 설정하면, Paginator 객체 얻을 수 있다. </span></span><br><span class="line">    paginate_by = <span class="number">3</span></span><br><span class="line">    paginate_orphans = <span class="number">0</span> <span class="comment"># 나머지 객체 수</span></span><br><span class="line">    template_name = <span class="string">'post/post_list.html'</span></span><br></pre></td></tr></table></figure><h3 id="경로-wps-blog-gt-post-gt-templates-gt-post-gt-post-list-html"><a href="#경로-wps-blog-gt-post-gt-templates-gt-post-gt-post-list-html" class="headerlink" title="- 경로 : wps_blog &gt; post &gt; templates &gt; post &gt; post_list.html"></a>- 경로 : wps_blog &gt; post &gt; templates &gt; post &gt; post_list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row mt-3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-10 col-md-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>created<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>updated<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                &#123;% if user.is_authenticated %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>update<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            &#123;% for object in object_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;object.get_absolute_url&#125;&#125;"</span>&gt;</span>&#123;&#123;object.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.created&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;object.updated&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;% if user.is_authenticated %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'post:post_update' object.id %&#125;"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'post:post_delete' object.id %&#125;"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% if is_paginated %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination justify-content-center"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- page.has_previous : 이전 페이지 여부 --&gt;</span></span><br><span class="line">                &#123;% if page_obj.has_previous %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"?page=&#123;&#123;page_obj.previous_page_number&#125;&#125;"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                <span class="comment">&lt;!-- paginator.page_range : 페이지 범위 --&gt;</span></span><br><span class="line">                &#123;% for page in paginator.page_range %&#125;</span><br><span class="line">                <span class="comment">&lt;!-- page 숫자 표시 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"?page=&#123;&#123;page&#125;&#125;"</span>&gt;</span>&#123;&#123;page&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                <span class="comment">&lt;!-- page_obj.has_next : 다음 페이지 여부 --&gt;</span></span><br><span class="line">                &#123;% if page_obj.has_next %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"?page=&#123;&#123;page_obj.next_page_number&#125;&#125;"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-item disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><h2 id="Paginator-학습"><a href="#Paginator-학습" class="headerlink" title="Paginator 학습"></a>Paginator 학습</h2></blockquote><h3 id="Paginator-란"><a href="#Paginator-란" class="headerlink" title="Paginator 란?"></a>Paginator 란?</h3><ul><li>리스트형 뷰에서 페이징 기능은 필수이다.</li><li>직접 페이징 기능 구현은 가능하지만, 쉽게 페이징 기능을 구현해주는 모듈이 Paginator이다. </li></ul><h3 id="Paginator-기초"><a href="#Paginator-기초" class="headerlink" title="Paginator 기초"></a>Paginator 기초</h3><ul><li><p>모델 페이징하기</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br></pre></td></tr></table></figure></li><li><p>전체 객체 수</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paginator.count</span><br></pre></td></tr></table></figure></li><li><p>페이지 수</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paginator.num_pages</span><br></pre></td></tr></table></figure></li><li><p>페이지 범위</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paginator.page_range</span><br></pre></td></tr></table></figure></li><li><p>원하는 페이지 얻기</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page = paginator.page(1)</span><br></pre></td></tr></table></figure></li><li><p>페이지에 속한 객체 목록</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.object_list</span><br></pre></td></tr></table></figure></li><li><p>다음 페이지 여부</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.has_next()</span><br></pre></td></tr></table></figure></li><li><p>이전 페이지 여부</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.has_previous()</span><br></pre></td></tr></table></figure></li><li><p>다음 페이지 번호</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.next_page_number()</span><br></pre></td></tr></table></figure></li><li><p>이전 페이지 번호</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.previous_page_number()</span><br></pre></td></tr></table></figure></li><li><p>다른 페이지 존재 여부</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.has_other_pages()</span><br></pre></td></tr></table></figure></li><li><p>해당 페이지 객체 인덱스</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page.start_index()</span><br><span class="line">page.end_index()</span><br></pre></td></tr></table></figure></li><li><p>리스트에 페이지 출력</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for page_num in paginator.page_range %&#125;</span><br><span class="line">&lt;a href=&quot;?page=&#123;&#123;page_num&#125;&#125;&quot;&gt;&#123;&#123;page_num&#125;&#125;&lt;/a&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://chohyeonkeun.github.io/2019/05/03/190503-django-page-function/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
